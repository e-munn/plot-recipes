{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { createAlgorithm02 } from '../../type/matrix/utils/algorithm02.js';\nimport { createAlgorithm03 } from '../../type/matrix/utils/algorithm03.js';\nimport { createAlgorithm05 } from '../../type/matrix/utils/algorithm05.js';\nimport { createAlgorithm11 } from '../../type/matrix/utils/algorithm11.js';\nimport { createAlgorithm12 } from '../../type/matrix/utils/algorithm12.js';\nimport { createAlgorithm13 } from '../../type/matrix/utils/algorithm13.js';\nimport { createAlgorithm14 } from '../../type/matrix/utils/algorithm14.js';\nimport { modNumber } from '../../plain/number/index.js';\nvar name = 'mod';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'DenseMatrix'];\nexport var createMod = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar,\n    DenseMatrix\n  } = _ref;\n  var algorithm02 = createAlgorithm02({\n    typed,\n    equalScalar\n  });\n  var algorithm03 = createAlgorithm03({\n    typed\n  });\n  var algorithm05 = createAlgorithm05({\n    typed,\n    equalScalar\n  });\n  var algorithm11 = createAlgorithm11({\n    typed,\n    equalScalar\n  });\n  var algorithm12 = createAlgorithm12({\n    typed,\n    DenseMatrix\n  });\n  var algorithm13 = createAlgorithm13({\n    typed\n  });\n  var algorithm14 = createAlgorithm14({\n    typed\n  });\n  /**\n   * Calculates the modulus, the remainder of an integer division.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * The modulus is defined as:\n   *\n   *     x - y * floor(x / y)\n   *\n   * See https://en.wikipedia.org/wiki/Modulo_operation.\n   *\n   * Syntax:\n   *\n   *    math.mod(x, y)\n   *\n   * Examples:\n   *\n   *    math.mod(8, 3)                // returns 2\n   *    math.mod(11, 2)               // returns 1\n   *\n   *    function isOdd(x) {\n   *      return math.mod(x, 2) != 0\n   *    }\n   *\n   *    isOdd(2)                      // returns false\n   *    isOdd(3)                      // returns true\n   *\n   * See also:\n   *\n   *    divide\n   *\n   * @param  {number | BigNumber | Fraction | Array | Matrix} x Dividend\n   * @param  {number | BigNumber | Fraction | Array | Matrix} y Divisor\n   * @return {number | BigNumber | Fraction | Array | Matrix} Returns the remainder of `x` divided by `y`.\n   */\n\n  return typed(name, {\n    'number, number': modNumber,\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      if (y.isNeg()) {\n        throw new Error('Cannot calculate mod for a negative divisor');\n      }\n\n      return y.isZero() ? x : x.mod(y);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      if (y.compare(0) < 0) {\n        throw new Error('Cannot calculate mod for a negative divisor');\n      } // Workaround suggested in Fraction.js library to calculate correct modulo for negative dividend\n\n\n      return x.compare(0) >= 0 ? x.mod(y) : x.mod(y).add(y).mod(y);\n    },\n    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {\n      return algorithm05(x, y, this, false);\n    },\n    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {\n      return algorithm02(y, x, this, true);\n    },\n    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {\n      return algorithm03(x, y, this, false);\n    },\n    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\n      return algorithm13(x, y, this);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return this(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return this(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return this(x, matrix(y));\n    },\n    'SparseMatrix, any': function SparseMatrixAny(x, y) {\n      return algorithm11(x, y, this, false);\n    },\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\n      return algorithm14(x, y, this, false);\n    },\n    'any, SparseMatrix': function anySparseMatrix(x, y) {\n      return algorithm12(y, x, this, true);\n    },\n    'any, DenseMatrix': function anyDenseMatrix(x, y) {\n      return algorithm14(y, x, this, true);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, this, false).valueOf();\n    },\n    'any, Array': function anyArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, this, true).valueOf();\n    }\n  });\n});","map":{"version":3,"sources":["/Users/elimunn/Desktop/plot-recipes/node_modules/mathjs/lib/esm/function/arithmetic/mod.js"],"names":["factory","createAlgorithm02","createAlgorithm03","createAlgorithm05","createAlgorithm11","createAlgorithm12","createAlgorithm13","createAlgorithm14","modNumber","name","dependencies","createMod","_ref","typed","matrix","equalScalar","DenseMatrix","algorithm02","algorithm03","algorithm05","algorithm11","algorithm12","algorithm13","algorithm14","BigNumberBigNumber","x","y","isNeg","Error","isZero","mod","FractionFraction","compare","add","SparseMatrixSparseMatrix","SparseMatrixDenseMatrix","DenseMatrixSparseMatrix","DenseMatrixDenseMatrix","ArrayArray","valueOf","ArrayMatrix","MatrixArray","SparseMatrixAny","DenseMatrixAny","anySparseMatrix","anyDenseMatrix","ArrayAny","anyArray"],"mappings":"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","sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { createAlgorithm02 } from '../../type/matrix/utils/algorithm02.js';\nimport { createAlgorithm03 } from '../../type/matrix/utils/algorithm03.js';\nimport { createAlgorithm05 } from '../../type/matrix/utils/algorithm05.js';\nimport { createAlgorithm11 } from '../../type/matrix/utils/algorithm11.js';\nimport { createAlgorithm12 } from '../../type/matrix/utils/algorithm12.js';\nimport { createAlgorithm13 } from '../../type/matrix/utils/algorithm13.js';\nimport { createAlgorithm14 } from '../../type/matrix/utils/algorithm14.js';\nimport { modNumber } from '../../plain/number/index.js';\nvar name = 'mod';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'DenseMatrix'];\nexport var createMod = /* #__PURE__ */factory(name, dependencies, (_ref) => {\n  var {\n    typed,\n    matrix,\n    equalScalar,\n    DenseMatrix\n  } = _ref;\n  var algorithm02 = createAlgorithm02({\n    typed,\n    equalScalar\n  });\n  var algorithm03 = createAlgorithm03({\n    typed\n  });\n  var algorithm05 = createAlgorithm05({\n    typed,\n    equalScalar\n  });\n  var algorithm11 = createAlgorithm11({\n    typed,\n    equalScalar\n  });\n  var algorithm12 = createAlgorithm12({\n    typed,\n    DenseMatrix\n  });\n  var algorithm13 = createAlgorithm13({\n    typed\n  });\n  var algorithm14 = createAlgorithm14({\n    typed\n  });\n  /**\n   * Calculates the modulus, the remainder of an integer division.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * The modulus is defined as:\n   *\n   *     x - y * floor(x / y)\n   *\n   * See https://en.wikipedia.org/wiki/Modulo_operation.\n   *\n   * Syntax:\n   *\n   *    math.mod(x, y)\n   *\n   * Examples:\n   *\n   *    math.mod(8, 3)                // returns 2\n   *    math.mod(11, 2)               // returns 1\n   *\n   *    function isOdd(x) {\n   *      return math.mod(x, 2) != 0\n   *    }\n   *\n   *    isOdd(2)                      // returns false\n   *    isOdd(3)                      // returns true\n   *\n   * See also:\n   *\n   *    divide\n   *\n   * @param  {number | BigNumber | Fraction | Array | Matrix} x Dividend\n   * @param  {number | BigNumber | Fraction | Array | Matrix} y Divisor\n   * @return {number | BigNumber | Fraction | Array | Matrix} Returns the remainder of `x` divided by `y`.\n   */\n\n  return typed(name, {\n    'number, number': modNumber,\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      if (y.isNeg()) {\n        throw new Error('Cannot calculate mod for a negative divisor');\n      }\n\n      return y.isZero() ? x : x.mod(y);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      if (y.compare(0) < 0) {\n        throw new Error('Cannot calculate mod for a negative divisor');\n      } // Workaround suggested in Fraction.js library to calculate correct modulo for negative dividend\n\n\n      return x.compare(0) >= 0 ? x.mod(y) : x.mod(y).add(y).mod(y);\n    },\n    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {\n      return algorithm05(x, y, this, false);\n    },\n    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {\n      return algorithm02(y, x, this, true);\n    },\n    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {\n      return algorithm03(x, y, this, false);\n    },\n    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\n      return algorithm13(x, y, this);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return this(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return this(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return this(x, matrix(y));\n    },\n    'SparseMatrix, any': function SparseMatrixAny(x, y) {\n      return algorithm11(x, y, this, false);\n    },\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\n      return algorithm14(x, y, this, false);\n    },\n    'any, SparseMatrix': function anySparseMatrix(x, y) {\n      return algorithm12(y, x, this, true);\n    },\n    'any, DenseMatrix': function anyDenseMatrix(x, y) {\n      return algorithm14(y, x, this, true);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, this, false).valueOf();\n    },\n    'any, Array': function anyArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, this, true).valueOf();\n    }\n  });\n});"]},"metadata":{},"sourceType":"module"}