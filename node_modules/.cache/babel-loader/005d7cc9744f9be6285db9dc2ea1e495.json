{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { isMatrix } from '../../utils/is.js';\nvar name = 'dot';\nvar dependencies = ['typed', 'addScalar', 'multiplyScalar', 'conj', 'size'];\nexport var createDot = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    addScalar,\n    multiplyScalar,\n    conj,\n    size\n  } = _ref;\n  /**\n   * Calculate the dot product of two vectors. The dot product of\n   * `A = [a1, a2, ..., an]` and `B = [b1, b2, ..., bn]` is defined as:\n   *\n   *    dot(A, B) = conj(a1) * b1 + conj(a2) * b2 + ... + conj(an) * bn\n   *\n   * Syntax:\n   *\n   *    math.dot(x, y)\n   *\n   * Examples:\n   *\n   *    math.dot([2, 4, 1], [2, 2, 3])       // returns number 15\n   *    math.multiply([2, 4, 1], [2, 2, 3])  // returns number 15\n   *\n   * See also:\n   *\n   *    multiply, cross\n   *\n   * @param  {Array | Matrix} x     First vector\n   * @param  {Array | Matrix} y     Second vector\n   * @return {number}               Returns the dot product of `x` and `y`\n   */\n\n  return typed(name, {\n    'Array | DenseMatrix, Array | DenseMatrix': _denseDot,\n    'SparseMatrix, SparseMatrix': _sparseDot\n  });\n\n  function _validateDim(x, y) {\n    var xSize = _size(x);\n\n    var ySize = _size(y);\n\n    var xLen, yLen;\n\n    if (xSize.length === 1) {\n      xLen = xSize[0];\n    } else if (xSize.length === 2 && xSize[1] === 1) {\n      xLen = xSize[0];\n    } else {\n      throw new RangeError('Expected a column vector, instead got a matrix of size (' + xSize.join(', ') + ')');\n    }\n\n    if (ySize.length === 1) {\n      yLen = ySize[0];\n    } else if (ySize.length === 2 && ySize[1] === 1) {\n      yLen = ySize[0];\n    } else {\n      throw new RangeError('Expected a column vector, instead got a matrix of size (' + ySize.join(', ') + ')');\n    }\n\n    if (xLen !== yLen) throw new RangeError('Vectors must have equal length (' + xLen + ' != ' + yLen + ')');\n    if (xLen === 0) throw new RangeError('Cannot calculate the dot product of empty vectors');\n    return xLen;\n  }\n\n  function _denseDot(a, b) {\n    var N = _validateDim(a, b);\n\n    var adata = isMatrix(a) ? a._data : a;\n    var adt = isMatrix(a) ? a._datatype : undefined;\n    var bdata = isMatrix(b) ? b._data : b;\n    var bdt = isMatrix(b) ? b._datatype : undefined; // are these 2-dimensional column vectors? (as opposed to 1-dimensional vectors)\n\n    var aIsColumn = _size(a).length === 2;\n    var bIsColumn = _size(b).length === 2;\n    var add = addScalar;\n    var mul = multiplyScalar; // process data types\n\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      var dt = adt; // find signatures that matches (dt, dt)\n\n      add = typed.find(addScalar, [dt, dt]);\n      mul = typed.find(multiplyScalar, [dt, dt]);\n    } // both vectors 1-dimensional\n\n\n    if (!aIsColumn && !bIsColumn) {\n      var c = mul(conj(adata[0]), bdata[0]);\n\n      for (var i = 1; i < N; i++) {\n        c = add(c, mul(conj(adata[i]), bdata[i]));\n      }\n\n      return c;\n    } // a is 1-dim, b is column\n\n\n    if (!aIsColumn && bIsColumn) {\n      var _c = mul(conj(adata[0]), bdata[0][0]);\n\n      for (var _i = 1; _i < N; _i++) {\n        _c = add(_c, mul(conj(adata[_i]), bdata[_i][0]));\n      }\n\n      return _c;\n    } // a is column, b is 1-dim\n\n\n    if (aIsColumn && !bIsColumn) {\n      var _c2 = mul(conj(adata[0][0]), bdata[0]);\n\n      for (var _i2 = 1; _i2 < N; _i2++) {\n        _c2 = add(_c2, mul(conj(adata[_i2][0]), bdata[_i2]));\n      }\n\n      return _c2;\n    } // both vectors are column\n\n\n    if (aIsColumn && bIsColumn) {\n      var _c3 = mul(conj(adata[0][0]), bdata[0][0]);\n\n      for (var _i3 = 1; _i3 < N; _i3++) {\n        _c3 = add(_c3, mul(conj(adata[_i3][0]), bdata[_i3][0]));\n      }\n\n      return _c3;\n    }\n  }\n\n  function _sparseDot(x, y) {\n    _validateDim(x, y);\n\n    var xindex = x._index;\n    var xvalues = x._values;\n    var yindex = y._index;\n    var yvalues = y._values; // TODO optimize add & mul using datatype\n\n    var c = 0;\n    var add = addScalar;\n    var mul = multiplyScalar;\n    var i = 0;\n    var j = 0;\n\n    while (i < xindex.length && j < yindex.length) {\n      var I = xindex[i];\n      var J = yindex[j];\n\n      if (I < J) {\n        i++;\n        continue;\n      }\n\n      if (I > J) {\n        j++;\n        continue;\n      }\n\n      if (I === J) {\n        c = add(c, mul(xvalues[i], yvalues[j]));\n        i++;\n        j++;\n      }\n    }\n\n    return c;\n  } // TODO remove this once #1771 is fixed\n\n\n  function _size(x) {\n    return isMatrix(x) ? x.size() : size(x);\n  }\n});","map":{"version":3,"sources":["/Users/elimunn/Desktop/plot-recipes/node_modules/mathjs/lib/esm/function/matrix/dot.js"],"names":["factory","isMatrix","name","dependencies","createDot","_ref","typed","addScalar","multiplyScalar","conj","size","_denseDot","_sparseDot","_validateDim","x","y","xSize","_size","ySize","xLen","yLen","length","RangeError","join","a","b","N","adata","_data","adt","_datatype","undefined","bdata","bdt","aIsColumn","bIsColumn","add","mul","dt","find","c","i","_c","_i","_c2","_i2","_c3","_i3","xindex","_index","xvalues","_values","yindex","yvalues","j","I","J"],"mappings":"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","sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { isMatrix } from '../../utils/is.js';\nvar name = 'dot';\nvar dependencies = ['typed', 'addScalar', 'multiplyScalar', 'conj', 'size'];\nexport var createDot = /* #__PURE__ */factory(name, dependencies, (_ref) => {\n  var {\n    typed,\n    addScalar,\n    multiplyScalar,\n    conj,\n    size\n  } = _ref;\n\n  /**\n   * Calculate the dot product of two vectors. The dot product of\n   * `A = [a1, a2, ..., an]` and `B = [b1, b2, ..., bn]` is defined as:\n   *\n   *    dot(A, B) = conj(a1) * b1 + conj(a2) * b2 + ... + conj(an) * bn\n   *\n   * Syntax:\n   *\n   *    math.dot(x, y)\n   *\n   * Examples:\n   *\n   *    math.dot([2, 4, 1], [2, 2, 3])       // returns number 15\n   *    math.multiply([2, 4, 1], [2, 2, 3])  // returns number 15\n   *\n   * See also:\n   *\n   *    multiply, cross\n   *\n   * @param  {Array | Matrix} x     First vector\n   * @param  {Array | Matrix} y     Second vector\n   * @return {number}               Returns the dot product of `x` and `y`\n   */\n  return typed(name, {\n    'Array | DenseMatrix, Array | DenseMatrix': _denseDot,\n    'SparseMatrix, SparseMatrix': _sparseDot\n  });\n\n  function _validateDim(x, y) {\n    var xSize = _size(x);\n\n    var ySize = _size(y);\n\n    var xLen, yLen;\n\n    if (xSize.length === 1) {\n      xLen = xSize[0];\n    } else if (xSize.length === 2 && xSize[1] === 1) {\n      xLen = xSize[0];\n    } else {\n      throw new RangeError('Expected a column vector, instead got a matrix of size (' + xSize.join(', ') + ')');\n    }\n\n    if (ySize.length === 1) {\n      yLen = ySize[0];\n    } else if (ySize.length === 2 && ySize[1] === 1) {\n      yLen = ySize[0];\n    } else {\n      throw new RangeError('Expected a column vector, instead got a matrix of size (' + ySize.join(', ') + ')');\n    }\n\n    if (xLen !== yLen) throw new RangeError('Vectors must have equal length (' + xLen + ' != ' + yLen + ')');\n    if (xLen === 0) throw new RangeError('Cannot calculate the dot product of empty vectors');\n    return xLen;\n  }\n\n  function _denseDot(a, b) {\n    var N = _validateDim(a, b);\n\n    var adata = isMatrix(a) ? a._data : a;\n    var adt = isMatrix(a) ? a._datatype : undefined;\n    var bdata = isMatrix(b) ? b._data : b;\n    var bdt = isMatrix(b) ? b._datatype : undefined; // are these 2-dimensional column vectors? (as opposed to 1-dimensional vectors)\n\n    var aIsColumn = _size(a).length === 2;\n    var bIsColumn = _size(b).length === 2;\n    var add = addScalar;\n    var mul = multiplyScalar; // process data types\n\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      var dt = adt; // find signatures that matches (dt, dt)\n\n      add = typed.find(addScalar, [dt, dt]);\n      mul = typed.find(multiplyScalar, [dt, dt]);\n    } // both vectors 1-dimensional\n\n\n    if (!aIsColumn && !bIsColumn) {\n      var c = mul(conj(adata[0]), bdata[0]);\n\n      for (var i = 1; i < N; i++) {\n        c = add(c, mul(conj(adata[i]), bdata[i]));\n      }\n\n      return c;\n    } // a is 1-dim, b is column\n\n\n    if (!aIsColumn && bIsColumn) {\n      var _c = mul(conj(adata[0]), bdata[0][0]);\n\n      for (var _i = 1; _i < N; _i++) {\n        _c = add(_c, mul(conj(adata[_i]), bdata[_i][0]));\n      }\n\n      return _c;\n    } // a is column, b is 1-dim\n\n\n    if (aIsColumn && !bIsColumn) {\n      var _c2 = mul(conj(adata[0][0]), bdata[0]);\n\n      for (var _i2 = 1; _i2 < N; _i2++) {\n        _c2 = add(_c2, mul(conj(adata[_i2][0]), bdata[_i2]));\n      }\n\n      return _c2;\n    } // both vectors are column\n\n\n    if (aIsColumn && bIsColumn) {\n      var _c3 = mul(conj(adata[0][0]), bdata[0][0]);\n\n      for (var _i3 = 1; _i3 < N; _i3++) {\n        _c3 = add(_c3, mul(conj(adata[_i3][0]), bdata[_i3][0]));\n      }\n\n      return _c3;\n    }\n  }\n\n  function _sparseDot(x, y) {\n    _validateDim(x, y);\n\n    var xindex = x._index;\n    var xvalues = x._values;\n    var yindex = y._index;\n    var yvalues = y._values; // TODO optimize add & mul using datatype\n\n    var c = 0;\n    var add = addScalar;\n    var mul = multiplyScalar;\n    var i = 0;\n    var j = 0;\n\n    while (i < xindex.length && j < yindex.length) {\n      var I = xindex[i];\n      var J = yindex[j];\n\n      if (I < J) {\n        i++;\n        continue;\n      }\n\n      if (I > J) {\n        j++;\n        continue;\n      }\n\n      if (I === J) {\n        c = add(c, mul(xvalues[i], yvalues[j]));\n        i++;\n        j++;\n      }\n    }\n\n    return c;\n  } // TODO remove this once #1771 is fixed\n\n\n  function _size(x) {\n    return isMatrix(x) ? x.size() : size(x);\n  }\n});"]},"metadata":{},"sourceType":"module"}