{"ast":null,"code":"import { factory } from '../../../utils/factory.js';\nimport { deepMap } from '../../../utils/collection.js';\nvar name = 'bignumber';\nvar dependencies = ['typed', 'BigNumber'];\nexport var createBignumber = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    BigNumber\n  } = _ref;\n  /**\n   * Create a BigNumber, which can store numbers with arbitrary precision.\n   * When a matrix is provided, all elements will be converted to BigNumber.\n   *\n   * Syntax:\n   *\n   *    math.bignumber(x)\n   *\n   * Examples:\n   *\n   *    0.1 + 0.2                                  // returns number 0.30000000000000004\n   *    math.bignumber(0.1) + math.bignumber(0.2)  // returns BigNumber 0.3\n   *\n   *\n   *    7.2e500                                    // returns number Infinity\n   *    math.bignumber('7.2e500')                  // returns BigNumber 7.2e500\n   *\n   * See also:\n   *\n   *    boolean, complex, index, matrix, string, unit\n   *\n   * @param {number | string | Fraction | BigNumber | Array | Matrix | boolean | null} [value]  Value for the big number,\n   *                                                    0 by default.\n   * @returns {BigNumber} The created bignumber\n   */\n\n  return typed('bignumber', {\n    '': function _() {\n      return new BigNumber(0);\n    },\n    number: function number(x) {\n      // convert to string to prevent errors in case of >15 digits\n      return new BigNumber(x + '');\n    },\n    string: function string(x) {\n      var match = x.match(/(0[box][0-9a-fA-F]*)i([0-9]*)/);\n\n      if (match) {\n        // x has a word size suffix\n        var size = match[2];\n        var n = BigNumber(match[1]);\n        var twoPowSize = new BigNumber(2).pow(Number(size));\n\n        if (n.gt(twoPowSize.sub(1))) {\n          throw new SyntaxError(\"String \\\"\".concat(x, \"\\\" is out of range\"));\n        }\n\n        var twoPowSizeSubOne = new BigNumber(2).pow(Number(size) - 1);\n\n        if (n.gte(twoPowSizeSubOne)) {\n          return n.sub(twoPowSize);\n        } else {\n          return n;\n        }\n      }\n\n      return new BigNumber(x);\n    },\n    BigNumber: function BigNumber(x) {\n      // we assume a BigNumber is immutable\n      return x;\n    },\n    Fraction: function Fraction(x) {\n      return new BigNumber(x.n).div(x.d).times(x.s);\n    },\n    null: function _null(x) {\n      return new BigNumber(0);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return deepMap(x, this);\n    }\n  });\n});","map":{"version":3,"sources":["/Users/elimunn/Desktop/plot-recipes/node_modules/mathjs/lib/esm/type/bignumber/function/bignumber.js"],"names":["factory","deepMap","name","dependencies","createBignumber","_ref","typed","BigNumber","_","number","x","string","match","size","n","twoPowSize","pow","Number","gt","sub","SyntaxError","concat","twoPowSizeSubOne","gte","Fraction","div","d","times","s","null","_null","ArrayMatrix"],"mappings":"AAAA,SAASA,OAAT,QAAwB,2BAAxB;AACA,SAASC,OAAT,QAAwB,8BAAxB;AACA,IAAIC,IAAI,GAAG,WAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,WAAV,CAAnB;AACA,OAAO,IAAIC,eAAe,GAAG,eAAeJ,OAAO,CAACE,IAAD,EAAOC,YAAP,EAAsBE,IAAD,IAAU;AAChF,MAAI;AACFC,IAAAA,KADE;AAEFC,IAAAA;AAFE,MAGAF,IAHJ;AAKA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAOC,KAAK,CAAC,WAAD,EAAc;AACxB,QAAI,SAASE,CAAT,GAAa;AACf,aAAO,IAAID,SAAJ,CAAc,CAAd,CAAP;AACD,KAHuB;AAIxBE,IAAAA,MAAM,EAAE,SAASA,MAAT,CAAgBC,CAAhB,EAAmB;AACzB;AACA,aAAO,IAAIH,SAAJ,CAAcG,CAAC,GAAG,EAAlB,CAAP;AACD,KAPuB;AAQxBC,IAAAA,MAAM,EAAE,SAASA,MAAT,CAAgBD,CAAhB,EAAmB;AACzB,UAAIE,KAAK,GAAGF,CAAC,CAACE,KAAF,CAAQ,+BAAR,CAAZ;;AAEA,UAAIA,KAAJ,EAAW;AACT;AACA,YAAIC,IAAI,GAAGD,KAAK,CAAC,CAAD,CAAhB;AACA,YAAIE,CAAC,GAAGP,SAAS,CAACK,KAAK,CAAC,CAAD,CAAN,CAAjB;AACA,YAAIG,UAAU,GAAG,IAAIR,SAAJ,CAAc,CAAd,EAAiBS,GAAjB,CAAqBC,MAAM,CAACJ,IAAD,CAA3B,CAAjB;;AAEA,YAAIC,CAAC,CAACI,EAAF,CAAKH,UAAU,CAACI,GAAX,CAAe,CAAf,CAAL,CAAJ,EAA6B;AAC3B,gBAAM,IAAIC,WAAJ,CAAgB,YAAYC,MAAZ,CAAmBX,CAAnB,EAAsB,oBAAtB,CAAhB,CAAN;AACD;;AAED,YAAIY,gBAAgB,GAAG,IAAIf,SAAJ,CAAc,CAAd,EAAiBS,GAAjB,CAAqBC,MAAM,CAACJ,IAAD,CAAN,GAAe,CAApC,CAAvB;;AAEA,YAAIC,CAAC,CAACS,GAAF,CAAMD,gBAAN,CAAJ,EAA6B;AAC3B,iBAAOR,CAAC,CAACK,GAAF,CAAMJ,UAAN,CAAP;AACD,SAFD,MAEO;AACL,iBAAOD,CAAP;AACD;AACF;;AAED,aAAO,IAAIP,SAAJ,CAAcG,CAAd,CAAP;AACD,KA/BuB;AAgCxBH,IAAAA,SAAS,EAAE,SAASA,SAAT,CAAmBG,CAAnB,EAAsB;AAC/B;AACA,aAAOA,CAAP;AACD,KAnCuB;AAoCxBc,IAAAA,QAAQ,EAAE,SAASA,QAAT,CAAkBd,CAAlB,EAAqB;AAC7B,aAAO,IAAIH,SAAJ,CAAcG,CAAC,CAACI,CAAhB,EAAmBW,GAAnB,CAAuBf,CAAC,CAACgB,CAAzB,EAA4BC,KAA5B,CAAkCjB,CAAC,CAACkB,CAApC,CAAP;AACD,KAtCuB;AAuCxBC,IAAAA,IAAI,EAAE,SAASC,KAAT,CAAepB,CAAf,EAAkB;AACtB,aAAO,IAAIH,SAAJ,CAAc,CAAd,CAAP;AACD,KAzCuB;AA0CxB,sBAAkB,SAASwB,WAAT,CAAqBrB,CAArB,EAAwB;AACxC,aAAOT,OAAO,CAACS,CAAD,EAAI,IAAJ,CAAd;AACD;AA5CuB,GAAd,CAAZ;AA8CD,CA7EkD,CAA5C","sourcesContent":["import { factory } from '../../../utils/factory.js';\nimport { deepMap } from '../../../utils/collection.js';\nvar name = 'bignumber';\nvar dependencies = ['typed', 'BigNumber'];\nexport var createBignumber = /* #__PURE__ */factory(name, dependencies, (_ref) => {\n  var {\n    typed,\n    BigNumber\n  } = _ref;\n\n  /**\n   * Create a BigNumber, which can store numbers with arbitrary precision.\n   * When a matrix is provided, all elements will be converted to BigNumber.\n   *\n   * Syntax:\n   *\n   *    math.bignumber(x)\n   *\n   * Examples:\n   *\n   *    0.1 + 0.2                                  // returns number 0.30000000000000004\n   *    math.bignumber(0.1) + math.bignumber(0.2)  // returns BigNumber 0.3\n   *\n   *\n   *    7.2e500                                    // returns number Infinity\n   *    math.bignumber('7.2e500')                  // returns BigNumber 7.2e500\n   *\n   * See also:\n   *\n   *    boolean, complex, index, matrix, string, unit\n   *\n   * @param {number | string | Fraction | BigNumber | Array | Matrix | boolean | null} [value]  Value for the big number,\n   *                                                    0 by default.\n   * @returns {BigNumber} The created bignumber\n   */\n  return typed('bignumber', {\n    '': function _() {\n      return new BigNumber(0);\n    },\n    number: function number(x) {\n      // convert to string to prevent errors in case of >15 digits\n      return new BigNumber(x + '');\n    },\n    string: function string(x) {\n      var match = x.match(/(0[box][0-9a-fA-F]*)i([0-9]*)/);\n\n      if (match) {\n        // x has a word size suffix\n        var size = match[2];\n        var n = BigNumber(match[1]);\n        var twoPowSize = new BigNumber(2).pow(Number(size));\n\n        if (n.gt(twoPowSize.sub(1))) {\n          throw new SyntaxError(\"String \\\"\".concat(x, \"\\\" is out of range\"));\n        }\n\n        var twoPowSizeSubOne = new BigNumber(2).pow(Number(size) - 1);\n\n        if (n.gte(twoPowSizeSubOne)) {\n          return n.sub(twoPowSize);\n        } else {\n          return n;\n        }\n      }\n\n      return new BigNumber(x);\n    },\n    BigNumber: function BigNumber(x) {\n      // we assume a BigNumber is immutable\n      return x;\n    },\n    Fraction: function Fraction(x) {\n      return new BigNumber(x.n).div(x.d).times(x.s);\n    },\n    null: function _null(x) {\n      return new BigNumber(0);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return deepMap(x, this);\n    }\n  });\n});"]},"metadata":{},"sourceType":"module"}