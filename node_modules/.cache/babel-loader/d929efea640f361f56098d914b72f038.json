{"ast":null,"code":"import { isBigNumber } from './is.js';\n/**\n * Clone an object\n *\n *     clone(x)\n *\n * Can clone any primitive type, array, and object.\n * If x has a function clone, this function will be invoked to clone the object.\n *\n * @param {*} x\n * @return {*} clone\n */\n\nexport function clone(x) {\n  var type = typeof x; // immutable primitive types\n\n  if (type === 'number' || type === 'string' || type === 'boolean' || x === null || x === undefined) {\n    return x;\n  } // use clone function of the object when available\n\n\n  if (typeof x.clone === 'function') {\n    return x.clone();\n  } // array\n\n\n  if (Array.isArray(x)) {\n    return x.map(function (value) {\n      return clone(value);\n    });\n  }\n\n  if (x instanceof Date) return new Date(x.valueOf());\n  if (isBigNumber(x)) return x; // bignumbers are immutable\n\n  if (x instanceof RegExp) throw new TypeError('Cannot clone ' + x); // TODO: clone a RegExp\n  // object\n\n  return mapObject(x, clone);\n}\n/**\n * Apply map to all properties of an object\n * @param {Object} object\n * @param {function} callback\n * @return {Object} Returns a copy of the object with mapped properties\n */\n\nexport function mapObject(object, callback) {\n  var clone = {};\n\n  for (var key in object) {\n    if (hasOwnProperty(object, key)) {\n      clone[key] = callback(object[key]);\n    }\n  }\n\n  return clone;\n}\n/**\n * Extend object a with the properties of object b\n * @param {Object} a\n * @param {Object} b\n * @return {Object} a\n */\n\nexport function extend(a, b) {\n  for (var prop in b) {\n    if (hasOwnProperty(b, prop)) {\n      a[prop] = b[prop];\n    }\n  }\n\n  return a;\n}\n/**\n * Deep extend an object a with the properties of object b\n * @param {Object} a\n * @param {Object} b\n * @returns {Object}\n */\n\nexport function deepExtend(a, b) {\n  // TODO: add support for Arrays to deepExtend\n  if (Array.isArray(b)) {\n    throw new TypeError('Arrays are not supported by deepExtend');\n  }\n\n  for (var prop in b) {\n    // We check against prop not being in Object.prototype or Function.prototype\n    // to prevent polluting for example Object.__proto__.\n    if (hasOwnProperty(b, prop) && !(prop in Object.prototype) && !(prop in Function.prototype)) {\n      if (b[prop] && b[prop].constructor === Object) {\n        if (a[prop] === undefined) {\n          a[prop] = {};\n        }\n\n        if (a[prop] && a[prop].constructor === Object) {\n          deepExtend(a[prop], b[prop]);\n        } else {\n          a[prop] = b[prop];\n        }\n      } else if (Array.isArray(b[prop])) {\n        throw new TypeError('Arrays are not supported by deepExtend');\n      } else {\n        a[prop] = b[prop];\n      }\n    }\n  }\n\n  return a;\n}\n/**\n * Deep test equality of all fields in two pairs of arrays or objects.\n * Compares values and functions strictly (ie. 2 is not the same as '2').\n * @param {Array | Object} a\n * @param {Array | Object} b\n * @returns {boolean}\n */\n\nexport function deepStrictEqual(a, b) {\n  var prop, i, len;\n\n  if (Array.isArray(a)) {\n    if (!Array.isArray(b)) {\n      return false;\n    }\n\n    if (a.length !== b.length) {\n      return false;\n    }\n\n    for (i = 0, len = a.length; i < len; i++) {\n      if (!deepStrictEqual(a[i], b[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  } else if (typeof a === 'function') {\n    return a === b;\n  } else if (a instanceof Object) {\n    if (Array.isArray(b) || !(b instanceof Object)) {\n      return false;\n    }\n\n    for (prop in a) {\n      // noinspection JSUnfilteredForInLoop\n      if (!(prop in b) || !deepStrictEqual(a[prop], b[prop])) {\n        return false;\n      }\n    }\n\n    for (prop in b) {\n      // noinspection JSUnfilteredForInLoop\n      if (!(prop in a) || !deepStrictEqual(a[prop], b[prop])) {\n        return false;\n      }\n    }\n\n    return true;\n  } else {\n    return a === b;\n  }\n}\n/**\n * Recursively flatten a nested object.\n * @param {Object} nestedObject\n * @return {Object} Returns the flattened object\n */\n\nexport function deepFlatten(nestedObject) {\n  var flattenedObject = {};\n\n  _deepFlatten(nestedObject, flattenedObject);\n\n  return flattenedObject;\n} // helper function used by deepFlatten\n\nfunction _deepFlatten(nestedObject, flattenedObject) {\n  for (var prop in nestedObject) {\n    if (hasOwnProperty(nestedObject, prop)) {\n      var value = nestedObject[prop];\n\n      if (typeof value === 'object' && value !== null) {\n        _deepFlatten(value, flattenedObject);\n      } else {\n        flattenedObject[prop] = value;\n      }\n    }\n  }\n}\n/**\n * Test whether the current JavaScript engine supports Object.defineProperty\n * @returns {boolean} returns true if supported\n */\n\n\nexport function canDefineProperty() {\n  // test needed for broken IE8 implementation\n  try {\n    if (Object.defineProperty) {\n      Object.defineProperty({}, 'x', {\n        get: function get() {}\n      });\n      return true;\n    }\n  } catch (e) {}\n\n  return false;\n}\n/**\n * Attach a lazy loading property to a constant.\n * The given function `fn` is called once when the property is first requested.\n *\n * @param {Object} object         Object where to add the property\n * @param {string} prop           Property name\n * @param {Function} valueResolver Function returning the property value. Called\n *                                without arguments.\n */\n\nexport function lazy(object, prop, valueResolver) {\n  var _uninitialized = true;\n\n  var _value;\n\n  Object.defineProperty(object, prop, {\n    get: function get() {\n      if (_uninitialized) {\n        _value = valueResolver();\n        _uninitialized = false;\n      }\n\n      return _value;\n    },\n    set: function set(value) {\n      _value = value;\n      _uninitialized = false;\n    },\n    configurable: true,\n    enumerable: true\n  });\n}\n/**\n * Traverse a path into an object.\n * When a namespace is missing, it will be created\n * @param {Object} object\n * @param {string | string[]} path   A dot separated string like 'name.space'\n * @return {Object} Returns the object at the end of the path\n */\n\nexport function traverse(object, path) {\n  if (path && typeof path === 'string') {\n    return traverse(object, path.split('.'));\n  }\n\n  var obj = object;\n\n  if (path) {\n    for (var i = 0; i < path.length; i++) {\n      var key = path[i];\n\n      if (!(key in obj)) {\n        obj[key] = {};\n      }\n\n      obj = obj[key];\n    }\n  }\n\n  return obj;\n}\n/**\n * A safe hasOwnProperty\n * @param {Object} object\n * @param {string} property\n */\n\nexport function hasOwnProperty(object, property) {\n  return object && Object.hasOwnProperty.call(object, property);\n}\n/**\n * Test whether an object is a factory. a factory has fields:\n *\n * - factory: function (type: Object, config: Object, load: function, typed: function [, math: Object])   (required)\n * - name: string (optional)\n * - path: string    A dot separated path (optional)\n * - math: boolean   If true (false by default), the math namespace is passed\n *                   as fifth argument of the factory function\n *\n * @param {*} object\n * @returns {boolean}\n */\n\nexport function isLegacyFactory(object) {\n  return object && typeof object.factory === 'function';\n}\n/**\n * Get a nested property from an object\n * @param {Object} object\n * @param {string | string[]} path\n * @returns {Object}\n */\n\nexport function get(object, path) {\n  if (typeof path === 'string') {\n    if (isPath(path)) {\n      return get(object, path.split('.'));\n    } else {\n      return object[path];\n    }\n  }\n\n  var child = object;\n\n  for (var i = 0; i < path.length; i++) {\n    var key = path[i];\n    child = child ? child[key] : undefined;\n  }\n\n  return child;\n}\n/**\n * Set a nested property in an object\n * Mutates the object itself\n * If the path doesn't exist, it will be created\n * @param {Object} object\n * @param {string | string[]} path\n * @param {*} value\n * @returns {Object}\n */\n\nexport function set(object, path, value) {\n  if (typeof path === 'string') {\n    if (isPath(path)) {\n      return set(object, path.split('.'), value);\n    } else {\n      object[path] = value;\n      return object;\n    }\n  }\n\n  var child = object;\n\n  for (var i = 0; i < path.length - 1; i++) {\n    var key = path[i];\n\n    if (child[key] === undefined) {\n      child[key] = {};\n    }\n\n    child = child[key];\n  }\n\n  if (path.length > 0) {\n    var lastKey = path[path.length - 1];\n    child[lastKey] = value;\n  }\n\n  return object;\n}\n/**\n * Create an object composed of the picked object properties\n * @param {Object} object\n * @param {string[]} properties\n * @param {function} [transform] Optional value to transform a value when picking it\n * @return {Object}\n */\n\nexport function pick(object, properties, transform) {\n  var copy = {};\n\n  for (var i = 0; i < properties.length; i++) {\n    var key = properties[i];\n    var value = get(object, key);\n\n    if (value !== undefined) {\n      set(copy, key, transform ? transform(value, key) : value);\n    }\n  }\n\n  return copy;\n}\n/**\n * Shallow version of pick, creating an object composed of the picked object properties\n * but not for nested properties\n * @param {Object} object\n * @param {string[]} properties\n * @return {Object}\n */\n\nexport function pickShallow(object, properties) {\n  var copy = {};\n\n  for (var i = 0; i < properties.length; i++) {\n    var key = properties[i];\n    var value = object[key];\n\n    if (value !== undefined) {\n      copy[key] = value;\n    }\n  }\n\n  return copy;\n}\nexport function values(object) {\n  return Object.keys(object).map(key => object[key]);\n} // helper function to test whether a string contains a path like 'user.name'\n\nfunction isPath(str) {\n  return str.indexOf('.') !== -1;\n}","map":{"version":3,"sources":["/Users/elimunn/Desktop/plot-recipes/node_modules/mathjs/lib/esm/utils/object.js"],"names":["isBigNumber","clone","x","type","undefined","Array","isArray","map","value","Date","valueOf","RegExp","TypeError","mapObject","object","callback","key","hasOwnProperty","extend","a","b","prop","deepExtend","Object","prototype","Function","constructor","deepStrictEqual","i","len","length","deepFlatten","nestedObject","flattenedObject","_deepFlatten","canDefineProperty","defineProperty","get","e","lazy","valueResolver","_uninitialized","_value","set","configurable","enumerable","traverse","path","split","obj","property","call","isLegacyFactory","factory","isPath","child","lastKey","pick","properties","transform","copy","pickShallow","values","keys","str","indexOf"],"mappings":"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","sourcesContent":["import { isBigNumber } from './is.js';\n/**\n * Clone an object\n *\n *     clone(x)\n *\n * Can clone any primitive type, array, and object.\n * If x has a function clone, this function will be invoked to clone the object.\n *\n * @param {*} x\n * @return {*} clone\n */\n\nexport function clone(x) {\n  var type = typeof x; // immutable primitive types\n\n  if (type === 'number' || type === 'string' || type === 'boolean' || x === null || x === undefined) {\n    return x;\n  } // use clone function of the object when available\n\n\n  if (typeof x.clone === 'function') {\n    return x.clone();\n  } // array\n\n\n  if (Array.isArray(x)) {\n    return x.map(function (value) {\n      return clone(value);\n    });\n  }\n\n  if (x instanceof Date) return new Date(x.valueOf());\n  if (isBigNumber(x)) return x; // bignumbers are immutable\n\n  if (x instanceof RegExp) throw new TypeError('Cannot clone ' + x); // TODO: clone a RegExp\n  // object\n\n  return mapObject(x, clone);\n}\n/**\n * Apply map to all properties of an object\n * @param {Object} object\n * @param {function} callback\n * @return {Object} Returns a copy of the object with mapped properties\n */\n\nexport function mapObject(object, callback) {\n  var clone = {};\n\n  for (var key in object) {\n    if (hasOwnProperty(object, key)) {\n      clone[key] = callback(object[key]);\n    }\n  }\n\n  return clone;\n}\n/**\n * Extend object a with the properties of object b\n * @param {Object} a\n * @param {Object} b\n * @return {Object} a\n */\n\nexport function extend(a, b) {\n  for (var prop in b) {\n    if (hasOwnProperty(b, prop)) {\n      a[prop] = b[prop];\n    }\n  }\n\n  return a;\n}\n/**\n * Deep extend an object a with the properties of object b\n * @param {Object} a\n * @param {Object} b\n * @returns {Object}\n */\n\nexport function deepExtend(a, b) {\n  // TODO: add support for Arrays to deepExtend\n  if (Array.isArray(b)) {\n    throw new TypeError('Arrays are not supported by deepExtend');\n  }\n\n  for (var prop in b) {\n    // We check against prop not being in Object.prototype or Function.prototype\n    // to prevent polluting for example Object.__proto__.\n    if (hasOwnProperty(b, prop) && !(prop in Object.prototype) && !(prop in Function.prototype)) {\n      if (b[prop] && b[prop].constructor === Object) {\n        if (a[prop] === undefined) {\n          a[prop] = {};\n        }\n\n        if (a[prop] && a[prop].constructor === Object) {\n          deepExtend(a[prop], b[prop]);\n        } else {\n          a[prop] = b[prop];\n        }\n      } else if (Array.isArray(b[prop])) {\n        throw new TypeError('Arrays are not supported by deepExtend');\n      } else {\n        a[prop] = b[prop];\n      }\n    }\n  }\n\n  return a;\n}\n/**\n * Deep test equality of all fields in two pairs of arrays or objects.\n * Compares values and functions strictly (ie. 2 is not the same as '2').\n * @param {Array | Object} a\n * @param {Array | Object} b\n * @returns {boolean}\n */\n\nexport function deepStrictEqual(a, b) {\n  var prop, i, len;\n\n  if (Array.isArray(a)) {\n    if (!Array.isArray(b)) {\n      return false;\n    }\n\n    if (a.length !== b.length) {\n      return false;\n    }\n\n    for (i = 0, len = a.length; i < len; i++) {\n      if (!deepStrictEqual(a[i], b[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  } else if (typeof a === 'function') {\n    return a === b;\n  } else if (a instanceof Object) {\n    if (Array.isArray(b) || !(b instanceof Object)) {\n      return false;\n    }\n\n    for (prop in a) {\n      // noinspection JSUnfilteredForInLoop\n      if (!(prop in b) || !deepStrictEqual(a[prop], b[prop])) {\n        return false;\n      }\n    }\n\n    for (prop in b) {\n      // noinspection JSUnfilteredForInLoop\n      if (!(prop in a) || !deepStrictEqual(a[prop], b[prop])) {\n        return false;\n      }\n    }\n\n    return true;\n  } else {\n    return a === b;\n  }\n}\n/**\n * Recursively flatten a nested object.\n * @param {Object} nestedObject\n * @return {Object} Returns the flattened object\n */\n\nexport function deepFlatten(nestedObject) {\n  var flattenedObject = {};\n\n  _deepFlatten(nestedObject, flattenedObject);\n\n  return flattenedObject;\n} // helper function used by deepFlatten\n\nfunction _deepFlatten(nestedObject, flattenedObject) {\n  for (var prop in nestedObject) {\n    if (hasOwnProperty(nestedObject, prop)) {\n      var value = nestedObject[prop];\n\n      if (typeof value === 'object' && value !== null) {\n        _deepFlatten(value, flattenedObject);\n      } else {\n        flattenedObject[prop] = value;\n      }\n    }\n  }\n}\n/**\n * Test whether the current JavaScript engine supports Object.defineProperty\n * @returns {boolean} returns true if supported\n */\n\n\nexport function canDefineProperty() {\n  // test needed for broken IE8 implementation\n  try {\n    if (Object.defineProperty) {\n      Object.defineProperty({}, 'x', {\n        get: function get() {}\n      });\n      return true;\n    }\n  } catch (e) {}\n\n  return false;\n}\n/**\n * Attach a lazy loading property to a constant.\n * The given function `fn` is called once when the property is first requested.\n *\n * @param {Object} object         Object where to add the property\n * @param {string} prop           Property name\n * @param {Function} valueResolver Function returning the property value. Called\n *                                without arguments.\n */\n\nexport function lazy(object, prop, valueResolver) {\n  var _uninitialized = true;\n\n  var _value;\n\n  Object.defineProperty(object, prop, {\n    get: function get() {\n      if (_uninitialized) {\n        _value = valueResolver();\n        _uninitialized = false;\n      }\n\n      return _value;\n    },\n    set: function set(value) {\n      _value = value;\n      _uninitialized = false;\n    },\n    configurable: true,\n    enumerable: true\n  });\n}\n/**\n * Traverse a path into an object.\n * When a namespace is missing, it will be created\n * @param {Object} object\n * @param {string | string[]} path   A dot separated string like 'name.space'\n * @return {Object} Returns the object at the end of the path\n */\n\nexport function traverse(object, path) {\n  if (path && typeof path === 'string') {\n    return traverse(object, path.split('.'));\n  }\n\n  var obj = object;\n\n  if (path) {\n    for (var i = 0; i < path.length; i++) {\n      var key = path[i];\n\n      if (!(key in obj)) {\n        obj[key] = {};\n      }\n\n      obj = obj[key];\n    }\n  }\n\n  return obj;\n}\n/**\n * A safe hasOwnProperty\n * @param {Object} object\n * @param {string} property\n */\n\nexport function hasOwnProperty(object, property) {\n  return object && Object.hasOwnProperty.call(object, property);\n}\n/**\n * Test whether an object is a factory. a factory has fields:\n *\n * - factory: function (type: Object, config: Object, load: function, typed: function [, math: Object])   (required)\n * - name: string (optional)\n * - path: string    A dot separated path (optional)\n * - math: boolean   If true (false by default), the math namespace is passed\n *                   as fifth argument of the factory function\n *\n * @param {*} object\n * @returns {boolean}\n */\n\nexport function isLegacyFactory(object) {\n  return object && typeof object.factory === 'function';\n}\n/**\n * Get a nested property from an object\n * @param {Object} object\n * @param {string | string[]} path\n * @returns {Object}\n */\n\nexport function get(object, path) {\n  if (typeof path === 'string') {\n    if (isPath(path)) {\n      return get(object, path.split('.'));\n    } else {\n      return object[path];\n    }\n  }\n\n  var child = object;\n\n  for (var i = 0; i < path.length; i++) {\n    var key = path[i];\n    child = child ? child[key] : undefined;\n  }\n\n  return child;\n}\n/**\n * Set a nested property in an object\n * Mutates the object itself\n * If the path doesn't exist, it will be created\n * @param {Object} object\n * @param {string | string[]} path\n * @param {*} value\n * @returns {Object}\n */\n\nexport function set(object, path, value) {\n  if (typeof path === 'string') {\n    if (isPath(path)) {\n      return set(object, path.split('.'), value);\n    } else {\n      object[path] = value;\n      return object;\n    }\n  }\n\n  var child = object;\n\n  for (var i = 0; i < path.length - 1; i++) {\n    var key = path[i];\n\n    if (child[key] === undefined) {\n      child[key] = {};\n    }\n\n    child = child[key];\n  }\n\n  if (path.length > 0) {\n    var lastKey = path[path.length - 1];\n    child[lastKey] = value;\n  }\n\n  return object;\n}\n/**\n * Create an object composed of the picked object properties\n * @param {Object} object\n * @param {string[]} properties\n * @param {function} [transform] Optional value to transform a value when picking it\n * @return {Object}\n */\n\nexport function pick(object, properties, transform) {\n  var copy = {};\n\n  for (var i = 0; i < properties.length; i++) {\n    var key = properties[i];\n    var value = get(object, key);\n\n    if (value !== undefined) {\n      set(copy, key, transform ? transform(value, key) : value);\n    }\n  }\n\n  return copy;\n}\n/**\n * Shallow version of pick, creating an object composed of the picked object properties\n * but not for nested properties\n * @param {Object} object\n * @param {string[]} properties\n * @return {Object}\n */\n\nexport function pickShallow(object, properties) {\n  var copy = {};\n\n  for (var i = 0; i < properties.length; i++) {\n    var key = properties[i];\n    var value = object[key];\n\n    if (value !== undefined) {\n      copy[key] = value;\n    }\n  }\n\n  return copy;\n}\nexport function values(object) {\n  return Object.keys(object).map(key => object[key]);\n} // helper function to test whether a string contains a path like 'user.name'\n\nfunction isPath(str) {\n  return str.indexOf('.') !== -1;\n}"]},"metadata":{},"sourceType":"module"}