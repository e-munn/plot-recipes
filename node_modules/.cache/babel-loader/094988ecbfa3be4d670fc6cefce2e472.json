{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { createAlgorithm02 } from '../../type/matrix/utils/algorithm02.js';\nimport { createAlgorithm06 } from '../../type/matrix/utils/algorithm06.js';\nimport { createAlgorithm11 } from '../../type/matrix/utils/algorithm11.js';\nimport { createAlgorithm13 } from '../../type/matrix/utils/algorithm13.js';\nimport { createAlgorithm14 } from '../../type/matrix/utils/algorithm14.js';\nimport { lcmNumber } from '../../plain/number/index.js';\nvar name = 'lcm';\nvar dependencies = ['typed', 'matrix', 'equalScalar'];\nexport var createLcm = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar\n  } = _ref;\n  var algorithm02 = createAlgorithm02({\n    typed,\n    equalScalar\n  });\n  var algorithm06 = createAlgorithm06({\n    typed,\n    equalScalar\n  });\n  var algorithm11 = createAlgorithm11({\n    typed,\n    equalScalar\n  });\n  var algorithm13 = createAlgorithm13({\n    typed\n  });\n  var algorithm14 = createAlgorithm14({\n    typed\n  });\n  /**\n   * Calculate the least common multiple for two or more values or arrays.\n   *\n   * lcm is defined as:\n   *\n   *     lcm(a, b) = abs(a * b) / gcd(a, b)\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.lcm(a, b)\n   *    math.lcm(a, b, c, ...)\n   *\n   * Examples:\n   *\n   *    math.lcm(4, 6)               // returns 12\n   *    math.lcm(6, 21)              // returns 42\n   *    math.lcm(6, 21, 5)           // returns 210\n   *\n   *    math.lcm([4, 6], [6, 21])    // returns [12, 42]\n   *\n   * See also:\n   *\n   *    gcd, xgcd\n   *\n   * @param {... number | BigNumber | Array | Matrix} args  Two or more integer numbers\n   * @return {number | BigNumber | Array | Matrix}                           The least common multiple\n   */\n\n  return typed(name, {\n    'number, number': lcmNumber,\n    'BigNumber, BigNumber': _lcmBigNumber,\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.lcm(y);\n    },\n    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {\n      return algorithm06(x, y, this);\n    },\n    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {\n      return algorithm02(y, x, this, true);\n    },\n    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {\n      return algorithm02(x, y, this, false);\n    },\n    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\n      return algorithm13(x, y, this);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return this(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return this(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return this(x, matrix(y));\n    },\n    'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {\n      return algorithm11(x, y, this, false);\n    },\n    'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {\n      return algorithm14(x, y, this, false);\n    },\n    'number | BigNumber, SparseMatrix': function numberBigNumberSparseMatrix(x, y) {\n      return algorithm11(y, x, this, true);\n    },\n    'number | BigNumber, DenseMatrix': function numberBigNumberDenseMatrix(x, y) {\n      return algorithm14(y, x, this, true);\n    },\n    'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, this, false).valueOf();\n    },\n    'number | BigNumber, Array': function numberBigNumberArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, this, true).valueOf();\n    },\n    // TODO: need a smarter notation here\n    'Array | Matrix | number | BigNumber, Array | Matrix | number | BigNumber, ...Array | Matrix | number | BigNumber': function ArrayMatrixNumberBigNumberArrayMatrixNumberBigNumberArrayMatrixNumberBigNumber(a, b, args) {\n      var res = this(a, b);\n\n      for (var i = 0; i < args.length; i++) {\n        res = this(res, args[i]);\n      }\n\n      return res;\n    }\n  });\n  /**\n   * Calculate lcm for two BigNumbers\n   * @param {BigNumber} a\n   * @param {BigNumber} b\n   * @returns {BigNumber} Returns the least common multiple of a and b\n   * @private\n   */\n\n  function _lcmBigNumber(a, b) {\n    if (!a.isInt() || !b.isInt()) {\n      throw new Error('Parameters in function lcm must be integer numbers');\n    }\n\n    if (a.isZero()) {\n      return a;\n    }\n\n    if (b.isZero()) {\n      return b;\n    } // https://en.wikipedia.org/wiki/Euclidean_algorithm\n    // evaluate lcm here inline to reduce overhead\n\n\n    var prod = a.times(b);\n\n    while (!b.isZero()) {\n      var t = b;\n      b = a.mod(t);\n      a = t;\n    }\n\n    return prod.div(a).abs();\n  }\n});","map":{"version":3,"sources":["/Users/elimunn/Desktop/plot-recipes/node_modules/mathjs/lib/esm/function/arithmetic/lcm.js"],"names":["factory","createAlgorithm02","createAlgorithm06","createAlgorithm11","createAlgorithm13","createAlgorithm14","lcmNumber","name","dependencies","createLcm","_ref","typed","matrix","equalScalar","algorithm02","algorithm06","algorithm11","algorithm13","algorithm14","_lcmBigNumber","FractionFraction","x","y","lcm","SparseMatrixSparseMatrix","SparseMatrixDenseMatrix","DenseMatrixSparseMatrix","DenseMatrixDenseMatrix","ArrayArray","valueOf","ArrayMatrix","MatrixArray","SparseMatrixNumberBigNumber","DenseMatrixNumberBigNumber","numberBigNumberSparseMatrix","numberBigNumberDenseMatrix","ArrayNumberBigNumber","numberBigNumberArray","ArrayMatrixNumberBigNumberArrayMatrixNumberBigNumberArrayMatrixNumberBigNumber","a","b","args","res","i","length","isInt","Error","isZero","prod","times","t","mod","div","abs"],"mappings":"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","sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { createAlgorithm02 } from '../../type/matrix/utils/algorithm02.js';\nimport { createAlgorithm06 } from '../../type/matrix/utils/algorithm06.js';\nimport { createAlgorithm11 } from '../../type/matrix/utils/algorithm11.js';\nimport { createAlgorithm13 } from '../../type/matrix/utils/algorithm13.js';\nimport { createAlgorithm14 } from '../../type/matrix/utils/algorithm14.js';\nimport { lcmNumber } from '../../plain/number/index.js';\nvar name = 'lcm';\nvar dependencies = ['typed', 'matrix', 'equalScalar'];\nexport var createLcm = /* #__PURE__ */factory(name, dependencies, (_ref) => {\n  var {\n    typed,\n    matrix,\n    equalScalar\n  } = _ref;\n  var algorithm02 = createAlgorithm02({\n    typed,\n    equalScalar\n  });\n  var algorithm06 = createAlgorithm06({\n    typed,\n    equalScalar\n  });\n  var algorithm11 = createAlgorithm11({\n    typed,\n    equalScalar\n  });\n  var algorithm13 = createAlgorithm13({\n    typed\n  });\n  var algorithm14 = createAlgorithm14({\n    typed\n  });\n  /**\n   * Calculate the least common multiple for two or more values or arrays.\n   *\n   * lcm is defined as:\n   *\n   *     lcm(a, b) = abs(a * b) / gcd(a, b)\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.lcm(a, b)\n   *    math.lcm(a, b, c, ...)\n   *\n   * Examples:\n   *\n   *    math.lcm(4, 6)               // returns 12\n   *    math.lcm(6, 21)              // returns 42\n   *    math.lcm(6, 21, 5)           // returns 210\n   *\n   *    math.lcm([4, 6], [6, 21])    // returns [12, 42]\n   *\n   * See also:\n   *\n   *    gcd, xgcd\n   *\n   * @param {... number | BigNumber | Array | Matrix} args  Two or more integer numbers\n   * @return {number | BigNumber | Array | Matrix}                           The least common multiple\n   */\n\n  return typed(name, {\n    'number, number': lcmNumber,\n    'BigNumber, BigNumber': _lcmBigNumber,\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.lcm(y);\n    },\n    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {\n      return algorithm06(x, y, this);\n    },\n    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {\n      return algorithm02(y, x, this, true);\n    },\n    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {\n      return algorithm02(x, y, this, false);\n    },\n    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\n      return algorithm13(x, y, this);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return this(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return this(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return this(x, matrix(y));\n    },\n    'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {\n      return algorithm11(x, y, this, false);\n    },\n    'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {\n      return algorithm14(x, y, this, false);\n    },\n    'number | BigNumber, SparseMatrix': function numberBigNumberSparseMatrix(x, y) {\n      return algorithm11(y, x, this, true);\n    },\n    'number | BigNumber, DenseMatrix': function numberBigNumberDenseMatrix(x, y) {\n      return algorithm14(y, x, this, true);\n    },\n    'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, this, false).valueOf();\n    },\n    'number | BigNumber, Array': function numberBigNumberArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, this, true).valueOf();\n    },\n    // TODO: need a smarter notation here\n    'Array | Matrix | number | BigNumber, Array | Matrix | number | BigNumber, ...Array | Matrix | number | BigNumber': function ArrayMatrixNumberBigNumberArrayMatrixNumberBigNumberArrayMatrixNumberBigNumber(a, b, args) {\n      var res = this(a, b);\n\n      for (var i = 0; i < args.length; i++) {\n        res = this(res, args[i]);\n      }\n\n      return res;\n    }\n  });\n  /**\n   * Calculate lcm for two BigNumbers\n   * @param {BigNumber} a\n   * @param {BigNumber} b\n   * @returns {BigNumber} Returns the least common multiple of a and b\n   * @private\n   */\n\n  function _lcmBigNumber(a, b) {\n    if (!a.isInt() || !b.isInt()) {\n      throw new Error('Parameters in function lcm must be integer numbers');\n    }\n\n    if (a.isZero()) {\n      return a;\n    }\n\n    if (b.isZero()) {\n      return b;\n    } // https://en.wikipedia.org/wiki/Euclidean_algorithm\n    // evaluate lcm here inline to reduce overhead\n\n\n    var prod = a.times(b);\n\n    while (!b.isZero()) {\n      var t = b;\n      b = a.mod(t);\n      a = t;\n    }\n\n    return prod.div(a).abs();\n  }\n});"]},"metadata":{},"sourceType":"module"}