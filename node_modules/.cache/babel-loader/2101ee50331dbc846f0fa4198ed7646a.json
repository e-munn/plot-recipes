{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { createAlgorithm01 } from '../../type/matrix/utils/algorithm01.js';\nimport { createAlgorithm02 } from '../../type/matrix/utils/algorithm02.js';\nimport { createAlgorithm06 } from '../../type/matrix/utils/algorithm06.js';\nimport { createAlgorithm11 } from '../../type/matrix/utils/algorithm11.js';\nimport { createAlgorithm13 } from '../../type/matrix/utils/algorithm13.js';\nimport { createAlgorithm14 } from '../../type/matrix/utils/algorithm14.js';\nimport { nthRootNumber } from '../../plain/number/index.js';\nvar name = 'nthRoot';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'BigNumber'];\nexport var createNthRoot = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar,\n    BigNumber: _BigNumber\n  } = _ref;\n  var algorithm01 = createAlgorithm01({\n    typed\n  });\n  var algorithm02 = createAlgorithm02({\n    typed,\n    equalScalar\n  });\n  var algorithm06 = createAlgorithm06({\n    typed,\n    equalScalar\n  });\n  var algorithm11 = createAlgorithm11({\n    typed,\n    equalScalar\n  });\n  var algorithm13 = createAlgorithm13({\n    typed\n  });\n  var algorithm14 = createAlgorithm14({\n    typed\n  });\n  /**\n   * Calculate the nth root of a value.\n   * The principal nth root of a positive real number A, is the positive real\n   * solution of the equation\n   *\n   *     x^root = A\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *     math.nthRoot(a)\n   *     math.nthRoot(a, root)\n   *\n   * Examples:\n   *\n   *     math.nthRoot(9, 2)    // returns 3, as 3^2 == 9\n   *     math.sqrt(9)          // returns 3, as 3^2 == 9\n   *     math.nthRoot(64, 3)   // returns 4, as 4^3 == 64\n   *\n   * See also:\n   *\n   *     sqrt, pow\n   *\n   * @param {number | BigNumber | Array | Matrix | Complex} a\n   *              Value for which to calculate the nth root\n   * @param {number | BigNumber} [root=2]    The root.\n   * @return {number | Complex | Array | Matrix} Returns the nth root of `a`\n   */\n\n  var complexErr = '' + 'Complex number not supported in function nthRoot. ' + 'Use nthRoots instead.';\n  return typed(name, {\n    number: function number(x) {\n      return nthRootNumber(x, 2);\n    },\n    'number, number': nthRootNumber,\n    BigNumber: function BigNumber(x) {\n      return _bigNthRoot(x, new _BigNumber(2));\n    },\n    Complex: function Complex(x) {\n      throw new Error(complexErr);\n    },\n    'Complex, number': function ComplexNumber(x, y) {\n      throw new Error(complexErr);\n    },\n    'BigNumber, BigNumber': _bigNthRoot,\n    'Array | Matrix': function ArrayMatrix(x) {\n      return this(x, 2);\n    },\n    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {\n      // density must be one (no zeros in matrix)\n      if (y.density() === 1) {\n        // sparse + sparse\n        return algorithm06(x, y, this);\n      } else {\n        // throw exception\n        throw new Error('Root must be non-zero');\n      }\n    },\n    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {\n      return algorithm02(y, x, this, true);\n    },\n    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {\n      // density must be one (no zeros in matrix)\n      if (y.density() === 1) {\n        // dense + sparse\n        return algorithm01(x, y, this, false);\n      } else {\n        // throw exception\n        throw new Error('Root must be non-zero');\n      }\n    },\n    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\n      return algorithm13(x, y, this);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return this(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return this(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return this(x, matrix(y));\n    },\n    'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {\n      return algorithm11(x, y, this, false);\n    },\n    'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {\n      return algorithm14(x, y, this, false);\n    },\n    'number | BigNumber, SparseMatrix': function numberBigNumberSparseMatrix(x, y) {\n      // density must be one (no zeros in matrix)\n      if (y.density() === 1) {\n        // sparse - scalar\n        return algorithm11(y, x, this, true);\n      } else {\n        // throw exception\n        throw new Error('Root must be non-zero');\n      }\n    },\n    'number | BigNumber, DenseMatrix': function numberBigNumberDenseMatrix(x, y) {\n      return algorithm14(y, x, this, true);\n    },\n    'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {\n      // use matrix implementation\n      return this(matrix(x), y).valueOf();\n    },\n    'number | BigNumber, Array': function numberBigNumberArray(x, y) {\n      // use matrix implementation\n      return this(x, matrix(y)).valueOf();\n    }\n  });\n  /**\n   * Calculate the nth root of a for BigNumbers, solve x^root == a\n   * https://rosettacode.org/wiki/Nth_root#JavaScript\n   * @param {BigNumber} a\n   * @param {BigNumber} root\n   * @private\n   */\n\n  function _bigNthRoot(a, root) {\n    var precision = _BigNumber.precision;\n\n    var Big = _BigNumber.clone({\n      precision: precision + 2\n    });\n\n    var zero = new _BigNumber(0);\n    var one = new Big(1);\n    var inv = root.isNegative();\n\n    if (inv) {\n      root = root.neg();\n    }\n\n    if (root.isZero()) {\n      throw new Error('Root must be non-zero');\n    }\n\n    if (a.isNegative() && !root.abs().mod(2).equals(1)) {\n      throw new Error('Root must be odd when a is negative.');\n    } // edge cases zero and infinity\n\n\n    if (a.isZero()) {\n      return inv ? new Big(Infinity) : 0;\n    }\n\n    if (!a.isFinite()) {\n      return inv ? zero : a;\n    }\n\n    var x = a.abs().pow(one.div(root)); // If a < 0, we require that root is an odd integer,\n    // so (-1) ^ (1/root) = -1\n\n    x = a.isNeg() ? x.neg() : x;\n    return new _BigNumber((inv ? one.div(x) : x).toPrecision(precision));\n  }\n});\nexport var createNthRootNumber = /* #__PURE__ */factory(name, ['typed'], _ref2 => {\n  var {\n    typed\n  } = _ref2;\n  return typed(name, {\n    number: nthRootNumber,\n    'number, number': nthRootNumber\n  });\n});","map":{"version":3,"sources":["/Users/elimunn/Desktop/plot-recipes/node_modules/mathjs/lib/esm/function/arithmetic/nthRoot.js"],"names":["factory","createAlgorithm01","createAlgorithm02","createAlgorithm06","createAlgorithm11","createAlgorithm13","createAlgorithm14","nthRootNumber","name","dependencies","createNthRoot","_ref","typed","matrix","equalScalar","BigNumber","_BigNumber","algorithm01","algorithm02","algorithm06","algorithm11","algorithm13","algorithm14","complexErr","number","x","_bigNthRoot","Complex","Error","ComplexNumber","y","ArrayMatrix","SparseMatrixSparseMatrix","density","SparseMatrixDenseMatrix","DenseMatrixSparseMatrix","DenseMatrixDenseMatrix","ArrayArray","valueOf","MatrixArray","SparseMatrixNumberBigNumber","DenseMatrixNumberBigNumber","numberBigNumberSparseMatrix","numberBigNumberDenseMatrix","ArrayNumberBigNumber","numberBigNumberArray","a","root","precision","Big","clone","zero","one","inv","isNegative","neg","isZero","abs","mod","equals","Infinity","isFinite","pow","div","isNeg","toPrecision","createNthRootNumber","_ref2"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,iBAAT,QAAkC,wCAAlC;AACA,SAASC,iBAAT,QAAkC,wCAAlC;AACA,SAASC,iBAAT,QAAkC,wCAAlC;AACA,SAASC,iBAAT,QAAkC,wCAAlC;AACA,SAASC,iBAAT,QAAkC,wCAAlC;AACA,SAASC,iBAAT,QAAkC,wCAAlC;AACA,SAASC,aAAT,QAA8B,6BAA9B;AACA,IAAIC,IAAI,GAAG,SAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,QAAV,EAAoB,aAApB,EAAmC,WAAnC,CAAnB;AACA,OAAO,IAAIC,aAAa,GAAG,eAAeV,OAAO,CAACQ,IAAD,EAAOC,YAAP,EAAsBE,IAAD,IAAU;AAC9E,MAAI;AACFC,IAAAA,KADE;AAEFC,IAAAA,MAFE;AAGFC,IAAAA,WAHE;AAIFC,IAAAA,SAAS,EAAEC;AAJT,MAKAL,IALJ;AAMA,MAAIM,WAAW,GAAGhB,iBAAiB,CAAC;AAClCW,IAAAA;AADkC,GAAD,CAAnC;AAGA,MAAIM,WAAW,GAAGhB,iBAAiB,CAAC;AAClCU,IAAAA,KADkC;AAElCE,IAAAA;AAFkC,GAAD,CAAnC;AAIA,MAAIK,WAAW,GAAGhB,iBAAiB,CAAC;AAClCS,IAAAA,KADkC;AAElCE,IAAAA;AAFkC,GAAD,CAAnC;AAIA,MAAIM,WAAW,GAAGhB,iBAAiB,CAAC;AAClCQ,IAAAA,KADkC;AAElCE,IAAAA;AAFkC,GAAD,CAAnC;AAIA,MAAIO,WAAW,GAAGhB,iBAAiB,CAAC;AAClCO,IAAAA;AADkC,GAAD,CAAnC;AAGA,MAAIU,WAAW,GAAGhB,iBAAiB,CAAC;AAClCM,IAAAA;AADkC,GAAD,CAAnC;AAGA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEE,MAAIW,UAAU,GAAG,KAAK,oDAAL,GAA4D,uBAA7E;AACA,SAAOX,KAAK,CAACJ,IAAD,EAAO;AACjBgB,IAAAA,MAAM,EAAE,SAASA,MAAT,CAAgBC,CAAhB,EAAmB;AACzB,aAAOlB,aAAa,CAACkB,CAAD,EAAI,CAAJ,CAApB;AACD,KAHgB;AAIjB,sBAAkBlB,aAJD;AAKjBQ,IAAAA,SAAS,EAAE,SAASA,SAAT,CAAmBU,CAAnB,EAAsB;AAC/B,aAAOC,WAAW,CAACD,CAAD,EAAI,IAAIT,UAAJ,CAAe,CAAf,CAAJ,CAAlB;AACD,KAPgB;AAQjBW,IAAAA,OAAO,EAAE,SAASA,OAAT,CAAiBF,CAAjB,EAAoB;AAC3B,YAAM,IAAIG,KAAJ,CAAUL,UAAV,CAAN;AACD,KAVgB;AAWjB,uBAAmB,SAASM,aAAT,CAAuBJ,CAAvB,EAA0BK,CAA1B,EAA6B;AAC9C,YAAM,IAAIF,KAAJ,CAAUL,UAAV,CAAN;AACD,KAbgB;AAcjB,4BAAwBG,WAdP;AAejB,sBAAkB,SAASK,WAAT,CAAqBN,CAArB,EAAwB;AACxC,aAAO,KAAKA,CAAL,EAAQ,CAAR,CAAP;AACD,KAjBgB;AAkBjB,kCAA8B,SAASO,wBAAT,CAAkCP,CAAlC,EAAqCK,CAArC,EAAwC;AACpE;AACA,UAAIA,CAAC,CAACG,OAAF,OAAgB,CAApB,EAAuB;AACrB;AACA,eAAOd,WAAW,CAACM,CAAD,EAAIK,CAAJ,EAAO,IAAP,CAAlB;AACD,OAHD,MAGO;AACL;AACA,cAAM,IAAIF,KAAJ,CAAU,uBAAV,CAAN;AACD;AACF,KA3BgB;AA4BjB,iCAA6B,SAASM,uBAAT,CAAiCT,CAAjC,EAAoCK,CAApC,EAAuC;AAClE,aAAOZ,WAAW,CAACY,CAAD,EAAIL,CAAJ,EAAO,IAAP,EAAa,IAAb,CAAlB;AACD,KA9BgB;AA+BjB,iCAA6B,SAASU,uBAAT,CAAiCV,CAAjC,EAAoCK,CAApC,EAAuC;AAClE;AACA,UAAIA,CAAC,CAACG,OAAF,OAAgB,CAApB,EAAuB;AACrB;AACA,eAAOhB,WAAW,CAACQ,CAAD,EAAIK,CAAJ,EAAO,IAAP,EAAa,KAAb,CAAlB;AACD,OAHD,MAGO;AACL;AACA,cAAM,IAAIF,KAAJ,CAAU,uBAAV,CAAN;AACD;AACF,KAxCgB;AAyCjB,gCAA4B,SAASQ,sBAAT,CAAgCX,CAAhC,EAAmCK,CAAnC,EAAsC;AAChE,aAAOT,WAAW,CAACI,CAAD,EAAIK,CAAJ,EAAO,IAAP,CAAlB;AACD,KA3CgB;AA4CjB,oBAAgB,SAASO,UAAT,CAAoBZ,CAApB,EAAuBK,CAAvB,EAA0B;AACxC;AACA,aAAO,KAAKjB,MAAM,CAACY,CAAD,CAAX,EAAgBZ,MAAM,CAACiB,CAAD,CAAtB,EAA2BQ,OAA3B,EAAP;AACD,KA/CgB;AAgDjB,qBAAiB,SAASP,WAAT,CAAqBN,CAArB,EAAwBK,CAAxB,EAA2B;AAC1C;AACA,aAAO,KAAKjB,MAAM,CAACY,CAAD,CAAX,EAAgBK,CAAhB,CAAP;AACD,KAnDgB;AAoDjB,qBAAiB,SAASS,WAAT,CAAqBd,CAArB,EAAwBK,CAAxB,EAA2B;AAC1C;AACA,aAAO,KAAKL,CAAL,EAAQZ,MAAM,CAACiB,CAAD,CAAd,CAAP;AACD,KAvDgB;AAwDjB,wCAAoC,SAASU,2BAAT,CAAqCf,CAArC,EAAwCK,CAAxC,EAA2C;AAC7E,aAAOV,WAAW,CAACK,CAAD,EAAIK,CAAJ,EAAO,IAAP,EAAa,KAAb,CAAlB;AACD,KA1DgB;AA2DjB,uCAAmC,SAASW,0BAAT,CAAoChB,CAApC,EAAuCK,CAAvC,EAA0C;AAC3E,aAAOR,WAAW,CAACG,CAAD,EAAIK,CAAJ,EAAO,IAAP,EAAa,KAAb,CAAlB;AACD,KA7DgB;AA8DjB,wCAAoC,SAASY,2BAAT,CAAqCjB,CAArC,EAAwCK,CAAxC,EAA2C;AAC7E;AACA,UAAIA,CAAC,CAACG,OAAF,OAAgB,CAApB,EAAuB;AACrB;AACA,eAAOb,WAAW,CAACU,CAAD,EAAIL,CAAJ,EAAO,IAAP,EAAa,IAAb,CAAlB;AACD,OAHD,MAGO;AACL;AACA,cAAM,IAAIG,KAAJ,CAAU,uBAAV,CAAN;AACD;AACF,KAvEgB;AAwEjB,uCAAmC,SAASe,0BAAT,CAAoClB,CAApC,EAAuCK,CAAvC,EAA0C;AAC3E,aAAOR,WAAW,CAACQ,CAAD,EAAIL,CAAJ,EAAO,IAAP,EAAa,IAAb,CAAlB;AACD,KA1EgB;AA2EjB,iCAA6B,SAASmB,oBAAT,CAA8BnB,CAA9B,EAAiCK,CAAjC,EAAoC;AAC/D;AACA,aAAO,KAAKjB,MAAM,CAACY,CAAD,CAAX,EAAgBK,CAAhB,EAAmBQ,OAAnB,EAAP;AACD,KA9EgB;AA+EjB,iCAA6B,SAASO,oBAAT,CAA8BpB,CAA9B,EAAiCK,CAAjC,EAAoC;AAC/D;AACA,aAAO,KAAKL,CAAL,EAAQZ,MAAM,CAACiB,CAAD,CAAd,EAAmBQ,OAAnB,EAAP;AACD;AAlFgB,GAAP,CAAZ;AAoFA;AACF;AACA;AACA;AACA;AACA;AACA;;AAEE,WAASZ,WAAT,CAAqBoB,CAArB,EAAwBC,IAAxB,EAA8B;AAC5B,QAAIC,SAAS,GAAGhC,UAAU,CAACgC,SAA3B;;AAEA,QAAIC,GAAG,GAAGjC,UAAU,CAACkC,KAAX,CAAiB;AACzBF,MAAAA,SAAS,EAAEA,SAAS,GAAG;AADE,KAAjB,CAAV;;AAIA,QAAIG,IAAI,GAAG,IAAInC,UAAJ,CAAe,CAAf,CAAX;AACA,QAAIoC,GAAG,GAAG,IAAIH,GAAJ,CAAQ,CAAR,CAAV;AACA,QAAII,GAAG,GAAGN,IAAI,CAACO,UAAL,EAAV;;AAEA,QAAID,GAAJ,EAAS;AACPN,MAAAA,IAAI,GAAGA,IAAI,CAACQ,GAAL,EAAP;AACD;;AAED,QAAIR,IAAI,CAACS,MAAL,EAAJ,EAAmB;AACjB,YAAM,IAAI5B,KAAJ,CAAU,uBAAV,CAAN;AACD;;AAED,QAAIkB,CAAC,CAACQ,UAAF,MAAkB,CAACP,IAAI,CAACU,GAAL,GAAWC,GAAX,CAAe,CAAf,EAAkBC,MAAlB,CAAyB,CAAzB,CAAvB,EAAoD;AAClD,YAAM,IAAI/B,KAAJ,CAAU,sCAAV,CAAN;AACD,KArB2B,CAqB1B;;;AAGF,QAAIkB,CAAC,CAACU,MAAF,EAAJ,EAAgB;AACd,aAAOH,GAAG,GAAG,IAAIJ,GAAJ,CAAQW,QAAR,CAAH,GAAuB,CAAjC;AACD;;AAED,QAAI,CAACd,CAAC,CAACe,QAAF,EAAL,EAAmB;AACjB,aAAOR,GAAG,GAAGF,IAAH,GAAUL,CAApB;AACD;;AAED,QAAIrB,CAAC,GAAGqB,CAAC,CAACW,GAAF,GAAQK,GAAR,CAAYV,GAAG,CAACW,GAAJ,CAAQhB,IAAR,CAAZ,CAAR,CAhC4B,CAgCQ;AACpC;;AAEAtB,IAAAA,CAAC,GAAGqB,CAAC,CAACkB,KAAF,KAAYvC,CAAC,CAAC8B,GAAF,EAAZ,GAAsB9B,CAA1B;AACA,WAAO,IAAIT,UAAJ,CAAe,CAACqC,GAAG,GAAGD,GAAG,CAACW,GAAJ,CAAQtC,CAAR,CAAH,GAAgBA,CAApB,EAAuBwC,WAAvB,CAAmCjB,SAAnC,CAAf,CAAP;AACD;AACF,CA7LgD,CAA1C;AA8LP,OAAO,IAAIkB,mBAAmB,GAAG,eAAelE,OAAO,CAACQ,IAAD,EAAO,CAAC,OAAD,CAAP,EAAmB2D,KAAD,IAAW;AAClF,MAAI;AACFvD,IAAAA;AADE,MAEAuD,KAFJ;AAGA,SAAOvD,KAAK,CAACJ,IAAD,EAAO;AACjBgB,IAAAA,MAAM,EAAEjB,aADS;AAEjB,sBAAkBA;AAFD,GAAP,CAAZ;AAID,CARsD,CAAhD","sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { createAlgorithm01 } from '../../type/matrix/utils/algorithm01.js';\nimport { createAlgorithm02 } from '../../type/matrix/utils/algorithm02.js';\nimport { createAlgorithm06 } from '../../type/matrix/utils/algorithm06.js';\nimport { createAlgorithm11 } from '../../type/matrix/utils/algorithm11.js';\nimport { createAlgorithm13 } from '../../type/matrix/utils/algorithm13.js';\nimport { createAlgorithm14 } from '../../type/matrix/utils/algorithm14.js';\nimport { nthRootNumber } from '../../plain/number/index.js';\nvar name = 'nthRoot';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'BigNumber'];\nexport var createNthRoot = /* #__PURE__ */factory(name, dependencies, (_ref) => {\n  var {\n    typed,\n    matrix,\n    equalScalar,\n    BigNumber: _BigNumber\n  } = _ref;\n  var algorithm01 = createAlgorithm01({\n    typed\n  });\n  var algorithm02 = createAlgorithm02({\n    typed,\n    equalScalar\n  });\n  var algorithm06 = createAlgorithm06({\n    typed,\n    equalScalar\n  });\n  var algorithm11 = createAlgorithm11({\n    typed,\n    equalScalar\n  });\n  var algorithm13 = createAlgorithm13({\n    typed\n  });\n  var algorithm14 = createAlgorithm14({\n    typed\n  });\n  /**\n   * Calculate the nth root of a value.\n   * The principal nth root of a positive real number A, is the positive real\n   * solution of the equation\n   *\n   *     x^root = A\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *     math.nthRoot(a)\n   *     math.nthRoot(a, root)\n   *\n   * Examples:\n   *\n   *     math.nthRoot(9, 2)    // returns 3, as 3^2 == 9\n   *     math.sqrt(9)          // returns 3, as 3^2 == 9\n   *     math.nthRoot(64, 3)   // returns 4, as 4^3 == 64\n   *\n   * See also:\n   *\n   *     sqrt, pow\n   *\n   * @param {number | BigNumber | Array | Matrix | Complex} a\n   *              Value for which to calculate the nth root\n   * @param {number | BigNumber} [root=2]    The root.\n   * @return {number | Complex | Array | Matrix} Returns the nth root of `a`\n   */\n\n  var complexErr = '' + 'Complex number not supported in function nthRoot. ' + 'Use nthRoots instead.';\n  return typed(name, {\n    number: function number(x) {\n      return nthRootNumber(x, 2);\n    },\n    'number, number': nthRootNumber,\n    BigNumber: function BigNumber(x) {\n      return _bigNthRoot(x, new _BigNumber(2));\n    },\n    Complex: function Complex(x) {\n      throw new Error(complexErr);\n    },\n    'Complex, number': function ComplexNumber(x, y) {\n      throw new Error(complexErr);\n    },\n    'BigNumber, BigNumber': _bigNthRoot,\n    'Array | Matrix': function ArrayMatrix(x) {\n      return this(x, 2);\n    },\n    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {\n      // density must be one (no zeros in matrix)\n      if (y.density() === 1) {\n        // sparse + sparse\n        return algorithm06(x, y, this);\n      } else {\n        // throw exception\n        throw new Error('Root must be non-zero');\n      }\n    },\n    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {\n      return algorithm02(y, x, this, true);\n    },\n    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {\n      // density must be one (no zeros in matrix)\n      if (y.density() === 1) {\n        // dense + sparse\n        return algorithm01(x, y, this, false);\n      } else {\n        // throw exception\n        throw new Error('Root must be non-zero');\n      }\n    },\n    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\n      return algorithm13(x, y, this);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return this(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return this(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return this(x, matrix(y));\n    },\n    'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {\n      return algorithm11(x, y, this, false);\n    },\n    'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {\n      return algorithm14(x, y, this, false);\n    },\n    'number | BigNumber, SparseMatrix': function numberBigNumberSparseMatrix(x, y) {\n      // density must be one (no zeros in matrix)\n      if (y.density() === 1) {\n        // sparse - scalar\n        return algorithm11(y, x, this, true);\n      } else {\n        // throw exception\n        throw new Error('Root must be non-zero');\n      }\n    },\n    'number | BigNumber, DenseMatrix': function numberBigNumberDenseMatrix(x, y) {\n      return algorithm14(y, x, this, true);\n    },\n    'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {\n      // use matrix implementation\n      return this(matrix(x), y).valueOf();\n    },\n    'number | BigNumber, Array': function numberBigNumberArray(x, y) {\n      // use matrix implementation\n      return this(x, matrix(y)).valueOf();\n    }\n  });\n  /**\n   * Calculate the nth root of a for BigNumbers, solve x^root == a\n   * https://rosettacode.org/wiki/Nth_root#JavaScript\n   * @param {BigNumber} a\n   * @param {BigNumber} root\n   * @private\n   */\n\n  function _bigNthRoot(a, root) {\n    var precision = _BigNumber.precision;\n\n    var Big = _BigNumber.clone({\n      precision: precision + 2\n    });\n\n    var zero = new _BigNumber(0);\n    var one = new Big(1);\n    var inv = root.isNegative();\n\n    if (inv) {\n      root = root.neg();\n    }\n\n    if (root.isZero()) {\n      throw new Error('Root must be non-zero');\n    }\n\n    if (a.isNegative() && !root.abs().mod(2).equals(1)) {\n      throw new Error('Root must be odd when a is negative.');\n    } // edge cases zero and infinity\n\n\n    if (a.isZero()) {\n      return inv ? new Big(Infinity) : 0;\n    }\n\n    if (!a.isFinite()) {\n      return inv ? zero : a;\n    }\n\n    var x = a.abs().pow(one.div(root)); // If a < 0, we require that root is an odd integer,\n    // so (-1) ^ (1/root) = -1\n\n    x = a.isNeg() ? x.neg() : x;\n    return new _BigNumber((inv ? one.div(x) : x).toPrecision(precision));\n  }\n});\nexport var createNthRootNumber = /* #__PURE__ */factory(name, ['typed'], (_ref2) => {\n  var {\n    typed\n  } = _ref2;\n  return typed(name, {\n    number: nthRootNumber,\n    'number, number': nthRootNumber\n  });\n});"]},"metadata":{},"sourceType":"module"}