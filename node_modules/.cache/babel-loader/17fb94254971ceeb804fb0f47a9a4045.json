{"ast":null,"code":"import { deepForEach } from '../../utils/collection.js';\nimport { isBigNumber } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nimport { improveErrorMessage } from './utils/improveErrorMessage.js';\nvar DEFAULT_NORMALIZATION = 'unbiased';\nvar name = 'variance';\nvar dependencies = ['typed', 'add', 'subtract', 'multiply', 'divide', 'apply', 'isNaN'];\nexport var createVariance = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    add,\n    subtract,\n    multiply,\n    divide,\n    apply,\n    isNaN\n  } = _ref;\n  /**\n   * Compute the variance of a matrix or a  list with values.\n   * In case of a (multi dimensional) array or matrix, the variance over all\n   * elements will be calculated.\n   *\n   * Additionally, it is possible to compute the variance along the rows\n   * or columns of a matrix by specifying the dimension as the second argument.\n   *\n   * Optionally, the type of normalization can be specified as the final\n   * parameter. The parameter `normalization` can be one of the following values:\n   *\n   * - 'unbiased' (default) The sum of squared errors is divided by (n - 1)\n   * - 'uncorrected'        The sum of squared errors is divided by n\n   * - 'biased'             The sum of squared errors is divided by (n + 1)\n   *\n   *\n   * Note that older browser may not like the variable name `var`. In that\n   * case, the function can be called as `math['var'](...)` instead of\n   * `math.var(...)`.\n   *\n   * Syntax:\n   *\n   *     math.variance(a, b, c, ...)\n   *     math.variance(A)\n   *     math.variance(A, normalization)\n   *     math.variance(A, dimension)\n   *     math.variance(A, dimension, normalization)\n   *\n   * Examples:\n   *\n   *     math.variance(2, 4, 6)                     // returns 4\n   *     math.variance([2, 4, 6, 8])                // returns 6.666666666666667\n   *     math.variance([2, 4, 6, 8], 'uncorrected') // returns 5\n   *     math.variance([2, 4, 6, 8], 'biased')      // returns 4\n   *\n   *     math.variance([[1, 2, 3], [4, 5, 6]])      // returns 3.5\n   *     math.variance([[1, 2, 3], [4, 6, 8]], 0)   // returns [4.5, 8, 12.5]\n   *     math.variance([[1, 2, 3], [4, 6, 8]], 1)   // returns [1, 4]\n   *     math.variance([[1, 2, 3], [4, 6, 8]], 1, 'biased') // returns [0.5, 2]\n   *\n   * See also:\n   *\n   *    mean, median, max, min, prod, std, sum\n   *\n   * @param {Array | Matrix} array\n   *                        A single matrix or or multiple scalar values\n   * @param {string} [normalization='unbiased']\n   *                        Determines how to normalize the variance.\n   *                        Choose 'unbiased' (default), 'uncorrected', or 'biased'.\n   * @param dimension {number | BigNumber}\n   *                        Determines the axis to compute the variance for a matrix\n   * @return {*} The variance\n   */\n\n  return typed(name, {\n    // variance([a, b, c, d, ...])\n    'Array | Matrix': function ArrayMatrix(array) {\n      return _var(array, DEFAULT_NORMALIZATION);\n    },\n    // variance([a, b, c, d, ...], normalization)\n    'Array | Matrix, string': _var,\n    // variance([a, b, c, c, ...], dim)\n    'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(array, dim) {\n      return _varDim(array, dim, DEFAULT_NORMALIZATION);\n    },\n    // variance([a, b, c, c, ...], dim, normalization)\n    'Array | Matrix, number | BigNumber, string': _varDim,\n    // variance(a, b, c, d, ...)\n    '...': function _(args) {\n      return _var(args, DEFAULT_NORMALIZATION);\n    }\n  });\n  /**\n   * Recursively calculate the variance of an n-dimensional array\n   * @param {Array} array\n   * @param {string} normalization\n   *                        Determines how to normalize the variance:\n   *                        - 'unbiased'    The sum of squared errors is divided by (n - 1)\n   *                        - 'uncorrected' The sum of squared errors is divided by n\n   *                        - 'biased'      The sum of squared errors is divided by (n + 1)\n   * @return {number | BigNumber} variance\n   * @private\n   */\n\n  function _var(array, normalization) {\n    var sum;\n    var num = 0;\n\n    if (array.length === 0) {\n      throw new SyntaxError('Function variance requires one or more parameters (0 provided)');\n    } // calculate the mean and number of elements\n\n\n    deepForEach(array, function (value) {\n      try {\n        sum = sum === undefined ? value : add(sum, value);\n        num++;\n      } catch (err) {\n        throw improveErrorMessage(err, 'variance', value);\n      }\n    });\n    if (num === 0) throw new Error('Cannot calculate variance of an empty array');\n    var mean = divide(sum, num); // calculate the variance\n\n    sum = undefined;\n    deepForEach(array, function (value) {\n      var diff = subtract(value, mean);\n      sum = sum === undefined ? multiply(diff, diff) : add(sum, multiply(diff, diff));\n    });\n\n    if (isNaN(sum)) {\n      return sum;\n    }\n\n    switch (normalization) {\n      case 'uncorrected':\n        return divide(sum, num);\n\n      case 'biased':\n        return divide(sum, num + 1);\n\n      case 'unbiased':\n        {\n          var zero = isBigNumber(sum) ? sum.mul(0) : 0;\n          return num === 1 ? zero : divide(sum, num - 1);\n        }\n\n      default:\n        throw new Error('Unknown normalization \"' + normalization + '\". ' + 'Choose \"unbiased\" (default), \"uncorrected\", or \"biased\".');\n    }\n  }\n\n  function _varDim(array, dim, normalization) {\n    try {\n      if (array.length === 0) {\n        throw new SyntaxError('Function variance requires one or more parameters (0 provided)');\n      }\n\n      return apply(array, dim, x => _var(x, normalization));\n    } catch (err) {\n      throw improveErrorMessage(err, 'variance');\n    }\n  }\n});","map":{"version":3,"sources":["/Users/elimunn/Desktop/plot-recipes/node_modules/mathjs/lib/esm/function/statistics/variance.js"],"names":["deepForEach","isBigNumber","factory","improveErrorMessage","DEFAULT_NORMALIZATION","name","dependencies","createVariance","_ref","typed","add","subtract","multiply","divide","apply","isNaN","ArrayMatrix","array","_var","ArrayMatrixNumberBigNumber","dim","_varDim","_","args","normalization","sum","num","length","SyntaxError","value","undefined","err","Error","mean","diff","zero","mul","x"],"mappings":"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","sourcesContent":["import { deepForEach } from '../../utils/collection.js';\nimport { isBigNumber } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nimport { improveErrorMessage } from './utils/improveErrorMessage.js';\nvar DEFAULT_NORMALIZATION = 'unbiased';\nvar name = 'variance';\nvar dependencies = ['typed', 'add', 'subtract', 'multiply', 'divide', 'apply', 'isNaN'];\nexport var createVariance = /* #__PURE__ */factory(name, dependencies, (_ref) => {\n  var {\n    typed,\n    add,\n    subtract,\n    multiply,\n    divide,\n    apply,\n    isNaN\n  } = _ref;\n\n  /**\n   * Compute the variance of a matrix or a  list with values.\n   * In case of a (multi dimensional) array or matrix, the variance over all\n   * elements will be calculated.\n   *\n   * Additionally, it is possible to compute the variance along the rows\n   * or columns of a matrix by specifying the dimension as the second argument.\n   *\n   * Optionally, the type of normalization can be specified as the final\n   * parameter. The parameter `normalization` can be one of the following values:\n   *\n   * - 'unbiased' (default) The sum of squared errors is divided by (n - 1)\n   * - 'uncorrected'        The sum of squared errors is divided by n\n   * - 'biased'             The sum of squared errors is divided by (n + 1)\n   *\n   *\n   * Note that older browser may not like the variable name `var`. In that\n   * case, the function can be called as `math['var'](...)` instead of\n   * `math.var(...)`.\n   *\n   * Syntax:\n   *\n   *     math.variance(a, b, c, ...)\n   *     math.variance(A)\n   *     math.variance(A, normalization)\n   *     math.variance(A, dimension)\n   *     math.variance(A, dimension, normalization)\n   *\n   * Examples:\n   *\n   *     math.variance(2, 4, 6)                     // returns 4\n   *     math.variance([2, 4, 6, 8])                // returns 6.666666666666667\n   *     math.variance([2, 4, 6, 8], 'uncorrected') // returns 5\n   *     math.variance([2, 4, 6, 8], 'biased')      // returns 4\n   *\n   *     math.variance([[1, 2, 3], [4, 5, 6]])      // returns 3.5\n   *     math.variance([[1, 2, 3], [4, 6, 8]], 0)   // returns [4.5, 8, 12.5]\n   *     math.variance([[1, 2, 3], [4, 6, 8]], 1)   // returns [1, 4]\n   *     math.variance([[1, 2, 3], [4, 6, 8]], 1, 'biased') // returns [0.5, 2]\n   *\n   * See also:\n   *\n   *    mean, median, max, min, prod, std, sum\n   *\n   * @param {Array | Matrix} array\n   *                        A single matrix or or multiple scalar values\n   * @param {string} [normalization='unbiased']\n   *                        Determines how to normalize the variance.\n   *                        Choose 'unbiased' (default), 'uncorrected', or 'biased'.\n   * @param dimension {number | BigNumber}\n   *                        Determines the axis to compute the variance for a matrix\n   * @return {*} The variance\n   */\n  return typed(name, {\n    // variance([a, b, c, d, ...])\n    'Array | Matrix': function ArrayMatrix(array) {\n      return _var(array, DEFAULT_NORMALIZATION);\n    },\n    // variance([a, b, c, d, ...], normalization)\n    'Array | Matrix, string': _var,\n    // variance([a, b, c, c, ...], dim)\n    'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(array, dim) {\n      return _varDim(array, dim, DEFAULT_NORMALIZATION);\n    },\n    // variance([a, b, c, c, ...], dim, normalization)\n    'Array | Matrix, number | BigNumber, string': _varDim,\n    // variance(a, b, c, d, ...)\n    '...': function _(args) {\n      return _var(args, DEFAULT_NORMALIZATION);\n    }\n  });\n  /**\n   * Recursively calculate the variance of an n-dimensional array\n   * @param {Array} array\n   * @param {string} normalization\n   *                        Determines how to normalize the variance:\n   *                        - 'unbiased'    The sum of squared errors is divided by (n - 1)\n   *                        - 'uncorrected' The sum of squared errors is divided by n\n   *                        - 'biased'      The sum of squared errors is divided by (n + 1)\n   * @return {number | BigNumber} variance\n   * @private\n   */\n\n  function _var(array, normalization) {\n    var sum;\n    var num = 0;\n\n    if (array.length === 0) {\n      throw new SyntaxError('Function variance requires one or more parameters (0 provided)');\n    } // calculate the mean and number of elements\n\n\n    deepForEach(array, function (value) {\n      try {\n        sum = sum === undefined ? value : add(sum, value);\n        num++;\n      } catch (err) {\n        throw improveErrorMessage(err, 'variance', value);\n      }\n    });\n    if (num === 0) throw new Error('Cannot calculate variance of an empty array');\n    var mean = divide(sum, num); // calculate the variance\n\n    sum = undefined;\n    deepForEach(array, function (value) {\n      var diff = subtract(value, mean);\n      sum = sum === undefined ? multiply(diff, diff) : add(sum, multiply(diff, diff));\n    });\n\n    if (isNaN(sum)) {\n      return sum;\n    }\n\n    switch (normalization) {\n      case 'uncorrected':\n        return divide(sum, num);\n\n      case 'biased':\n        return divide(sum, num + 1);\n\n      case 'unbiased':\n        {\n          var zero = isBigNumber(sum) ? sum.mul(0) : 0;\n          return num === 1 ? zero : divide(sum, num - 1);\n        }\n\n      default:\n        throw new Error('Unknown normalization \"' + normalization + '\". ' + 'Choose \"unbiased\" (default), \"uncorrected\", or \"biased\".');\n    }\n  }\n\n  function _varDim(array, dim, normalization) {\n    try {\n      if (array.length === 0) {\n        throw new SyntaxError('Function variance requires one or more parameters (0 provided)');\n      }\n\n      return apply(array, dim, x => _var(x, normalization));\n    } catch (err) {\n      throw improveErrorMessage(err, 'variance');\n    }\n  }\n});"]},"metadata":{},"sourceType":"module"}