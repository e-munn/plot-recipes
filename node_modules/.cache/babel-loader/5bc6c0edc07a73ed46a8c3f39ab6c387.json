{"ast":null,"code":"import { factory } from '../utils/factory.js';\nimport { deepMap } from '../utils/collection.js';\nvar name = 'number';\nvar dependencies = ['typed'];\nexport var createNumber = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Create a number or convert a string, boolean, or unit to a number.\n   * When value is a matrix, all elements will be converted to number.\n   *\n   * Syntax:\n   *\n   *    math.number(value)\n   *    math.number(unit, valuelessUnit)\n   *\n   * Examples:\n   *\n   *    math.number(2)                         // returns number 2\n   *    math.number('7.2')                     // returns number 7.2\n   *    math.number(true)                      // returns number 1\n   *    math.number([true, false, true, true]) // returns [1, 0, 1, 1]\n   *    math.number(math.unit('52cm'), 'm')    // returns 0.52\n   *\n   * See also:\n   *\n   *    bignumber, boolean, complex, index, matrix, string, unit\n   *\n   * @param {string | number | BigNumber | Fraction | boolean | Array | Matrix | Unit | null} [value]  Value to be converted\n   * @param {Unit | string} [valuelessUnit] A valueless unit, used to convert a unit to a number\n   * @return {number | Array | Matrix} The created number\n   */\n\n  var number = typed('number', {\n    '': function _() {\n      return 0;\n    },\n    number: function number(x) {\n      return x;\n    },\n    string: function string(x) {\n      if (x === 'NaN') return NaN;\n      var size = 0;\n      var boxMatch = x.match(/(0[box][0-9a-fA-F]*)i([0-9]*)/);\n\n      if (boxMatch) {\n        // x includes a size suffix like 0xffffi32, so we extract\n        // the suffix and remove it from x\n        size = Number(boxMatch[2]);\n        x = boxMatch[1];\n      }\n\n      var num = Number(x);\n\n      if (isNaN(num)) {\n        throw new SyntaxError('String \"' + x + '\" is no valid number');\n      }\n\n      if (boxMatch) {\n        // x is a signed bin, oct, or hex literal\n        // num is the value of string x if x is interpreted as unsigned\n        if (num > 2 ** size - 1) {\n          // literal is too large for size suffix\n          throw new SyntaxError(\"String \\\"\".concat(x, \"\\\" is out of range\"));\n        } // check if the bit at index size - 1 is set and if so do the twos complement\n\n\n        if (num >= 2 ** (size - 1)) {\n          num = num - 2 ** size;\n        }\n      }\n\n      return num;\n    },\n    BigNumber: function BigNumber(x) {\n      return x.toNumber();\n    },\n    Fraction: function Fraction(x) {\n      return x.valueOf();\n    },\n    Unit: function Unit(x) {\n      throw new Error('Second argument with valueless unit expected');\n    },\n    null: function _null(x) {\n      return 0;\n    },\n    'Unit, string | Unit': function UnitStringUnit(unit, valuelessUnit) {\n      return unit.toNumber(valuelessUnit);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return deepMap(x, this);\n    }\n  }); // reviver function to parse a JSON object like:\n  //\n  //     {\"mathjs\":\"number\",\"value\":\"2.3\"}\n  //\n  // into a number 2.3\n\n  number.fromJSON = function (json) {\n    return parseFloat(json.value);\n  };\n\n  return number;\n});","map":{"version":3,"sources":["/Users/elimunn/Desktop/plot-recipes/node_modules/mathjs/lib/esm/type/number.js"],"names":["factory","deepMap","name","dependencies","createNumber","_ref","typed","number","_","x","string","NaN","size","boxMatch","match","Number","num","isNaN","SyntaxError","concat","BigNumber","toNumber","Fraction","valueOf","Unit","Error","null","_null","UnitStringUnit","unit","valuelessUnit","ArrayMatrix","fromJSON","json","parseFloat","value"],"mappings":"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","sourcesContent":["import { factory } from '../utils/factory.js';\nimport { deepMap } from '../utils/collection.js';\nvar name = 'number';\nvar dependencies = ['typed'];\nexport var createNumber = /* #__PURE__ */factory(name, dependencies, (_ref) => {\n  var {\n    typed\n  } = _ref;\n\n  /**\n   * Create a number or convert a string, boolean, or unit to a number.\n   * When value is a matrix, all elements will be converted to number.\n   *\n   * Syntax:\n   *\n   *    math.number(value)\n   *    math.number(unit, valuelessUnit)\n   *\n   * Examples:\n   *\n   *    math.number(2)                         // returns number 2\n   *    math.number('7.2')                     // returns number 7.2\n   *    math.number(true)                      // returns number 1\n   *    math.number([true, false, true, true]) // returns [1, 0, 1, 1]\n   *    math.number(math.unit('52cm'), 'm')    // returns 0.52\n   *\n   * See also:\n   *\n   *    bignumber, boolean, complex, index, matrix, string, unit\n   *\n   * @param {string | number | BigNumber | Fraction | boolean | Array | Matrix | Unit | null} [value]  Value to be converted\n   * @param {Unit | string} [valuelessUnit] A valueless unit, used to convert a unit to a number\n   * @return {number | Array | Matrix} The created number\n   */\n  var number = typed('number', {\n    '': function _() {\n      return 0;\n    },\n    number: function number(x) {\n      return x;\n    },\n    string: function string(x) {\n      if (x === 'NaN') return NaN;\n      var size = 0;\n      var boxMatch = x.match(/(0[box][0-9a-fA-F]*)i([0-9]*)/);\n\n      if (boxMatch) {\n        // x includes a size suffix like 0xffffi32, so we extract\n        // the suffix and remove it from x\n        size = Number(boxMatch[2]);\n        x = boxMatch[1];\n      }\n\n      var num = Number(x);\n\n      if (isNaN(num)) {\n        throw new SyntaxError('String \"' + x + '\" is no valid number');\n      }\n\n      if (boxMatch) {\n        // x is a signed bin, oct, or hex literal\n        // num is the value of string x if x is interpreted as unsigned\n        if (num > 2 ** size - 1) {\n          // literal is too large for size suffix\n          throw new SyntaxError(\"String \\\"\".concat(x, \"\\\" is out of range\"));\n        } // check if the bit at index size - 1 is set and if so do the twos complement\n\n\n        if (num >= 2 ** (size - 1)) {\n          num = num - 2 ** size;\n        }\n      }\n\n      return num;\n    },\n    BigNumber: function BigNumber(x) {\n      return x.toNumber();\n    },\n    Fraction: function Fraction(x) {\n      return x.valueOf();\n    },\n    Unit: function Unit(x) {\n      throw new Error('Second argument with valueless unit expected');\n    },\n    null: function _null(x) {\n      return 0;\n    },\n    'Unit, string | Unit': function UnitStringUnit(unit, valuelessUnit) {\n      return unit.toNumber(valuelessUnit);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return deepMap(x, this);\n    }\n  }); // reviver function to parse a JSON object like:\n  //\n  //     {\"mathjs\":\"number\",\"value\":\"2.3\"}\n  //\n  // into a number 2.3\n\n  number.fromJSON = function (json) {\n    return parseFloat(json.value);\n  };\n\n  return number;\n});"]},"metadata":{},"sourceType":"module"}