{"ast":null,"code":"import Decimal from 'decimal.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'BigNumber';\nvar dependencies = ['?on', 'config'];\nexport var createBigNumberClass = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    on,\n    config\n  } = _ref;\n  var EUCLID = 9; // Use euclidian division for mod calculation\n\n  var BigNumber = Decimal.clone({\n    precision: config.precision,\n    modulo: EUCLID\n  });\n  /**\n   * Attach type information\n   */\n\n  BigNumber.prototype.type = 'BigNumber';\n  BigNumber.prototype.isBigNumber = true;\n  /**\n   * Get a JSON representation of a BigNumber containing\n   * type information\n   * @returns {Object} Returns a JSON object structured as:\n   *                   `{\"mathjs\": \"BigNumber\", \"value\": \"0.2\"}`\n   */\n\n  BigNumber.prototype.toJSON = function () {\n    return {\n      mathjs: 'BigNumber',\n      value: this.toString()\n    };\n  };\n  /**\n   * Instantiate a BigNumber from a JSON object\n   * @param {Object} json  a JSON object structured as:\n   *                       `{\"mathjs\": \"BigNumber\", \"value\": \"0.2\"}`\n   * @return {BigNumber}\n   */\n\n\n  BigNumber.fromJSON = function (json) {\n    return new BigNumber(json.value);\n  };\n\n  if (on) {\n    // listen for changed in the configuration, automatically apply changed precision\n    on('config', function (curr, prev) {\n      if (curr.precision !== prev.precision) {\n        BigNumber.config({\n          precision: curr.precision\n        });\n      }\n    });\n  }\n\n  return BigNumber;\n}, {\n  isClass: true\n});","map":{"version":3,"sources":["/Users/elimunn/Desktop/plot-recipes/node_modules/mathjs/lib/esm/type/bignumber/BigNumber.js"],"names":["Decimal","factory","name","dependencies","createBigNumberClass","_ref","on","config","EUCLID","BigNumber","clone","precision","modulo","prototype","type","isBigNumber","toJSON","mathjs","value","toString","fromJSON","json","curr","prev","isClass"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,YAApB;AACA,SAASC,OAAT,QAAwB,wBAAxB;AACA,IAAIC,IAAI,GAAG,WAAX;AACA,IAAIC,YAAY,GAAG,CAAC,KAAD,EAAQ,QAAR,CAAnB;AACA,OAAO,IAAIC,oBAAoB,GAAG,eAAeH,OAAO,CAACC,IAAD,EAAOC,YAAP,EAAsBE,IAAD,IAAU;AACrF,MAAI;AACFC,IAAAA,EADE;AAEFC,IAAAA;AAFE,MAGAF,IAHJ;AAIA,MAAIG,MAAM,GAAG,CAAb,CALqF,CAKrE;;AAEhB,MAAIC,SAAS,GAAGT,OAAO,CAACU,KAAR,CAAc;AAC5BC,IAAAA,SAAS,EAAEJ,MAAM,CAACI,SADU;AAE5BC,IAAAA,MAAM,EAAEJ;AAFoB,GAAd,CAAhB;AAIA;AACF;AACA;;AAEEC,EAAAA,SAAS,CAACI,SAAV,CAAoBC,IAApB,GAA2B,WAA3B;AACAL,EAAAA,SAAS,CAACI,SAAV,CAAoBE,WAApB,GAAkC,IAAlC;AACA;AACF;AACA;AACA;AACA;AACA;;AAEEN,EAAAA,SAAS,CAACI,SAAV,CAAoBG,MAApB,GAA6B,YAAY;AACvC,WAAO;AACLC,MAAAA,MAAM,EAAE,WADH;AAELC,MAAAA,KAAK,EAAE,KAAKC,QAAL;AAFF,KAAP;AAID,GALD;AAMA;AACF;AACA;AACA;AACA;AACA;;;AAGEV,EAAAA,SAAS,CAACW,QAAV,GAAqB,UAAUC,IAAV,EAAgB;AACnC,WAAO,IAAIZ,SAAJ,CAAcY,IAAI,CAACH,KAAnB,CAAP;AACD,GAFD;;AAIA,MAAIZ,EAAJ,EAAQ;AACN;AACAA,IAAAA,EAAE,CAAC,QAAD,EAAW,UAAUgB,IAAV,EAAgBC,IAAhB,EAAsB;AACjC,UAAID,IAAI,CAACX,SAAL,KAAmBY,IAAI,CAACZ,SAA5B,EAAuC;AACrCF,QAAAA,SAAS,CAACF,MAAV,CAAiB;AACfI,UAAAA,SAAS,EAAEW,IAAI,CAACX;AADD,SAAjB;AAGD;AACF,KANC,CAAF;AAOD;;AAED,SAAOF,SAAP;AACD,CAtDuD,EAsDrD;AACDe,EAAAA,OAAO,EAAE;AADR,CAtDqD,CAAjD","sourcesContent":["import Decimal from 'decimal.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'BigNumber';\nvar dependencies = ['?on', 'config'];\nexport var createBigNumberClass = /* #__PURE__ */factory(name, dependencies, (_ref) => {\n  var {\n    on,\n    config\n  } = _ref;\n  var EUCLID = 9; // Use euclidian division for mod calculation\n\n  var BigNumber = Decimal.clone({\n    precision: config.precision,\n    modulo: EUCLID\n  });\n  /**\n   * Attach type information\n   */\n\n  BigNumber.prototype.type = 'BigNumber';\n  BigNumber.prototype.isBigNumber = true;\n  /**\n   * Get a JSON representation of a BigNumber containing\n   * type information\n   * @returns {Object} Returns a JSON object structured as:\n   *                   `{\"mathjs\": \"BigNumber\", \"value\": \"0.2\"}`\n   */\n\n  BigNumber.prototype.toJSON = function () {\n    return {\n      mathjs: 'BigNumber',\n      value: this.toString()\n    };\n  };\n  /**\n   * Instantiate a BigNumber from a JSON object\n   * @param {Object} json  a JSON object structured as:\n   *                       `{\"mathjs\": \"BigNumber\", \"value\": \"0.2\"}`\n   * @return {BigNumber}\n   */\n\n\n  BigNumber.fromJSON = function (json) {\n    return new BigNumber(json.value);\n  };\n\n  if (on) {\n    // listen for changed in the configuration, automatically apply changed precision\n    on('config', function (curr, prev) {\n      if (curr.precision !== prev.precision) {\n        BigNumber.config({\n          precision: curr.precision\n        });\n      }\n    });\n  }\n\n  return BigNumber;\n}, {\n  isClass: true\n});"]},"metadata":{},"sourceType":"module"}