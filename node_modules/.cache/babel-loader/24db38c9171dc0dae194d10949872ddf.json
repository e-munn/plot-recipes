{"ast":null,"code":"import naturalSort from 'javascript-natural-sort';\nimport { isDenseMatrix, isSparseMatrix, typeOf } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'compareNatural';\nvar dependencies = ['typed', 'compare'];\nexport var createCompareNatural = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    compare\n  } = _ref;\n  var compareBooleans = compare.signatures['boolean,boolean'];\n  /**\n   * Compare two values of any type in a deterministic, natural way.\n   *\n   * For numeric values, the function works the same as `math.compare`.\n   * For types of values that can't be compared mathematically,\n   * the function compares in a natural way.\n   *\n   * For numeric values, x and y are considered equal when the relative\n   * difference between x and y is smaller than the configured epsilon.\n   * The function cannot be used to compare values smaller than\n   * approximately 2.22e-16.\n   *\n   * For Complex numbers, first the real parts are compared. If equal,\n   * the imaginary parts are compared.\n   *\n   * Strings are compared with a natural sorting algorithm, which\n   * orders strings in a \"logic\" way following some heuristics.\n   * This differs from the function `compare`, which converts the string\n   * into a numeric value and compares that. The function `compareText`\n   * on the other hand compares text lexically.\n   *\n   * Arrays and Matrices are compared value by value until there is an\n   * unequal pair of values encountered. Objects are compared by sorted\n   * keys until the keys or their values are unequal.\n   *\n   * Syntax:\n   *\n   *    math.compareNatural(x, y)\n   *\n   * Examples:\n   *\n   *    math.compareNatural(6, 1)              // returns 1\n   *    math.compareNatural(2, 3)              // returns -1\n   *    math.compareNatural(7, 7)              // returns 0\n   *\n   *    math.compareNatural('10', '2')         // returns 1\n   *    math.compareText('10', '2')            // returns -1\n   *    math.compare('10', '2')                // returns 1\n   *\n   *    math.compareNatural('Answer: 10', 'Answer: 2') // returns 1\n   *    math.compareText('Answer: 10', 'Answer: 2')    // returns -1\n   *    math.compare('Answer: 10', 'Answer: 2')\n   *        // Error: Cannot convert \"Answer: 10\" to a number\n   *\n   *    const a = math.unit('5 cm')\n   *    const b = math.unit('40 mm')\n   *    math.compareNatural(a, b)              // returns 1\n   *\n   *    const c = math.complex('2 + 3i')\n   *    const d = math.complex('2 + 4i')\n   *    math.compareNatural(c, d)              // returns -1\n   *\n   *    math.compareNatural([1, 2, 4], [1, 2, 3]) // returns 1\n   *    math.compareNatural([1, 2, 3], [1, 2])    // returns 1\n   *    math.compareNatural([1, 5], [1, 2, 3])    // returns 1\n   *    math.compareNatural([1, 2], [1, 2])       // returns 0\n   *\n   *    math.compareNatural({a: 2}, {a: 4})       // returns -1\n   *\n   * See also:\n   *\n   *    compare, compareText\n   *\n   * @param  {*} x First value to compare\n   * @param  {*} y Second value to compare\n   * @return {number} Returns the result of the comparison:\n   *                  1 when x > y, -1 when x < y, and 0 when x == y.\n   */\n\n  return typed(name, {\n    'any, any': function anyAny(x, y) {\n      var typeX = typeOf(x);\n      var typeY = typeOf(y);\n      var c; // numeric types\n\n      if ((typeX === 'number' || typeX === 'BigNumber' || typeX === 'Fraction') && (typeY === 'number' || typeY === 'BigNumber' || typeY === 'Fraction')) {\n        c = compare(x, y);\n\n        if (c.toString() !== '0') {\n          // c can be number, BigNumber, or Fraction\n          return c > 0 ? 1 : -1; // return a number\n        } else {\n          return naturalSort(typeX, typeY);\n        }\n      } // matrix types\n\n\n      if (typeX === 'Array' || typeX === 'Matrix' || typeY === 'Array' || typeY === 'Matrix') {\n        c = compareMatricesAndArrays(this, x, y);\n\n        if (c !== 0) {\n          return c;\n        } else {\n          return naturalSort(typeX, typeY);\n        }\n      } // in case of different types, order by name of type, i.e. 'BigNumber' < 'Complex'\n\n\n      if (typeX !== typeY) {\n        return naturalSort(typeX, typeY);\n      }\n\n      if (typeX === 'Complex') {\n        return compareComplexNumbers(x, y);\n      }\n\n      if (typeX === 'Unit') {\n        if (x.equalBase(y)) {\n          return this(x.value, y.value);\n        } // compare by units\n\n\n        return compareArrays(this, x.formatUnits(), y.formatUnits());\n      }\n\n      if (typeX === 'boolean') {\n        return compareBooleans(x, y);\n      }\n\n      if (typeX === 'string') {\n        return naturalSort(x, y);\n      }\n\n      if (typeX === 'Object') {\n        return compareObjects(this, x, y);\n      }\n\n      if (typeX === 'null') {\n        return 0;\n      }\n\n      if (typeX === 'undefined') {\n        return 0;\n      } // this should not occur...\n\n\n      throw new TypeError('Unsupported type of value \"' + typeX + '\"');\n    }\n  });\n  /**\n   * Compare mixed matrix/array types, by converting to same-shaped array.\n   * This comparator is non-deterministic regarding input types.\n   * @param {Array | SparseMatrix | DenseMatrix | *} x\n   * @param {Array | SparseMatrix | DenseMatrix | *} y\n   * @returns {number} Returns the comparison result: -1, 0, or 1\n   */\n\n  function compareMatricesAndArrays(compareNatural, x, y) {\n    if (isSparseMatrix(x) && isSparseMatrix(y)) {\n      return compareArrays(compareNatural, x.toJSON().values, y.toJSON().values);\n    }\n\n    if (isSparseMatrix(x)) {\n      // note: convert to array is expensive\n      return compareMatricesAndArrays(compareNatural, x.toArray(), y);\n    }\n\n    if (isSparseMatrix(y)) {\n      // note: convert to array is expensive\n      return compareMatricesAndArrays(compareNatural, x, y.toArray());\n    } // convert DenseArray into Array\n\n\n    if (isDenseMatrix(x)) {\n      return compareMatricesAndArrays(compareNatural, x.toJSON().data, y);\n    }\n\n    if (isDenseMatrix(y)) {\n      return compareMatricesAndArrays(compareNatural, x, y.toJSON().data);\n    } // convert scalars to array\n\n\n    if (!Array.isArray(x)) {\n      return compareMatricesAndArrays(compareNatural, [x], y);\n    }\n\n    if (!Array.isArray(y)) {\n      return compareMatricesAndArrays(compareNatural, x, [y]);\n    }\n\n    return compareArrays(compareNatural, x, y);\n  }\n  /**\n   * Compare two Arrays\n   *\n   * - First, compares value by value\n   * - Next, if all corresponding values are equal,\n   *   look at the length: longest array will be considered largest\n   *\n   * @param {Array} x\n   * @param {Array} y\n   * @returns {number} Returns the comparison result: -1, 0, or 1\n   */\n\n\n  function compareArrays(compareNatural, x, y) {\n    // compare each value\n    for (var i = 0, ii = Math.min(x.length, y.length); i < ii; i++) {\n      var v = compareNatural(x[i], y[i]);\n\n      if (v !== 0) {\n        return v;\n      }\n    } // compare the size of the arrays\n\n\n    if (x.length > y.length) {\n      return 1;\n    }\n\n    if (x.length < y.length) {\n      return -1;\n    } // both Arrays have equal size and content\n\n\n    return 0;\n  }\n  /**\n   * Compare two objects\n   *\n   * - First, compare sorted property names\n   * - Next, compare the property values\n   *\n   * @param {Object} x\n   * @param {Object} y\n   * @returns {number} Returns the comparison result: -1, 0, or 1\n   */\n\n\n  function compareObjects(compareNatural, x, y) {\n    var keysX = Object.keys(x);\n    var keysY = Object.keys(y); // compare keys\n\n    keysX.sort(naturalSort);\n    keysY.sort(naturalSort);\n    var c = compareArrays(compareNatural, keysX, keysY);\n\n    if (c !== 0) {\n      return c;\n    } // compare values\n\n\n    for (var i = 0; i < keysX.length; i++) {\n      var v = compareNatural(x[keysX[i]], y[keysY[i]]);\n\n      if (v !== 0) {\n        return v;\n      }\n    }\n\n    return 0;\n  }\n});\n/**\n * Compare two complex numbers, `x` and `y`:\n *\n * - First, compare the real values of `x` and `y`\n * - If equal, compare the imaginary values of `x` and `y`\n *\n * @params {Complex} x\n * @params {Complex} y\n * @returns {number} Returns the comparison result: -1, 0, or 1\n */\n\nfunction compareComplexNumbers(x, y) {\n  if (x.re > y.re) {\n    return 1;\n  }\n\n  if (x.re < y.re) {\n    return -1;\n  }\n\n  if (x.im > y.im) {\n    return 1;\n  }\n\n  if (x.im < y.im) {\n    return -1;\n  }\n\n  return 0;\n}","map":{"version":3,"sources":["/Users/elimunn/Desktop/plot-recipes/node_modules/mathjs/lib/esm/function/relational/compareNatural.js"],"names":["naturalSort","isDenseMatrix","isSparseMatrix","typeOf","factory","name","dependencies","createCompareNatural","_ref","typed","compare","compareBooleans","signatures","anyAny","x","y","typeX","typeY","c","toString","compareMatricesAndArrays","compareComplexNumbers","equalBase","value","compareArrays","formatUnits","compareObjects","TypeError","compareNatural","toJSON","values","toArray","data","Array","isArray","i","ii","Math","min","length","v","keysX","Object","keys","keysY","sort","re","im"],"mappings":"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","sourcesContent":["import naturalSort from 'javascript-natural-sort';\nimport { isDenseMatrix, isSparseMatrix, typeOf } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'compareNatural';\nvar dependencies = ['typed', 'compare'];\nexport var createCompareNatural = /* #__PURE__ */factory(name, dependencies, (_ref) => {\n  var {\n    typed,\n    compare\n  } = _ref;\n  var compareBooleans = compare.signatures['boolean,boolean'];\n  /**\n   * Compare two values of any type in a deterministic, natural way.\n   *\n   * For numeric values, the function works the same as `math.compare`.\n   * For types of values that can't be compared mathematically,\n   * the function compares in a natural way.\n   *\n   * For numeric values, x and y are considered equal when the relative\n   * difference between x and y is smaller than the configured epsilon.\n   * The function cannot be used to compare values smaller than\n   * approximately 2.22e-16.\n   *\n   * For Complex numbers, first the real parts are compared. If equal,\n   * the imaginary parts are compared.\n   *\n   * Strings are compared with a natural sorting algorithm, which\n   * orders strings in a \"logic\" way following some heuristics.\n   * This differs from the function `compare`, which converts the string\n   * into a numeric value and compares that. The function `compareText`\n   * on the other hand compares text lexically.\n   *\n   * Arrays and Matrices are compared value by value until there is an\n   * unequal pair of values encountered. Objects are compared by sorted\n   * keys until the keys or their values are unequal.\n   *\n   * Syntax:\n   *\n   *    math.compareNatural(x, y)\n   *\n   * Examples:\n   *\n   *    math.compareNatural(6, 1)              // returns 1\n   *    math.compareNatural(2, 3)              // returns -1\n   *    math.compareNatural(7, 7)              // returns 0\n   *\n   *    math.compareNatural('10', '2')         // returns 1\n   *    math.compareText('10', '2')            // returns -1\n   *    math.compare('10', '2')                // returns 1\n   *\n   *    math.compareNatural('Answer: 10', 'Answer: 2') // returns 1\n   *    math.compareText('Answer: 10', 'Answer: 2')    // returns -1\n   *    math.compare('Answer: 10', 'Answer: 2')\n   *        // Error: Cannot convert \"Answer: 10\" to a number\n   *\n   *    const a = math.unit('5 cm')\n   *    const b = math.unit('40 mm')\n   *    math.compareNatural(a, b)              // returns 1\n   *\n   *    const c = math.complex('2 + 3i')\n   *    const d = math.complex('2 + 4i')\n   *    math.compareNatural(c, d)              // returns -1\n   *\n   *    math.compareNatural([1, 2, 4], [1, 2, 3]) // returns 1\n   *    math.compareNatural([1, 2, 3], [1, 2])    // returns 1\n   *    math.compareNatural([1, 5], [1, 2, 3])    // returns 1\n   *    math.compareNatural([1, 2], [1, 2])       // returns 0\n   *\n   *    math.compareNatural({a: 2}, {a: 4})       // returns -1\n   *\n   * See also:\n   *\n   *    compare, compareText\n   *\n   * @param  {*} x First value to compare\n   * @param  {*} y Second value to compare\n   * @return {number} Returns the result of the comparison:\n   *                  1 when x > y, -1 when x < y, and 0 when x == y.\n   */\n\n  return typed(name, {\n    'any, any': function anyAny(x, y) {\n      var typeX = typeOf(x);\n      var typeY = typeOf(y);\n      var c; // numeric types\n\n      if ((typeX === 'number' || typeX === 'BigNumber' || typeX === 'Fraction') && (typeY === 'number' || typeY === 'BigNumber' || typeY === 'Fraction')) {\n        c = compare(x, y);\n\n        if (c.toString() !== '0') {\n          // c can be number, BigNumber, or Fraction\n          return c > 0 ? 1 : -1; // return a number\n        } else {\n          return naturalSort(typeX, typeY);\n        }\n      } // matrix types\n\n\n      if (typeX === 'Array' || typeX === 'Matrix' || typeY === 'Array' || typeY === 'Matrix') {\n        c = compareMatricesAndArrays(this, x, y);\n\n        if (c !== 0) {\n          return c;\n        } else {\n          return naturalSort(typeX, typeY);\n        }\n      } // in case of different types, order by name of type, i.e. 'BigNumber' < 'Complex'\n\n\n      if (typeX !== typeY) {\n        return naturalSort(typeX, typeY);\n      }\n\n      if (typeX === 'Complex') {\n        return compareComplexNumbers(x, y);\n      }\n\n      if (typeX === 'Unit') {\n        if (x.equalBase(y)) {\n          return this(x.value, y.value);\n        } // compare by units\n\n\n        return compareArrays(this, x.formatUnits(), y.formatUnits());\n      }\n\n      if (typeX === 'boolean') {\n        return compareBooleans(x, y);\n      }\n\n      if (typeX === 'string') {\n        return naturalSort(x, y);\n      }\n\n      if (typeX === 'Object') {\n        return compareObjects(this, x, y);\n      }\n\n      if (typeX === 'null') {\n        return 0;\n      }\n\n      if (typeX === 'undefined') {\n        return 0;\n      } // this should not occur...\n\n\n      throw new TypeError('Unsupported type of value \"' + typeX + '\"');\n    }\n  });\n  /**\n   * Compare mixed matrix/array types, by converting to same-shaped array.\n   * This comparator is non-deterministic regarding input types.\n   * @param {Array | SparseMatrix | DenseMatrix | *} x\n   * @param {Array | SparseMatrix | DenseMatrix | *} y\n   * @returns {number} Returns the comparison result: -1, 0, or 1\n   */\n\n  function compareMatricesAndArrays(compareNatural, x, y) {\n    if (isSparseMatrix(x) && isSparseMatrix(y)) {\n      return compareArrays(compareNatural, x.toJSON().values, y.toJSON().values);\n    }\n\n    if (isSparseMatrix(x)) {\n      // note: convert to array is expensive\n      return compareMatricesAndArrays(compareNatural, x.toArray(), y);\n    }\n\n    if (isSparseMatrix(y)) {\n      // note: convert to array is expensive\n      return compareMatricesAndArrays(compareNatural, x, y.toArray());\n    } // convert DenseArray into Array\n\n\n    if (isDenseMatrix(x)) {\n      return compareMatricesAndArrays(compareNatural, x.toJSON().data, y);\n    }\n\n    if (isDenseMatrix(y)) {\n      return compareMatricesAndArrays(compareNatural, x, y.toJSON().data);\n    } // convert scalars to array\n\n\n    if (!Array.isArray(x)) {\n      return compareMatricesAndArrays(compareNatural, [x], y);\n    }\n\n    if (!Array.isArray(y)) {\n      return compareMatricesAndArrays(compareNatural, x, [y]);\n    }\n\n    return compareArrays(compareNatural, x, y);\n  }\n  /**\n   * Compare two Arrays\n   *\n   * - First, compares value by value\n   * - Next, if all corresponding values are equal,\n   *   look at the length: longest array will be considered largest\n   *\n   * @param {Array} x\n   * @param {Array} y\n   * @returns {number} Returns the comparison result: -1, 0, or 1\n   */\n\n\n  function compareArrays(compareNatural, x, y) {\n    // compare each value\n    for (var i = 0, ii = Math.min(x.length, y.length); i < ii; i++) {\n      var v = compareNatural(x[i], y[i]);\n\n      if (v !== 0) {\n        return v;\n      }\n    } // compare the size of the arrays\n\n\n    if (x.length > y.length) {\n      return 1;\n    }\n\n    if (x.length < y.length) {\n      return -1;\n    } // both Arrays have equal size and content\n\n\n    return 0;\n  }\n  /**\n   * Compare two objects\n   *\n   * - First, compare sorted property names\n   * - Next, compare the property values\n   *\n   * @param {Object} x\n   * @param {Object} y\n   * @returns {number} Returns the comparison result: -1, 0, or 1\n   */\n\n\n  function compareObjects(compareNatural, x, y) {\n    var keysX = Object.keys(x);\n    var keysY = Object.keys(y); // compare keys\n\n    keysX.sort(naturalSort);\n    keysY.sort(naturalSort);\n    var c = compareArrays(compareNatural, keysX, keysY);\n\n    if (c !== 0) {\n      return c;\n    } // compare values\n\n\n    for (var i = 0; i < keysX.length; i++) {\n      var v = compareNatural(x[keysX[i]], y[keysY[i]]);\n\n      if (v !== 0) {\n        return v;\n      }\n    }\n\n    return 0;\n  }\n});\n/**\n * Compare two complex numbers, `x` and `y`:\n *\n * - First, compare the real values of `x` and `y`\n * - If equal, compare the imaginary values of `x` and `y`\n *\n * @params {Complex} x\n * @params {Complex} y\n * @returns {number} Returns the comparison result: -1, 0, or 1\n */\n\nfunction compareComplexNumbers(x, y) {\n  if (x.re > y.re) {\n    return 1;\n  }\n\n  if (x.re < y.re) {\n    return -1;\n  }\n\n  if (x.im > y.im) {\n    return 1;\n  }\n\n  if (x.im < y.im) {\n    return -1;\n  }\n\n  return 0;\n}"]},"metadata":{},"sourceType":"module"}