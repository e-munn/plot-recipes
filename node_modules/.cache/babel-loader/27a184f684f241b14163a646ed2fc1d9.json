{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/elimunn/Desktop/plot-recipes/site/src/components/plot/plot.js\";\nimport React, { useRef } from 'react';\nimport { select, max, sum, hierarchy, linkHorizontal, each, tree } from 'd3';\nimport { scaleLinear } from 'd3-scale';\nimport Vessels from './vessels/vessels.js';\n\nconst Plot = ({\n  recipe,\n  width,\n  height,\n  color,\n  dim\n}) => {\n  const canvasWidth = width - 2 * dim.main.padding;\n  const canvasHeight = height - 2 * dim.main.padding; //\n  // var root2 = hierarchy(recipe);\n  // console.log(root2)\n\n  var root = hierarchy(recipe.recipe[0]);\n  const testTree = tree().size([300, 600])(root);\n\n  const desc = a => a.descendants();\n\n  root.each((d, i) => {\n    d.order = i;\n  });\n  root.count();\n  root.each(d => {\n    d.vesselSibs = d.parent ? d.parent.children.filter(a => \"vessel\" in a.data) : 'none';\n  });\n  root.each(function (d, i) {\n    if (d.depth == 0) {\n      console.log(i);\n      d.pHeight = 40;\n    } else if ('vessel' in d.data) {\n      d.pHeight = d.children.filter(a => !(\"vessel\" in a.data)).length * 20;\n    }\n  });\n  root.each(function (d) {\n    if (d.depth == 0) {\n      d.posY = 1000;\n      d.posX = 100;\n    } else if ('vessel' in d.data) {\n      var posYAdd = [];\n      var descend = desc(d);\n      descend.shift();\n      descend.forEach(a => 'vessel' in a.data ? posYAdd.push(a.pHeight) : null); // d.vesselSibs.forEach(b => (d.data.order < b.data.order) ? posYAdd.push(b.pHeight) : null)\n\n      posYAdd.push(posYAdd.length * dim.vessel.shape.marginHeight);\n      d.posY = d.data.vorder * 20;\n      d.posX = 10;\n    }\n  });\n  var allTest = testTree.descendants();\n  const tests = [];\n  allTest.forEach((a, i) => {\n    tests.push( /*#__PURE__*/_jsxDEV(\"text\", {\n      x: a.x,\n      y: a.y,\n      fill: 'black',\n      children: [a.order, a.data.vessel]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this));\n  }); //////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n  var allVessels = root.descendants().filter(d => 'vessel' in d.data); // descends = descends.filter(d => (d.depth !== 0))\n\n  var flows = [];\n  allVessels.forEach((a, i) => {\n    const vessel = [];\n    vessel.push( /*#__PURE__*/_jsxDEV(Vessels, {\n      a: a,\n      i: i,\n      dim: dim,\n      color: color\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this));\n    flows.push( /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: vessel\n    }, void 0, false));\n  });\n  return /*#__PURE__*/_jsxDEV(\"g\", {\n    transform: `translate(${0}, ${100})`,\n    children: flows\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 7\n  }, this);\n};\n\n_c = Plot;\nexport default Plot;\n\nvar _c;\n\n$RefreshReg$(_c, \"Plot\");","map":{"version":3,"sources":["/Users/elimunn/Desktop/plot-recipes/site/src/components/plot/plot.js"],"names":["React","useRef","select","max","sum","hierarchy","linkHorizontal","each","tree","scaleLinear","Vessels","Plot","recipe","width","height","color","dim","canvasWidth","main","padding","canvasHeight","root","testTree","size","desc","a","descendants","d","i","order","count","vesselSibs","parent","children","filter","data","depth","console","log","pHeight","length","posY","posX","posYAdd","descend","shift","forEach","push","vessel","shape","marginHeight","vorder","allTest","tests","x","y","allVessels","flows"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,QAA8B,OAA9B;AACA,SAASC,MAAT,EAAiBC,GAAjB,EAAsBC,GAAtB,EAA4BC,SAA5B,EAAuCC,cAAvC,EAAuDC,IAAvD,EAA6DC,IAA7D,QAAyE,IAAzE;AACA,SAASC,WAAT,QAA4B,UAA5B;AACA,OAAOC,OAAP,MAAoB,sBAApB;;AAIA,MAAMC,IAAI,GAAG,CAAC;AAACC,EAAAA,MAAD;AAASC,EAAAA,KAAT;AAAgBC,EAAAA,MAAhB;AAAwBC,EAAAA,KAAxB;AAA+BC,EAAAA;AAA/B,CAAD,KAAyC;AAEpD,QAAMC,WAAW,GAAGJ,KAAK,GAAG,IAAEG,GAAG,CAACE,IAAJ,CAASC,OAAvC;AACA,QAAMC,YAAY,GAAGN,MAAM,GAAG,IAAEE,GAAG,CAACE,IAAJ,CAASC,OAAzC,CAHoD,CAIpD;AACA;AACA;;AAGA,MAAIE,IAAI,GAAGhB,SAAS,CAACO,MAAM,CAACA,MAAP,CAAc,CAAd,CAAD,CAApB;AAEA,QAAMU,QAAQ,GAAGd,IAAI,GAAGe,IAAP,CAAY,CAAC,GAAD,EAAM,GAAN,CAAZ,EAAwBF,IAAxB,CAAjB;;AAIA,QAAMG,IAAI,GAAIC,CAAD,IAAOA,CAAC,CAACC,WAAF,EAApB;;AACAL,EAAAA,IAAI,CAACd,IAAL,CAAU,CAACoB,CAAD,EAAIC,CAAJ,KAAU;AAAED,IAAAA,CAAC,CAACE,KAAF,GAAUD,CAAV;AAAa,GAAnC;AAEAP,EAAAA,IAAI,CAACS,KAAL;AACAT,EAAAA,IAAI,CAACd,IAAL,CAAUoB,CAAC,IAAI;AAAEA,IAAAA,CAAC,CAACI,UAAF,GAAgBJ,CAAC,CAACK,MAAF,GAAWL,CAAC,CAACK,MAAF,CAASC,QAAT,CAAkBC,MAAlB,CAAyBT,CAAC,IAAK,YAAYA,CAAC,CAACU,IAA7C,CAAX,GAAiE,MAAjF;AAA0F,GAA3G;AAIAd,EAAAA,IAAI,CAACd,IAAL,CACE,UAASoB,CAAT,EAAYC,CAAZ,EAAc;AACZ,QAAID,CAAC,CAACS,KAAF,IAAW,CAAf,EAAiB;AACfC,MAAAA,OAAO,CAACC,GAAR,CAAYV,CAAZ;AACAD,MAAAA,CAAC,CAACY,OAAF,GAAY,EAAZ;AACD,KAHD,MAIK,IAAI,YAAYZ,CAAC,CAACQ,IAAlB,EAAuB;AAC1BR,MAAAA,CAAC,CAACY,OAAF,GAAaZ,CAAC,CAACM,QAAF,CAAWC,MAAX,CAAkBT,CAAC,IAAI,EAAE,YAAYA,CAAC,CAACU,IAAhB,CAAvB,EAA8CK,MAA/C,GAAyD,EAArE;AACD;AACF,GATH;AAcAnB,EAAAA,IAAI,CAACd,IAAL,CAAU,UAASoB,CAAT,EAAW;AACnB,QAAIA,CAAC,CAACS,KAAF,IAAW,CAAf,EAAiB;AACfT,MAAAA,CAAC,CAACc,IAAF,GAAS,IAAT;AACAd,MAAAA,CAAC,CAACe,IAAF,GAAS,GAAT;AAED,KAJD,MAKK,IAAI,YAAYf,CAAC,CAACQ,IAAlB,EAAwB;AAC3B,UAAIQ,OAAO,GAAG,EAAd;AACA,UAAIC,OAAO,GAAGpB,IAAI,CAACG,CAAD,CAAlB;AACAiB,MAAAA,OAAO,CAACC,KAAR;AACAD,MAAAA,OAAO,CAACE,OAAR,CAAgBrB,CAAC,IAAK,YAAYA,CAAC,CAACU,IAAf,GAAuBQ,OAAO,CAACI,IAAR,CAAatB,CAAC,CAACc,OAAf,CAAvB,GAAiD,IAAtE,EAJ2B,CAK3B;;AACAI,MAAAA,OAAO,CAACI,IAAR,CAAcJ,OAAO,CAACH,MAAT,GAAkBxB,GAAG,CAACgC,MAAJ,CAAWC,KAAX,CAAiBC,YAAhD;AACAvB,MAAAA,CAAC,CAACc,IAAF,GAASd,CAAC,CAACQ,IAAF,CAAOgB,MAAP,GAAc,EAAvB;AACAxB,MAAAA,CAAC,CAACe,IAAF,GAAS,EAAT;AAED;AACF,GAjBD;AAsBA,MAAIU,OAAO,GAAG9B,QAAQ,CAACI,WAAT,EAAd;AAGA,QAAM2B,KAAK,GAAG,EAAd;AACAD,EAAAA,OAAO,CAACN,OAAR,CAAgB,CAACrB,CAAD,EAAIG,CAAJ,KAAU;AACxByB,IAAAA,KAAK,CAACN,IAAN,eACE;AACE,MAAA,CAAC,EAAEtB,CAAC,CAAC6B,CADP;AAEE,MAAA,CAAC,EAAE7B,CAAC,CAAC8B,CAFP;AAGE,MAAA,IAAI,EAAE,OAHR;AAAA,iBAKG9B,CAAC,CAACI,KALL,EAMGJ,CAAC,CAACU,IAAF,CAAOa,MANV;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAaD,GAdD,EA/DoD,CAgFpD;AACA;AACA;;AAEA,MAAIQ,UAAU,GAAGnC,IAAI,CAACK,WAAL,GAAmBQ,MAAnB,CAA0BP,CAAC,IAAG,YAAYA,CAAC,CAACQ,IAA5C,CAAjB,CApFoD,CAqFpD;;AAEA,MAAIsB,KAAK,GAAG,EAAZ;AAEAD,EAAAA,UAAU,CAACV,OAAX,CAAmB,CAACrB,CAAD,EAAGG,CAAH,KAAS;AAC1B,UAAMoB,MAAM,GAAG,EAAf;AACAA,IAAAA,MAAM,CAACD,IAAP,eACE,QAAC,OAAD;AACE,MAAA,CAAC,EAAEtB,CADL;AAEE,MAAA,CAAC,EAAEG,CAFL;AAGE,MAAA,GAAG,EAAEZ,GAHP;AAIE,MAAA,KAAK,EAAED;AAJT;AAAA;AAAA;AAAA;AAAA,YADF;AAWA0C,IAAAA,KAAK,CAACV,IAAN,eACE;AAAA,gBACGC;AADH,qBADF;AAKD,GAlBD;AAqBA,sBACI;AACE,IAAA,SAAS,EAAG,aAAY,CAAE,KAAI,GAAI,GADpC;AAAA,cAIGS;AAJH;AAAA;AAAA;AAAA;AAAA,UADJ;AASD,CAvHD;;KAAM9C,I;AAyHN,eAAeA,IAAf","sourcesContent":["import React, { useRef } from 'react';\nimport { select, max, sum,  hierarchy, linkHorizontal, each, tree } from 'd3';\nimport { scaleLinear } from 'd3-scale';\nimport Vessels from './vessels/vessels.js';\n\n\n\nconst Plot = ({recipe, width, height, color, dim}) => {\n\n  const canvasWidth = width - 2*dim.main.padding;\n  const canvasHeight = height - 2*dim.main.padding;\n  //\n  // var root2 = hierarchy(recipe);\n  // console.log(root2)\n\n\n  var root = hierarchy(recipe.recipe[0]);\n\n  const testTree = tree().size([300, 600])(root)\n\n\n\n  const desc = (a) => a.descendants()\n  root.each((d, i) => { d.order = i })\n\n  root.count()\n  root.each(d => { d.vesselSibs = (d.parent ? d.parent.children.filter(a => (\"vessel\" in a.data)) : 'none' )})\n\n\n\n  root.each(\n    function(d, i){\n      if (d.depth == 0){\n        console.log(i)\n        d.pHeight = 40\n      }\n      else if ('vessel' in d.data){\n        d.pHeight = (d.children.filter(a => !(\"vessel\" in a.data)).length) * 20\n      }\n    }\n  )\n\n\n\n  root.each(function(d){\n    if (d.depth == 0){\n      d.posY = 1000\n      d.posX = 100\n\n    }\n    else if ('vessel' in d.data) {\n      var posYAdd = []\n      var descend = desc(d)\n      descend.shift()\n      descend.forEach(a => ('vessel' in a.data) ? posYAdd.push(a.pHeight) : null)\n      // d.vesselSibs.forEach(b => (d.data.order < b.data.order) ? posYAdd.push(b.pHeight) : null)\n      posYAdd.push((posYAdd.length)*(dim.vessel.shape.marginHeight))\n      d.posY = d.data.vorder*20\n      d.posX = 10\n\n    }\n  })\n\n\n\n\n  var allTest = testTree.descendants()\n\n\n  const tests = []\n  allTest.forEach((a, i) => {\n    tests.push(\n      <text\n        x={a.x}\n        y={a.y}\n        fill={'black'}\n      >\n        {a.order}\n        {a.data.vessel}\n\n    </text>\n    )\n\n\n  })\n\n\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n  var allVessels = root.descendants().filter(d =>'vessel' in d.data)\n  // descends = descends.filter(d => (d.depth !== 0))\n\n  var flows = []\n\n  allVessels.forEach((a,i) => {\n    const vessel = []\n    vessel.push(\n      <Vessels\n        a={a}\n        i={i}\n        dim={dim}\n        color={color}\n      />\n    )\n\n\n\n    flows.push(\n      <>\n        {vessel}\n      </>\n    )\n  })\n\n\n  return (\n      <g\n        transform={`translate(${0}, ${100})`}\n        >\n        {/* {tests} */}\n        {flows}\n\n      </g>\n  );\n};\n\nexport default Plot;\n"]},"metadata":{},"sourceType":"module"}