{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/elimunn/Desktop/plot-recipes/site/src/components/plot/plot.js\";\nimport React, { useRef } from 'react';\nimport { select, max, sum, hierarchy, linkHorizontal, each, tree, min } from 'd3';\nimport { scaleLinear } from 'd3-scale';\nimport Vessel from './vessels/vessels.js';\nimport IngredientNode from './ingredients/ingredientNode.js';\nimport Action from './actions/actions.js';\n\nconst Plot = ({\n  recipe,\n  width,\n  height,\n  color,\n  dim\n}) => {\n  var root = hierarchy(recipe.recipe[0]);\n  root.each(function (d, i) {\n    if (d.depth == 0) {} else if ('vessel' in d.data) {\n      d.actions = d.children.filter(a => \"action\" in a.data).map(b => b.data.action_amt);\n      d.numIng = d.children.filter(a => \"ingredient\" in a.data).length;\n      d.numShove = d.parent.children.filter(a => \"vessel\" in a.data).filter(a => d.data.vorder > a.data.vorder).length;\n    }\n  });\n  var pY = 0;\n  var pH = 0;\n  var pYMax = 0;\n  root.each(function (d) {\n    if ('vessel' in d.data) {\n      if (d.depth == 0) {\n        pY += pH;\n        d.data.pH = pH;\n        d.data.pY = pY;\n      } else {\n        pH = dim.v.padding;\n        pH += sum(d.actions) * dim.a.amtScale + (d.numIng + d.actions.length) * dim.i.height;\n        pY = d.parent.data.pY + dim.v.gap;\n        pY += pH;\n        d.data.pY = pY;\n        d.data.pH = pH;\n\n        if (pY > pYMax) {\n          pYMax = pY;\n        }\n      }\n    }\n  });\n  pY = 0;\n  pH = 0;\n  var taskCount = 0;\n  root.eachBefore(function (d) {\n    if ('vessel' in d.data) {\n      if (d.depth == 0) {\n        pY = pYMax;\n        pY -= pH;\n        d.data.pH = pH;\n        d.data.pY = pYMax;\n      } else {\n        pH = dim.v.padding;\n        pH += sum(d.actions) * dim.a.amtScale + (d.numIng + d.actions.length) * dim.i.height;\n        pY = d.parent.data.pY - dim.v.gap;\n        pY -= pH;\n        d.data.pY = pY;\n        d.data.pH = pH;\n      }\n    }\n  });\n  pY = 0;\n  pH = 0;\n  var taskCount = 0;\n  root.eachAfter(function (d) {\n    if ('vessel' in d.data) {\n      taskCount = 0;\n    } else if ('action' in d.data) {\n      taskCount += dim.i.height;\n      pY = d.parent.data.pY;\n      d.data.pY = pY + taskCount;\n      taskCount += d.data.action_amt * dim.a.amtScale;\n    } else if ('ingredient' in d.data) {\n      pY = d.parent.data.pY;\n      taskCount += dim.i.height;\n      d.data.pY = pY + taskCount;\n    }\n  });\n\n  const getLeafY = a => {\n    var leaves = a.leaves();\n    leaves = leaves.map(b => b.data.pY);\n    return min(leaves);\n  };\n\n  var pX = dim.m.margin.left;\n  root.each(function (d) {\n    if ('vessel' in d.data) {\n      if (d.depth == 0) {\n        d.data.pX = pX;\n      } else {\n        pX = d.parent.data.pX;\n        var vesselSibs = d.parent.children.filter(a => \"vessel\" in a.data);\n        var numLess = vesselSibs.filter(b => getLeafY(b) < getLeafY(d)).length;\n        pX += numLess * dim.v.shove;\n        d.data.pX = pX;\n      }\n    } else {\n      if ('action' in d.data) {\n        pX = d.parent.data.pX;\n        d.data.pX = pX;\n      } else if ('ingredient' in d.data) {\n        pX = d.parent.data.pX;\n        d.data.pX = pX;\n      }\n    }\n  });\n  var allVessels = root.descendants().filter(d => 'vessel' in d.data); //////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n  var flows = [];\n  allVessels.forEach((a, i) => {\n    const vessel = [];\n    vessel.push( /*#__PURE__*/_jsxDEV(Vessel, {\n      a: a,\n      i: i,\n      dim: dim,\n      color: color\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this));\n    const ingredientNodes = [];\n    a.children.forEach((b, j) => {\n      if ('ingredient' in b.data) {\n        ingredientNodes.push( /*#__PURE__*/_jsxDEV(IngredientNode, {\n          color: color,\n          dim: dim,\n          a: a,\n          b: b,\n          j: j\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 11\n        }, this));\n      }\n    });\n    const actionNodes = [];\n    a.children.forEach((b, j) => {\n      if ('action' in b.data) {\n        actionNodes.push( /*#__PURE__*/_jsxDEV(Action, {\n          color: color,\n          dim: dim,\n          a: a,\n          b: b,\n          j: j\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 11\n        }, this));\n      }\n    });\n    flows.push( /*#__PURE__*/_jsxDEV(\"g\", {\n      children: [ingredientNodes, actionNodes, vessel]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }, this));\n  });\n  return /*#__PURE__*/_jsxDEV(\"g\", {\n    transform: `translate(${0}, ${50})`,\n    children: flows\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 184,\n    columnNumber: 7\n  }, this);\n};\n\n_c = Plot;\nexport default Plot;\n\nvar _c;\n\n$RefreshReg$(_c, \"Plot\");","map":{"version":3,"sources":["/Users/elimunn/Desktop/plot-recipes/site/src/components/plot/plot.js"],"names":["React","useRef","select","max","sum","hierarchy","linkHorizontal","each","tree","min","scaleLinear","Vessel","IngredientNode","Action","Plot","recipe","width","height","color","dim","root","d","i","depth","data","actions","children","filter","a","map","b","action_amt","numIng","length","numShove","parent","vorder","pY","pH","pYMax","v","padding","amtScale","gap","taskCount","eachBefore","eachAfter","getLeafY","leaves","pX","m","margin","left","vesselSibs","numLess","shove","allVessels","descendants","flows","forEach","vessel","push","ingredientNodes","j","actionNodes"],"mappings":"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","sourcesContent":["import React, { useRef } from 'react';\nimport { select, max, sum,  hierarchy, linkHorizontal, each, tree, min } from 'd3';\nimport { scaleLinear } from 'd3-scale';\nimport Vessel from './vessels/vessels.js';\nimport IngredientNode from './ingredients/ingredientNode.js';\nimport Action from './actions/actions.js';\n\n\nconst Plot = ({recipe, width, height, color, dim}) => {\n\n  var root = hierarchy(recipe.recipe[0]);\n  root.each(\n    function(d, i){\n      if (d.depth == 0){\n      }\n      else if ('vessel' in d.data){\n        d.actions = d.children.filter(a => (\"action\" in a.data)).map(b => b.data.action_amt)\n        d.numIng = d.children.filter(a => (\"ingredient\" in a.data)).length\n        d.numShove = d.parent.children.filter(a => (\"vessel\" in a.data)).filter(a => (d.data.vorder > a.data.vorder)).length\n      }\n    }\n  )\n\n  var pY = 0\n  var pH = 0\n  var pYMax = 0\n  root.each(\n    function(d){\n      if ('vessel' in d.data) {\n        if (d.depth == 0) {\n          pY += pH\n          d.data.pH = pH\n          d.data.pY = pY\n        } else {\n          pH = dim.v.padding\n          pH += (sum(d.actions) * dim.a.amtScale) + ((d.numIng + d.actions.length) * dim.i.height)\n          pY = d.parent.data.pY + dim.v.gap\n          pY += pH\n          d.data.pY = pY\n          d.data.pH = pH\n          if ((pY) > pYMax){\n            pYMax = pY\n          }\n        }\n      }\n    }\n  )\n\n  pY = 0\n  pH = 0\n  var taskCount = 0\n  root.eachBefore(\n    function(d){\n      if ('vessel' in d.data) {\n        if (d.depth == 0) {\n          pY = pYMax\n          pY -= pH\n          d.data.pH = pH\n          d.data.pY = pYMax\n        } else {\n          pH = dim.v.padding\n          pH += (sum(d.actions) * dim.a.amtScale) + ((d.numIng + d.actions.length) * dim.i.height)\n          pY = d.parent.data.pY - dim.v.gap\n          pY -= pH\n          d.data.pY = pY\n          d.data.pH = pH\n        }\n      }\n    }\n  )\n\n  pY = 0\n  pH = 0\n  var taskCount = 0\n  root.eachAfter(\n    function(d){\n      if ('vessel' in d.data) {\n        taskCount = 0\n      }\n      else if ('action' in d.data) {\n        taskCount += dim.i.height\n        pY = d.parent.data.pY\n        d.data.pY = pY + taskCount\n        taskCount += d.data.action_amt * dim.a.amtScale\n      } else if ('ingredient' in d.data) {\n        pY = d.parent.data.pY\n        taskCount += dim.i.height\n        d.data.pY = pY + taskCount\n      }\n    }\n  )\n\n  const getLeafY = (a) => {\n    var leaves = a.leaves()\n    leaves = leaves.map(b => b.data.pY)\n    return min(leaves)\n  }\n\n  var pX = dim.m.margin.left\n  root.each(\n    function(d){\n      if ('vessel' in d.data) {\n        if (d.depth == 0) {\n          d.data.pX = pX\n        } else {\n          pX = d.parent.data.pX\n          var vesselSibs = d.parent.children.filter(a => (\"vessel\" in a.data))\n          var numLess = vesselSibs.filter(b => (getLeafY(b) < getLeafY(d)) ).length\n          pX += numLess * dim.v.shove\n          d.data.pX = pX\n        }\n      } else {\n        if ('action' in d.data){\n          pX = d.parent.data.pX\n          d.data.pX = pX\n        } else if ('ingredient' in d.data){\n          pX = d.parent.data.pX\n          d.data.pX = pX\n        }\n      }\n    })\n\n  var allVessels = root.descendants().filter(d => ('vessel' in d.data))\n\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n  var flows = []\n\n  allVessels.forEach((a,i) => {\n\n    const vessel = []\n    vessel.push(\n      <Vessel\n        a={a}\n        i={i}\n        dim={dim}\n        color={color}\n      />\n    )\n\n    const ingredientNodes = []\n\n    a.children.forEach((b,j) => {\n      if ('ingredient' in b.data) {\n        ingredientNodes.push(\n          <IngredientNode\n            color={color}\n            dim={dim}\n            a={a}\n            b={b}\n            j={j}\n          />)\n        }\n      })\n\n    const actionNodes = []\n\n    a.children.forEach((b,j) => {\n      if ('action' in b.data) {\n        actionNodes.push(\n          <Action\n            color={color}\n            dim={dim}\n            a={a}\n            b={b}\n            j={j}\n          />)\n        }\n      })\n\n    flows.push(\n      <g>\n        {ingredientNodes}\n        {actionNodes}\n        {vessel}\n      </g>\n    )\n  })\n\n\n  return (\n      <g transform={`translate(${0}, ${50})`}>\n        {flows}\n      </g>\n  );\n};\n\nexport default Plot;\n"]},"metadata":{},"sourceType":"module"}