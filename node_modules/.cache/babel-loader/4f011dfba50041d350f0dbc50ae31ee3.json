{"ast":null,"code":"import { isBigNumber } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'rotationMatrix';\nvar dependencies = ['typed', 'config', 'multiplyScalar', 'addScalar', 'unaryMinus', 'norm', 'matrix', 'BigNumber', 'DenseMatrix', 'SparseMatrix', 'cos', 'sin'];\nexport var createRotationMatrix = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    multiplyScalar,\n    addScalar,\n    unaryMinus,\n    norm,\n    BigNumber,\n    matrix,\n    DenseMatrix,\n    SparseMatrix,\n    cos,\n    sin\n  } = _ref;\n  /**\n   * Create a 2-dimensional counter-clockwise rotation matrix (2x2) for a given angle (expressed in radians).\n   * Create a 2-dimensional counter-clockwise rotation matrix (3x3) by a given angle (expressed in radians) around a given axis (1x3).\n   *\n   * Syntax:\n   *\n   *    math.rotationMatrix(theta)\n   *    math.rotationMatrix(theta, format)\n   *    math.rotationMatrix(theta, [v])\n   *    math.rotationMatrix(theta, [v], format)\n   *\n   * Examples:\n   *\n   *    math.rotationMatrix(math.pi / 2)                      // returns [[0, -1], [1, 0]]\n   *    math.rotationMatrix(math.bignumber(1))                // returns [[bignumber(cos(1)), bignumber(-sin(1))], [bignumber(sin(1)), bignumber(cos(1))]]\n   *    math.rotationMatrix(math.complex(1 + i))              // returns [[cos(1 + i), -sin(1 + i)], [sin(1 + i), cos(1 + i)]]\n   *    math.rotationMatrix(math.unit('1rad'))                // returns [[cos(1), -sin(1)], [sin(1), cos(1)]]\n   *\n   *    math.rotationMatrix(math.pi / 2, [0, 1, 0])           // returns [[0, 0, 1], [0, 1, 0], [-1, 0, 0]]\n   *    math.rotationMatrix(math.pi / 2, matrix([0, 1, 0]))   // returns matrix([[0, 0, 1], [0, 1, 0], [-1, 0, 0]])\n   *\n   *\n   * See also:\n   *\n   *    matrix, cos, sin\n   *\n   *\n   * @param {number | BigNumber | Complex | Unit} theta    Rotation angle\n   * @param {Array | Matrix} [v]                           Rotation axis\n   * @param {string} [format]                              Result Matrix storage format\n   * @return {Array | Matrix}                              Rotation matrix\n   */\n\n  return typed(name, {\n    '': function _() {\n      return config.matrix === 'Matrix' ? matrix([]) : [];\n    },\n    string: function string(format) {\n      return matrix(format);\n    },\n    'number | BigNumber | Complex | Unit': function numberBigNumberComplexUnit(theta) {\n      return _rotationMatrix2x2(theta, config.matrix === 'Matrix' ? 'dense' : undefined);\n    },\n    'number | BigNumber | Complex | Unit, string': function numberBigNumberComplexUnitString(theta, format) {\n      return _rotationMatrix2x2(theta, format);\n    },\n    'number | BigNumber | Complex | Unit, Array': function numberBigNumberComplexUnitArray(theta, v) {\n      var matrixV = matrix(v);\n\n      _validateVector(matrixV);\n\n      return _rotationMatrix3x3(theta, matrixV, undefined);\n    },\n    'number | BigNumber | Complex | Unit, Matrix': function numberBigNumberComplexUnitMatrix(theta, v) {\n      _validateVector(v);\n\n      var storageType = v.storage() || (config.matrix === 'Matrix' ? 'dense' : undefined);\n      return _rotationMatrix3x3(theta, v, storageType);\n    },\n    'number | BigNumber | Complex | Unit, Array, string': function numberBigNumberComplexUnitArrayString(theta, v, format) {\n      var matrixV = matrix(v);\n\n      _validateVector(matrixV);\n\n      return _rotationMatrix3x3(theta, matrixV, format);\n    },\n    'number | BigNumber | Complex | Unit, Matrix, string': function numberBigNumberComplexUnitMatrixString(theta, v, format) {\n      _validateVector(v);\n\n      return _rotationMatrix3x3(theta, v, format);\n    }\n  });\n  /**\n   * Returns 2x2 matrix of 2D rotation of angle theta\n   *\n   * @param {number | BigNumber | Complex | Unit} theta  The rotation angle\n   * @param {string} format                              The result Matrix storage format\n   * @returns {Matrix}\n   * @private\n   */\n\n  function _rotationMatrix2x2(theta, format) {\n    var Big = isBigNumber(theta);\n    var minusOne = Big ? new BigNumber(-1) : -1;\n    var cosTheta = cos(theta);\n    var sinTheta = sin(theta);\n    var data = [[cosTheta, multiplyScalar(minusOne, sinTheta)], [sinTheta, cosTheta]];\n    return _convertToFormat(data, format);\n  }\n\n  function _validateVector(v) {\n    var size = v.size();\n\n    if (size.length < 1 || size[0] !== 3) {\n      throw new RangeError('Vector must be of dimensions 1x3');\n    }\n  }\n\n  function _mul(array) {\n    return array.reduce((p, curr) => multiplyScalar(p, curr));\n  }\n\n  function _convertToFormat(data, format) {\n    if (format) {\n      if (format === 'sparse') {\n        return new SparseMatrix(data);\n      }\n\n      if (format === 'dense') {\n        return new DenseMatrix(data);\n      }\n\n      throw new TypeError(\"Unknown matrix type \\\"\".concat(format, \"\\\"\"));\n    }\n\n    return data;\n  }\n  /**\n   * Returns a 3x3 matrix of rotation of angle theta around vector v\n   *\n   * @param {number | BigNumber | Complex | Unit} theta The rotation angle\n   * @param {Matrix} v                                  The rotation axis vector\n   * @param {string} format                             The storage format of the resulting matrix\n   * @returns {Matrix}\n   * @private\n   */\n\n\n  function _rotationMatrix3x3(theta, v, format) {\n    var normV = norm(v);\n\n    if (normV === 0) {\n      throw new RangeError('Rotation around zero vector');\n    }\n\n    var Big = isBigNumber(theta) ? BigNumber : null;\n    var one = Big ? new Big(1) : 1;\n    var minusOne = Big ? new Big(-1) : -1;\n    var vx = Big ? new Big(v.get([0]) / normV) : v.get([0]) / normV;\n    var vy = Big ? new Big(v.get([1]) / normV) : v.get([1]) / normV;\n    var vz = Big ? new Big(v.get([2]) / normV) : v.get([2]) / normV;\n    var c = cos(theta);\n    var oneMinusC = addScalar(one, unaryMinus(c));\n    var s = sin(theta);\n    var r11 = addScalar(c, _mul([vx, vx, oneMinusC]));\n    var r12 = addScalar(_mul([vx, vy, oneMinusC]), _mul([minusOne, vz, s]));\n    var r13 = addScalar(_mul([vx, vz, oneMinusC]), _mul([vy, s]));\n    var r21 = addScalar(_mul([vx, vy, oneMinusC]), _mul([vz, s]));\n    var r22 = addScalar(c, _mul([vy, vy, oneMinusC]));\n    var r23 = addScalar(_mul([vy, vz, oneMinusC]), _mul([minusOne, vx, s]));\n    var r31 = addScalar(_mul([vx, vz, oneMinusC]), _mul([minusOne, vy, s]));\n    var r32 = addScalar(_mul([vy, vz, oneMinusC]), _mul([vx, s]));\n    var r33 = addScalar(c, _mul([vz, vz, oneMinusC]));\n    var data = [[r11, r12, r13], [r21, r22, r23], [r31, r32, r33]];\n    return _convertToFormat(data, format);\n  }\n});","map":{"version":3,"sources":["/Users/elimunn/Desktop/plot-recipes/node_modules/mathjs/lib/esm/function/matrix/rotationMatrix.js"],"names":["isBigNumber","factory","name","dependencies","createRotationMatrix","_ref","typed","config","multiplyScalar","addScalar","unaryMinus","norm","BigNumber","matrix","DenseMatrix","SparseMatrix","cos","sin","_","string","format","numberBigNumberComplexUnit","theta","_rotationMatrix2x2","undefined","numberBigNumberComplexUnitString","numberBigNumberComplexUnitArray","v","matrixV","_validateVector","_rotationMatrix3x3","numberBigNumberComplexUnitMatrix","storageType","storage","numberBigNumberComplexUnitArrayString","numberBigNumberComplexUnitMatrixString","Big","minusOne","cosTheta","sinTheta","data","_convertToFormat","size","length","RangeError","_mul","array","reduce","p","curr","TypeError","concat","normV","one","vx","get","vy","vz","c","oneMinusC","s","r11","r12","r13","r21","r22","r23","r31","r32","r33"],"mappings":"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","sourcesContent":["import { isBigNumber } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'rotationMatrix';\nvar dependencies = ['typed', 'config', 'multiplyScalar', 'addScalar', 'unaryMinus', 'norm', 'matrix', 'BigNumber', 'DenseMatrix', 'SparseMatrix', 'cos', 'sin'];\nexport var createRotationMatrix = /* #__PURE__ */factory(name, dependencies, (_ref) => {\n  var {\n    typed,\n    config,\n    multiplyScalar,\n    addScalar,\n    unaryMinus,\n    norm,\n    BigNumber,\n    matrix,\n    DenseMatrix,\n    SparseMatrix,\n    cos,\n    sin\n  } = _ref;\n\n  /**\n   * Create a 2-dimensional counter-clockwise rotation matrix (2x2) for a given angle (expressed in radians).\n   * Create a 2-dimensional counter-clockwise rotation matrix (3x3) by a given angle (expressed in radians) around a given axis (1x3).\n   *\n   * Syntax:\n   *\n   *    math.rotationMatrix(theta)\n   *    math.rotationMatrix(theta, format)\n   *    math.rotationMatrix(theta, [v])\n   *    math.rotationMatrix(theta, [v], format)\n   *\n   * Examples:\n   *\n   *    math.rotationMatrix(math.pi / 2)                      // returns [[0, -1], [1, 0]]\n   *    math.rotationMatrix(math.bignumber(1))                // returns [[bignumber(cos(1)), bignumber(-sin(1))], [bignumber(sin(1)), bignumber(cos(1))]]\n   *    math.rotationMatrix(math.complex(1 + i))              // returns [[cos(1 + i), -sin(1 + i)], [sin(1 + i), cos(1 + i)]]\n   *    math.rotationMatrix(math.unit('1rad'))                // returns [[cos(1), -sin(1)], [sin(1), cos(1)]]\n   *\n   *    math.rotationMatrix(math.pi / 2, [0, 1, 0])           // returns [[0, 0, 1], [0, 1, 0], [-1, 0, 0]]\n   *    math.rotationMatrix(math.pi / 2, matrix([0, 1, 0]))   // returns matrix([[0, 0, 1], [0, 1, 0], [-1, 0, 0]])\n   *\n   *\n   * See also:\n   *\n   *    matrix, cos, sin\n   *\n   *\n   * @param {number | BigNumber | Complex | Unit} theta    Rotation angle\n   * @param {Array | Matrix} [v]                           Rotation axis\n   * @param {string} [format]                              Result Matrix storage format\n   * @return {Array | Matrix}                              Rotation matrix\n   */\n  return typed(name, {\n    '': function _() {\n      return config.matrix === 'Matrix' ? matrix([]) : [];\n    },\n    string: function string(format) {\n      return matrix(format);\n    },\n    'number | BigNumber | Complex | Unit': function numberBigNumberComplexUnit(theta) {\n      return _rotationMatrix2x2(theta, config.matrix === 'Matrix' ? 'dense' : undefined);\n    },\n    'number | BigNumber | Complex | Unit, string': function numberBigNumberComplexUnitString(theta, format) {\n      return _rotationMatrix2x2(theta, format);\n    },\n    'number | BigNumber | Complex | Unit, Array': function numberBigNumberComplexUnitArray(theta, v) {\n      var matrixV = matrix(v);\n\n      _validateVector(matrixV);\n\n      return _rotationMatrix3x3(theta, matrixV, undefined);\n    },\n    'number | BigNumber | Complex | Unit, Matrix': function numberBigNumberComplexUnitMatrix(theta, v) {\n      _validateVector(v);\n\n      var storageType = v.storage() || (config.matrix === 'Matrix' ? 'dense' : undefined);\n      return _rotationMatrix3x3(theta, v, storageType);\n    },\n    'number | BigNumber | Complex | Unit, Array, string': function numberBigNumberComplexUnitArrayString(theta, v, format) {\n      var matrixV = matrix(v);\n\n      _validateVector(matrixV);\n\n      return _rotationMatrix3x3(theta, matrixV, format);\n    },\n    'number | BigNumber | Complex | Unit, Matrix, string': function numberBigNumberComplexUnitMatrixString(theta, v, format) {\n      _validateVector(v);\n\n      return _rotationMatrix3x3(theta, v, format);\n    }\n  });\n  /**\n   * Returns 2x2 matrix of 2D rotation of angle theta\n   *\n   * @param {number | BigNumber | Complex | Unit} theta  The rotation angle\n   * @param {string} format                              The result Matrix storage format\n   * @returns {Matrix}\n   * @private\n   */\n\n  function _rotationMatrix2x2(theta, format) {\n    var Big = isBigNumber(theta);\n    var minusOne = Big ? new BigNumber(-1) : -1;\n    var cosTheta = cos(theta);\n    var sinTheta = sin(theta);\n    var data = [[cosTheta, multiplyScalar(minusOne, sinTheta)], [sinTheta, cosTheta]];\n    return _convertToFormat(data, format);\n  }\n\n  function _validateVector(v) {\n    var size = v.size();\n\n    if (size.length < 1 || size[0] !== 3) {\n      throw new RangeError('Vector must be of dimensions 1x3');\n    }\n  }\n\n  function _mul(array) {\n    return array.reduce((p, curr) => multiplyScalar(p, curr));\n  }\n\n  function _convertToFormat(data, format) {\n    if (format) {\n      if (format === 'sparse') {\n        return new SparseMatrix(data);\n      }\n\n      if (format === 'dense') {\n        return new DenseMatrix(data);\n      }\n\n      throw new TypeError(\"Unknown matrix type \\\"\".concat(format, \"\\\"\"));\n    }\n\n    return data;\n  }\n  /**\n   * Returns a 3x3 matrix of rotation of angle theta around vector v\n   *\n   * @param {number | BigNumber | Complex | Unit} theta The rotation angle\n   * @param {Matrix} v                                  The rotation axis vector\n   * @param {string} format                             The storage format of the resulting matrix\n   * @returns {Matrix}\n   * @private\n   */\n\n\n  function _rotationMatrix3x3(theta, v, format) {\n    var normV = norm(v);\n\n    if (normV === 0) {\n      throw new RangeError('Rotation around zero vector');\n    }\n\n    var Big = isBigNumber(theta) ? BigNumber : null;\n    var one = Big ? new Big(1) : 1;\n    var minusOne = Big ? new Big(-1) : -1;\n    var vx = Big ? new Big(v.get([0]) / normV) : v.get([0]) / normV;\n    var vy = Big ? new Big(v.get([1]) / normV) : v.get([1]) / normV;\n    var vz = Big ? new Big(v.get([2]) / normV) : v.get([2]) / normV;\n    var c = cos(theta);\n    var oneMinusC = addScalar(one, unaryMinus(c));\n    var s = sin(theta);\n    var r11 = addScalar(c, _mul([vx, vx, oneMinusC]));\n    var r12 = addScalar(_mul([vx, vy, oneMinusC]), _mul([minusOne, vz, s]));\n    var r13 = addScalar(_mul([vx, vz, oneMinusC]), _mul([vy, s]));\n    var r21 = addScalar(_mul([vx, vy, oneMinusC]), _mul([vz, s]));\n    var r22 = addScalar(c, _mul([vy, vy, oneMinusC]));\n    var r23 = addScalar(_mul([vy, vz, oneMinusC]), _mul([minusOne, vx, s]));\n    var r31 = addScalar(_mul([vx, vz, oneMinusC]), _mul([minusOne, vy, s]));\n    var r32 = addScalar(_mul([vy, vz, oneMinusC]), _mul([vx, s]));\n    var r33 = addScalar(c, _mul([vz, vz, oneMinusC]));\n    var data = [[r11, r12, r13], [r21, r22, r23], [r31, r32, r33]];\n    return _convertToFormat(data, format);\n  }\n});"]},"metadata":{},"sourceType":"module"}