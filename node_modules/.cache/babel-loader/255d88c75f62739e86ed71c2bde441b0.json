{"ast":null,"code":"import { errorTransform } from '../../transform/utils/errorTransform.js';\nimport { getSafeProperty } from '../../../utils/customs.js';\nexport function accessFactory(_ref) {\n  var {\n    subset\n  } = _ref;\n  /**\n   * Retrieve part of an object:\n   *\n   * - Retrieve a property from an object\n   * - Retrieve a part of a string\n   * - Retrieve a matrix subset\n   *\n   * @param {Object | Array | Matrix | string} object\n   * @param {Index} index\n   * @return {Object | Array | Matrix | string} Returns the subset\n   */\n\n  return function access(object, index) {\n    try {\n      if (Array.isArray(object)) {\n        return subset(object, index);\n      } else if (object && typeof object.subset === 'function') {\n        // Matrix\n        return object.subset(index);\n      } else if (typeof object === 'string') {\n        // TODO: move getStringSubset into a separate util file, use that\n        return subset(object, index);\n      } else if (typeof object === 'object') {\n        if (!index.isObjectProperty()) {\n          throw new TypeError('Cannot apply a numeric index as object property');\n        }\n\n        return getSafeProperty(object, index.getObjectProperty());\n      } else {\n        throw new TypeError('Cannot apply index: unsupported type of object');\n      }\n    } catch (err) {\n      throw errorTransform(err);\n    }\n  };\n}","map":{"version":3,"sources":["/Users/elimunn/Desktop/plot-recipes/node_modules/mathjs/lib/esm/expression/node/utils/access.js"],"names":["errorTransform","getSafeProperty","accessFactory","_ref","subset","access","object","index","Array","isArray","isObjectProperty","TypeError","getObjectProperty","err"],"mappings":"AAAA,SAASA,cAAT,QAA+B,yCAA/B;AACA,SAASC,eAAT,QAAgC,2BAAhC;AACA,OAAO,SAASC,aAAT,CAAuBC,IAAvB,EAA6B;AAClC,MAAI;AACFC,IAAAA;AADE,MAEAD,IAFJ;AAIA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAO,SAASE,MAAT,CAAgBC,MAAhB,EAAwBC,KAAxB,EAA+B;AACpC,QAAI;AACF,UAAIC,KAAK,CAACC,OAAN,CAAcH,MAAd,CAAJ,EAA2B;AACzB,eAAOF,MAAM,CAACE,MAAD,EAASC,KAAT,CAAb;AACD,OAFD,MAEO,IAAID,MAAM,IAAI,OAAOA,MAAM,CAACF,MAAd,KAAyB,UAAvC,EAAmD;AACxD;AACA,eAAOE,MAAM,CAACF,MAAP,CAAcG,KAAd,CAAP;AACD,OAHM,MAGA,IAAI,OAAOD,MAAP,KAAkB,QAAtB,EAAgC;AACrC;AACA,eAAOF,MAAM,CAACE,MAAD,EAASC,KAAT,CAAb;AACD,OAHM,MAGA,IAAI,OAAOD,MAAP,KAAkB,QAAtB,EAAgC;AACrC,YAAI,CAACC,KAAK,CAACG,gBAAN,EAAL,EAA+B;AAC7B,gBAAM,IAAIC,SAAJ,CAAc,iDAAd,CAAN;AACD;;AAED,eAAOV,eAAe,CAACK,MAAD,EAASC,KAAK,CAACK,iBAAN,EAAT,CAAtB;AACD,OANM,MAMA;AACL,cAAM,IAAID,SAAJ,CAAc,gDAAd,CAAN;AACD;AACF,KAlBD,CAkBE,OAAOE,GAAP,EAAY;AACZ,YAAMb,cAAc,CAACa,GAAD,CAApB;AACD;AACF,GAtBD;AAuBD","sourcesContent":["import { errorTransform } from '../../transform/utils/errorTransform.js';\nimport { getSafeProperty } from '../../../utils/customs.js';\nexport function accessFactory(_ref) {\n  var {\n    subset\n  } = _ref;\n\n  /**\n   * Retrieve part of an object:\n   *\n   * - Retrieve a property from an object\n   * - Retrieve a part of a string\n   * - Retrieve a matrix subset\n   *\n   * @param {Object | Array | Matrix | string} object\n   * @param {Index} index\n   * @return {Object | Array | Matrix | string} Returns the subset\n   */\n  return function access(object, index) {\n    try {\n      if (Array.isArray(object)) {\n        return subset(object, index);\n      } else if (object && typeof object.subset === 'function') {\n        // Matrix\n        return object.subset(index);\n      } else if (typeof object === 'string') {\n        // TODO: move getStringSubset into a separate util file, use that\n        return subset(object, index);\n      } else if (typeof object === 'object') {\n        if (!index.isObjectProperty()) {\n          throw new TypeError('Cannot apply a numeric index as object property');\n        }\n\n        return getSafeProperty(object, index.getObjectProperty());\n      } else {\n        throw new TypeError('Cannot apply index: unsupported type of object');\n      }\n    } catch (err) {\n      throw errorTransform(err);\n    }\n  };\n}"]},"metadata":{},"sourceType":"module"}