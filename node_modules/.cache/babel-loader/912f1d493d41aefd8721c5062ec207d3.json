{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { deepMap } from '../../utils/collection.js';\nimport { cosh as coshNumber } from '../../utils/number.js';\nvar name = 'cosh';\nvar dependencies = ['typed'];\nexport var createCosh = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Calculate the hyperbolic cosine of a value,\n   * defined as `cosh(x) = 1/2 * (exp(x) + exp(-x))`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.cosh(x)\n   *\n   * Examples:\n   *\n   *    math.cosh(0.5)       // returns number 1.1276259652063807\n   *\n   * See also:\n   *\n   *    sinh, tanh\n   *\n   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input\n   * @return {number | BigNumber | Complex | Array | Matrix} Hyperbolic cosine of x\n   */\n\n  return typed(name, {\n    number: coshNumber,\n    Complex: function Complex(x) {\n      return x.cosh();\n    },\n    BigNumber: function BigNumber(x) {\n      return x.cosh();\n    },\n    Unit: function Unit(x) {\n      if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {\n        throw new TypeError('Unit in function cosh is no angle');\n      }\n\n      return this(x.value);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return deepMap(x, this);\n    }\n  });\n});","map":{"version":3,"sources":["/Users/elimunn/Desktop/plot-recipes/node_modules/mathjs/lib/esm/function/trigonometry/cosh.js"],"names":["factory","deepMap","cosh","coshNumber","name","dependencies","createCosh","_ref","typed","number","Complex","x","BigNumber","Unit","hasBase","constructor","BASE_UNITS","ANGLE","TypeError","value","ArrayMatrix"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,OAAT,QAAwB,2BAAxB;AACA,SAASC,IAAI,IAAIC,UAAjB,QAAmC,uBAAnC;AACA,IAAIC,IAAI,GAAG,MAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,CAAnB;AACA,OAAO,IAAIC,UAAU,GAAG,eAAeN,OAAO,CAACI,IAAD,EAAOC,YAAP,EAAsBE,IAAD,IAAU;AAC3E,MAAI;AACFC,IAAAA;AADE,MAEAD,IAFJ;AAIA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAOC,KAAK,CAACJ,IAAD,EAAO;AACjBK,IAAAA,MAAM,EAAEN,UADS;AAEjBO,IAAAA,OAAO,EAAE,SAASA,OAAT,CAAiBC,CAAjB,EAAoB;AAC3B,aAAOA,CAAC,CAACT,IAAF,EAAP;AACD,KAJgB;AAKjBU,IAAAA,SAAS,EAAE,SAASA,SAAT,CAAmBD,CAAnB,EAAsB;AAC/B,aAAOA,CAAC,CAACT,IAAF,EAAP;AACD,KAPgB;AAQjBW,IAAAA,IAAI,EAAE,SAASA,IAAT,CAAcF,CAAd,EAAiB;AACrB,UAAI,CAACA,CAAC,CAACG,OAAF,CAAUH,CAAC,CAACI,WAAF,CAAcC,UAAd,CAAyBC,KAAnC,CAAL,EAAgD;AAC9C,cAAM,IAAIC,SAAJ,CAAc,mCAAd,CAAN;AACD;;AAED,aAAO,KAAKP,CAAC,CAACQ,KAAP,CAAP;AACD,KAdgB;AAejB,sBAAkB,SAASC,WAAT,CAAqBT,CAArB,EAAwB;AACxC,aAAOV,OAAO,CAACU,CAAD,EAAI,IAAJ,CAAd;AACD;AAjBgB,GAAP,CAAZ;AAmBD,CA7C6C,CAAvC","sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { deepMap } from '../../utils/collection.js';\nimport { cosh as coshNumber } from '../../utils/number.js';\nvar name = 'cosh';\nvar dependencies = ['typed'];\nexport var createCosh = /* #__PURE__ */factory(name, dependencies, (_ref) => {\n  var {\n    typed\n  } = _ref;\n\n  /**\n   * Calculate the hyperbolic cosine of a value,\n   * defined as `cosh(x) = 1/2 * (exp(x) + exp(-x))`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.cosh(x)\n   *\n   * Examples:\n   *\n   *    math.cosh(0.5)       // returns number 1.1276259652063807\n   *\n   * See also:\n   *\n   *    sinh, tanh\n   *\n   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input\n   * @return {number | BigNumber | Complex | Array | Matrix} Hyperbolic cosine of x\n   */\n  return typed(name, {\n    number: coshNumber,\n    Complex: function Complex(x) {\n      return x.cosh();\n    },\n    BigNumber: function BigNumber(x) {\n      return x.cosh();\n    },\n    Unit: function Unit(x) {\n      if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {\n        throw new TypeError('Unit in function cosh is no angle');\n      }\n\n      return this(x.value);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return deepMap(x, this);\n    }\n  });\n});"]},"metadata":{},"sourceType":"module"}