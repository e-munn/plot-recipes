{"ast":null,"code":"import { factory } from '../utils/factory.js';\nimport { extend, hasOwnProperty } from '../utils/object.js';\nimport { getSafeProperty, setSafeProperty } from '../utils/customs.js';\nvar name = 'Parser';\nvar dependencies = ['parse'];\nexport var createParserClass = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    parse\n  } = _ref;\n  /**\n   * @constructor Parser\n   * Parser contains methods to evaluate or parse expressions, and has a number\n   * of convenience methods to get, set, and remove variables from memory. Parser\n   * keeps a scope containing variables in memory, which is used for all\n   * evaluations.\n   *\n   * Methods:\n   *    const result = parser.evaluate(expr)  // evaluate an expression\n   *    const value = parser.get(name)        // retrieve a variable from the parser\n   *    const values = parser.getAll()        // retrieve all defined variables\n   *    parser.set(name, value)               // set a variable in the parser\n   *    parser.remove(name)                   // clear a variable from the\n   *                                          // parsers scope\n   *    parser.clear()                        // clear the parsers scope\n   *\n   * Example usage:\n   *    const parser = new Parser()\n   *    // Note: there is a convenience method which can be used instead:\n   *    // const parser = new math.parser()\n   *\n   *    // evaluate expressions\n   *    parser.evaluate('sqrt(3^2 + 4^2)')        // 5\n   *    parser.evaluate('sqrt(-4)')               // 2i\n   *    parser.evaluate('2 inch in cm')           // 5.08 cm\n   *    parser.evaluate('cos(45 deg)')            // 0.7071067811865476\n   *\n   *    // define variables and functions\n   *    parser.evaluate('x = 7 / 2')              // 3.5\n   *    parser.evaluate('x + 3')                  // 6.5\n   *    parser.evaluate('function f(x, y) = x^y') // f(x, y)\n   *    parser.evaluate('f(2, 3)')                // 8\n   *\n   *    // get and set variables and functions\n   *    const x = parser.get('x')                 // 7\n   *    const f = parser.get('f')                 // function\n   *    const g = f(3, 2)                         // 9\n   *    parser.set('h', 500)\n   *    const i = parser.evaluate('h / 2')        // 250\n   *    parser.set('hello', function (name) {\n   *        return 'hello, ' + name + '!'\n   *    })\n   *    parser.evaluate('hello(\"user\")')          // \"hello, user!\"\n   *\n   *    // clear defined functions and variables\n   *    parser.clear()\n   *\n   */\n\n  function Parser() {\n    if (!(this instanceof Parser)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    this.scope = {};\n  }\n  /**\n   * Attach type information\n   */\n\n\n  Parser.prototype.type = 'Parser';\n  Parser.prototype.isParser = true;\n  /**\n   * Parse and evaluate the given expression\n   * @param {string} expr   A string containing an expression, for example \"2+3\"\n   * @return {*} result     The result, or undefined when the expression was empty\n   * @throws {Error}\n   */\n\n  Parser.prototype.evaluate = function (expr) {\n    // TODO: validate arguments\n    return parse(expr).compile().evaluate(this.scope);\n  };\n  /**\n   * Get a variable (a function or variable) by name from the parsers scope.\n   * Returns undefined when not found\n   * @param {string} name\n   * @return {* | undefined} value\n   */\n\n\n  Parser.prototype.get = function (name) {\n    // TODO: validate arguments\n    return name in this.scope ? getSafeProperty(this.scope, name) : undefined;\n  };\n  /**\n   * Get a map with all defined variables\n   * @return {Object} values\n   */\n\n\n  Parser.prototype.getAll = function () {\n    return extend({}, this.scope);\n  };\n  /**\n   * Set a symbol (a function or variable) by name from the parsers scope.\n   * @param {string} name\n   * @param {* | undefined} value\n   */\n\n\n  Parser.prototype.set = function (name, value) {\n    // TODO: validate arguments\n    return setSafeProperty(this.scope, name, value);\n  };\n  /**\n   * Remove a variable from the parsers scope\n   * @param {string} name\n   */\n\n\n  Parser.prototype.remove = function (name) {\n    // TODO: validate arguments\n    delete this.scope[name];\n  };\n  /**\n   * Clear the scope with variables and functions\n   */\n\n\n  Parser.prototype.clear = function () {\n    for (var _name in this.scope) {\n      if (hasOwnProperty(this.scope, _name)) {\n        delete this.scope[_name];\n      }\n    }\n  };\n\n  return Parser;\n}, {\n  isClass: true\n});","map":{"version":3,"sources":["/Users/elimunn/Desktop/plot-recipes/node_modules/mathjs/lib/esm/expression/Parser.js"],"names":["factory","extend","hasOwnProperty","getSafeProperty","setSafeProperty","name","dependencies","createParserClass","_ref","parse","Parser","SyntaxError","scope","prototype","type","isParser","evaluate","expr","compile","get","undefined","getAll","set","value","remove","clear","_name","isClass"],"mappings":"AAAA,SAASA,OAAT,QAAwB,qBAAxB;AACA,SAASC,MAAT,EAAiBC,cAAjB,QAAuC,oBAAvC;AACA,SAASC,eAAT,EAA0BC,eAA1B,QAAiD,qBAAjD;AACA,IAAIC,IAAI,GAAG,QAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,CAAnB;AACA,OAAO,IAAIC,iBAAiB,GAAG,eAAeP,OAAO,CAACK,IAAD,EAAOC,YAAP,EAAsBE,IAAD,IAAU;AAClF,MAAI;AACFC,IAAAA;AADE,MAEAD,IAFJ;AAIA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,WAASE,MAAT,GAAkB;AAChB,QAAI,EAAE,gBAAgBA,MAAlB,CAAJ,EAA+B;AAC7B,YAAM,IAAIC,WAAJ,CAAgB,kDAAhB,CAAN;AACD;;AAED,SAAKC,KAAL,GAAa,EAAb;AACD;AACD;AACF;AACA;;;AAGEF,EAAAA,MAAM,CAACG,SAAP,CAAiBC,IAAjB,GAAwB,QAAxB;AACAJ,EAAAA,MAAM,CAACG,SAAP,CAAiBE,QAAjB,GAA4B,IAA5B;AACA;AACF;AACA;AACA;AACA;AACA;;AAEEL,EAAAA,MAAM,CAACG,SAAP,CAAiBG,QAAjB,GAA4B,UAAUC,IAAV,EAAgB;AAC1C;AACA,WAAOR,KAAK,CAACQ,IAAD,CAAL,CAAYC,OAAZ,GAAsBF,QAAtB,CAA+B,KAAKJ,KAApC,CAAP;AACD,GAHD;AAIA;AACF;AACA;AACA;AACA;AACA;;;AAGEF,EAAAA,MAAM,CAACG,SAAP,CAAiBM,GAAjB,GAAuB,UAAUd,IAAV,EAAgB;AACrC;AACA,WAAOA,IAAI,IAAI,KAAKO,KAAb,GAAqBT,eAAe,CAAC,KAAKS,KAAN,EAAaP,IAAb,CAApC,GAAyDe,SAAhE;AACD,GAHD;AAIA;AACF;AACA;AACA;;;AAGEV,EAAAA,MAAM,CAACG,SAAP,CAAiBQ,MAAjB,GAA0B,YAAY;AACpC,WAAOpB,MAAM,CAAC,EAAD,EAAK,KAAKW,KAAV,CAAb;AACD,GAFD;AAGA;AACF;AACA;AACA;AACA;;;AAGEF,EAAAA,MAAM,CAACG,SAAP,CAAiBS,GAAjB,GAAuB,UAAUjB,IAAV,EAAgBkB,KAAhB,EAAuB;AAC5C;AACA,WAAOnB,eAAe,CAAC,KAAKQ,KAAN,EAAaP,IAAb,EAAmBkB,KAAnB,CAAtB;AACD,GAHD;AAIA;AACF;AACA;AACA;;;AAGEb,EAAAA,MAAM,CAACG,SAAP,CAAiBW,MAAjB,GAA0B,UAAUnB,IAAV,EAAgB;AACxC;AACA,WAAO,KAAKO,KAAL,CAAWP,IAAX,CAAP;AACD,GAHD;AAIA;AACF;AACA;;;AAGEK,EAAAA,MAAM,CAACG,SAAP,CAAiBY,KAAjB,GAAyB,YAAY;AACnC,SAAK,IAAIC,KAAT,IAAkB,KAAKd,KAAvB,EAA8B;AAC5B,UAAIV,cAAc,CAAC,KAAKU,KAAN,EAAac,KAAb,CAAlB,EAAuC;AACrC,eAAO,KAAKd,KAAL,CAAWc,KAAX,CAAP;AACD;AACF;AACF,GAND;;AAQA,SAAOhB,MAAP;AACD,CAtIoD,EAsIlD;AACDiB,EAAAA,OAAO,EAAE;AADR,CAtIkD,CAA9C","sourcesContent":["import { factory } from '../utils/factory.js';\nimport { extend, hasOwnProperty } from '../utils/object.js';\nimport { getSafeProperty, setSafeProperty } from '../utils/customs.js';\nvar name = 'Parser';\nvar dependencies = ['parse'];\nexport var createParserClass = /* #__PURE__ */factory(name, dependencies, (_ref) => {\n  var {\n    parse\n  } = _ref;\n\n  /**\n   * @constructor Parser\n   * Parser contains methods to evaluate or parse expressions, and has a number\n   * of convenience methods to get, set, and remove variables from memory. Parser\n   * keeps a scope containing variables in memory, which is used for all\n   * evaluations.\n   *\n   * Methods:\n   *    const result = parser.evaluate(expr)  // evaluate an expression\n   *    const value = parser.get(name)        // retrieve a variable from the parser\n   *    const values = parser.getAll()        // retrieve all defined variables\n   *    parser.set(name, value)               // set a variable in the parser\n   *    parser.remove(name)                   // clear a variable from the\n   *                                          // parsers scope\n   *    parser.clear()                        // clear the parsers scope\n   *\n   * Example usage:\n   *    const parser = new Parser()\n   *    // Note: there is a convenience method which can be used instead:\n   *    // const parser = new math.parser()\n   *\n   *    // evaluate expressions\n   *    parser.evaluate('sqrt(3^2 + 4^2)')        // 5\n   *    parser.evaluate('sqrt(-4)')               // 2i\n   *    parser.evaluate('2 inch in cm')           // 5.08 cm\n   *    parser.evaluate('cos(45 deg)')            // 0.7071067811865476\n   *\n   *    // define variables and functions\n   *    parser.evaluate('x = 7 / 2')              // 3.5\n   *    parser.evaluate('x + 3')                  // 6.5\n   *    parser.evaluate('function f(x, y) = x^y') // f(x, y)\n   *    parser.evaluate('f(2, 3)')                // 8\n   *\n   *    // get and set variables and functions\n   *    const x = parser.get('x')                 // 7\n   *    const f = parser.get('f')                 // function\n   *    const g = f(3, 2)                         // 9\n   *    parser.set('h', 500)\n   *    const i = parser.evaluate('h / 2')        // 250\n   *    parser.set('hello', function (name) {\n   *        return 'hello, ' + name + '!'\n   *    })\n   *    parser.evaluate('hello(\"user\")')          // \"hello, user!\"\n   *\n   *    // clear defined functions and variables\n   *    parser.clear()\n   *\n   */\n  function Parser() {\n    if (!(this instanceof Parser)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    this.scope = {};\n  }\n  /**\n   * Attach type information\n   */\n\n\n  Parser.prototype.type = 'Parser';\n  Parser.prototype.isParser = true;\n  /**\n   * Parse and evaluate the given expression\n   * @param {string} expr   A string containing an expression, for example \"2+3\"\n   * @return {*} result     The result, or undefined when the expression was empty\n   * @throws {Error}\n   */\n\n  Parser.prototype.evaluate = function (expr) {\n    // TODO: validate arguments\n    return parse(expr).compile().evaluate(this.scope);\n  };\n  /**\n   * Get a variable (a function or variable) by name from the parsers scope.\n   * Returns undefined when not found\n   * @param {string} name\n   * @return {* | undefined} value\n   */\n\n\n  Parser.prototype.get = function (name) {\n    // TODO: validate arguments\n    return name in this.scope ? getSafeProperty(this.scope, name) : undefined;\n  };\n  /**\n   * Get a map with all defined variables\n   * @return {Object} values\n   */\n\n\n  Parser.prototype.getAll = function () {\n    return extend({}, this.scope);\n  };\n  /**\n   * Set a symbol (a function or variable) by name from the parsers scope.\n   * @param {string} name\n   * @param {* | undefined} value\n   */\n\n\n  Parser.prototype.set = function (name, value) {\n    // TODO: validate arguments\n    return setSafeProperty(this.scope, name, value);\n  };\n  /**\n   * Remove a variable from the parsers scope\n   * @param {string} name\n   */\n\n\n  Parser.prototype.remove = function (name) {\n    // TODO: validate arguments\n    delete this.scope[name];\n  };\n  /**\n   * Clear the scope with variables and functions\n   */\n\n\n  Parser.prototype.clear = function () {\n    for (var _name in this.scope) {\n      if (hasOwnProperty(this.scope, _name)) {\n        delete this.scope[_name];\n      }\n    }\n  };\n\n  return Parser;\n}, {\n  isClass: true\n});"]},"metadata":{},"sourceType":"module"}