{"ast":null,"code":"import { containsCollections, deepForEach, reduce } from '../../utils/collection.js';\nimport { factory } from '../../utils/factory.js';\nimport { improveErrorMessage } from './utils/improveErrorMessage.js';\nvar name = 'sum';\nvar dependencies = ['typed', 'config', 'add', 'numeric'];\nexport var createSum = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    add,\n    numeric\n  } = _ref;\n  /**\n   * Compute the sum of a matrix or a list with values.\n   * In case of a (multi dimensional) array or matrix, the sum of all\n   * elements will be calculated.\n   *\n   * Syntax:\n   *\n   *     math.sum(a, b, c, ...)\n   *     math.sum(A)\n   *\n   * Examples:\n   *\n   *     math.sum(2, 1, 4, 3)               // returns 10\n   *     math.sum([2, 1, 4, 3])             // returns 10\n   *     math.sum([[2, 5], [4, 3], [1, 7]]) // returns 22\n   *\n   * See also:\n   *\n   *    mean, median, min, max, prod, std, variance\n   *\n   * @param {... *} args  A single matrix or or multiple scalar values\n   * @return {*} The sum of all values\n   */\n\n  return typed(name, {\n    // sum([a, b, c, d, ...])\n    'Array | Matrix': _sum,\n    // sum([a, b, c, d, ...], dim)\n    'Array | Matrix, number | BigNumber': _nsumDim,\n    // sum(a, b, c, d, ...)\n    '...': function _(args) {\n      if (containsCollections(args)) {\n        throw new TypeError('Scalar values expected in function sum');\n      }\n\n      return _sum(args);\n    }\n  });\n  /**\n   * Recursively calculate the sum of an n-dimensional array\n   * @param {Array | Matrix} array\n   * @return {number} sum\n   * @private\n   */\n\n  function _sum(array) {\n    var sum;\n    deepForEach(array, function (value) {\n      try {\n        sum = sum === undefined ? value : add(sum, value);\n      } catch (err) {\n        throw improveErrorMessage(err, 'sum', value);\n      }\n    }); // make sure returning numeric value: parse a string into a numeric value\n\n    if (sum === undefined) {\n      sum = numeric(0, config.number);\n    }\n\n    if (typeof sum === 'string') {\n      sum = numeric(sum, config.number);\n    }\n\n    return sum;\n  }\n\n  function _nsumDim(array, dim) {\n    try {\n      var sum = reduce(array, dim, add);\n      return sum;\n    } catch (err) {\n      throw improveErrorMessage(err, 'sum');\n    }\n  }\n});","map":{"version":3,"sources":["/Users/elimunn/Desktop/plot-recipes/node_modules/mathjs/lib/esm/function/statistics/sum.js"],"names":["containsCollections","deepForEach","reduce","factory","improveErrorMessage","name","dependencies","createSum","_ref","typed","config","add","numeric","_sum","_nsumDim","_","args","TypeError","array","sum","value","undefined","err","number","dim"],"mappings":"AAAA,SAASA,mBAAT,EAA8BC,WAA9B,EAA2CC,MAA3C,QAAyD,2BAAzD;AACA,SAASC,OAAT,QAAwB,wBAAxB;AACA,SAASC,mBAAT,QAAoC,gCAApC;AACA,IAAIC,IAAI,GAAG,KAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,QAAV,EAAoB,KAApB,EAA2B,SAA3B,CAAnB;AACA,OAAO,IAAIC,SAAS,GAAG,eAAeJ,OAAO,CAACE,IAAD,EAAOC,YAAP,EAAsBE,IAAD,IAAU;AAC1E,MAAI;AACFC,IAAAA,KADE;AAEFC,IAAAA,MAFE;AAGFC,IAAAA,GAHE;AAIFC,IAAAA;AAJE,MAKAJ,IALJ;AAOA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAOC,KAAK,CAACJ,IAAD,EAAO;AACjB;AACA,sBAAkBQ,IAFD;AAGjB;AACA,0CAAsCC,QAJrB;AAKjB;AACA,WAAO,SAASC,CAAT,CAAWC,IAAX,EAAiB;AACtB,UAAIhB,mBAAmB,CAACgB,IAAD,CAAvB,EAA+B;AAC7B,cAAM,IAAIC,SAAJ,CAAc,wCAAd,CAAN;AACD;;AAED,aAAOJ,IAAI,CAACG,IAAD,CAAX;AACD;AAZgB,GAAP,CAAZ;AAcA;AACF;AACA;AACA;AACA;AACA;;AAEE,WAASH,IAAT,CAAcK,KAAd,EAAqB;AACnB,QAAIC,GAAJ;AACAlB,IAAAA,WAAW,CAACiB,KAAD,EAAQ,UAAUE,KAAV,EAAiB;AAClC,UAAI;AACFD,QAAAA,GAAG,GAAGA,GAAG,KAAKE,SAAR,GAAoBD,KAApB,GAA4BT,GAAG,CAACQ,GAAD,EAAMC,KAAN,CAArC;AACD,OAFD,CAEE,OAAOE,GAAP,EAAY;AACZ,cAAMlB,mBAAmB,CAACkB,GAAD,EAAM,KAAN,EAAaF,KAAb,CAAzB;AACD;AACF,KANU,CAAX,CAFmB,CAQf;;AAEJ,QAAID,GAAG,KAAKE,SAAZ,EAAuB;AACrBF,MAAAA,GAAG,GAAGP,OAAO,CAAC,CAAD,EAAIF,MAAM,CAACa,MAAX,CAAb;AACD;;AAED,QAAI,OAAOJ,GAAP,KAAe,QAAnB,EAA6B;AAC3BA,MAAAA,GAAG,GAAGP,OAAO,CAACO,GAAD,EAAMT,MAAM,CAACa,MAAb,CAAb;AACD;;AAED,WAAOJ,GAAP;AACD;;AAED,WAASL,QAAT,CAAkBI,KAAlB,EAAyBM,GAAzB,EAA8B;AAC5B,QAAI;AACF,UAAIL,GAAG,GAAGjB,MAAM,CAACgB,KAAD,EAAQM,GAAR,EAAab,GAAb,CAAhB;AACA,aAAOQ,GAAP;AACD,KAHD,CAGE,OAAOG,GAAP,EAAY;AACZ,YAAMlB,mBAAmB,CAACkB,GAAD,EAAM,KAAN,CAAzB;AACD;AACF;AACF,CAjF4C,CAAtC","sourcesContent":["import { containsCollections, deepForEach, reduce } from '../../utils/collection.js';\nimport { factory } from '../../utils/factory.js';\nimport { improveErrorMessage } from './utils/improveErrorMessage.js';\nvar name = 'sum';\nvar dependencies = ['typed', 'config', 'add', 'numeric'];\nexport var createSum = /* #__PURE__ */factory(name, dependencies, (_ref) => {\n  var {\n    typed,\n    config,\n    add,\n    numeric\n  } = _ref;\n\n  /**\n   * Compute the sum of a matrix or a list with values.\n   * In case of a (multi dimensional) array or matrix, the sum of all\n   * elements will be calculated.\n   *\n   * Syntax:\n   *\n   *     math.sum(a, b, c, ...)\n   *     math.sum(A)\n   *\n   * Examples:\n   *\n   *     math.sum(2, 1, 4, 3)               // returns 10\n   *     math.sum([2, 1, 4, 3])             // returns 10\n   *     math.sum([[2, 5], [4, 3], [1, 7]]) // returns 22\n   *\n   * See also:\n   *\n   *    mean, median, min, max, prod, std, variance\n   *\n   * @param {... *} args  A single matrix or or multiple scalar values\n   * @return {*} The sum of all values\n   */\n  return typed(name, {\n    // sum([a, b, c, d, ...])\n    'Array | Matrix': _sum,\n    // sum([a, b, c, d, ...], dim)\n    'Array | Matrix, number | BigNumber': _nsumDim,\n    // sum(a, b, c, d, ...)\n    '...': function _(args) {\n      if (containsCollections(args)) {\n        throw new TypeError('Scalar values expected in function sum');\n      }\n\n      return _sum(args);\n    }\n  });\n  /**\n   * Recursively calculate the sum of an n-dimensional array\n   * @param {Array | Matrix} array\n   * @return {number} sum\n   * @private\n   */\n\n  function _sum(array) {\n    var sum;\n    deepForEach(array, function (value) {\n      try {\n        sum = sum === undefined ? value : add(sum, value);\n      } catch (err) {\n        throw improveErrorMessage(err, 'sum', value);\n      }\n    }); // make sure returning numeric value: parse a string into a numeric value\n\n    if (sum === undefined) {\n      sum = numeric(0, config.number);\n    }\n\n    if (typeof sum === 'string') {\n      sum = numeric(sum, config.number);\n    }\n\n    return sum;\n  }\n\n  function _nsumDim(array, dim) {\n    try {\n      var sum = reduce(array, dim, add);\n      return sum;\n    } catch (err) {\n      throw improveErrorMessage(err, 'sum');\n    }\n  }\n});"]},"metadata":{},"sourceType":"module"}