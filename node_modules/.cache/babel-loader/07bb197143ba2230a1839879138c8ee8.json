{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/elimunn/Desktop/plot-recipes/site/src/components/plot/plot.js\";\nimport React, { useRef } from 'react';\nimport { select, max, sum, hierarchy, linkHorizontal, each, tree } from 'd3';\nimport { scaleLinear } from 'd3-scale';\nimport Vessels from './vessels/vessels.js';\nimport IngredientNode from './ingredients/ingredientNode.js';\n\nconst Plot = ({\n  recipe,\n  width,\n  height,\n  color,\n  dim\n}) => {\n  const canvasWidth = width - 2 * dim.main.padding;\n  const canvasHeight = height - 2 * dim.main.padding;\n  var root = hierarchy(recipe.recipe[0]);\n  const testTree = tree().size([300, 600])(root);\n\n  const desc = a => a.descendants();\n\n  root.each((d, i) => {\n    d.order = i;\n  });\n  var iorderCount = 0;\n  root.eachAfter(function (d) {\n    if ('vessel' in d.data) {\n      iorderCount = 0;\n    } else if ('ingredient' in d.data) {\n      d.data.iorder = iorderCount;\n      iorderCount += 1;\n    }\n  });\n  root.count();\n  root.each(d => {\n    d.vesselSibs = d.parent ? d.parent.children.filter(a => \"vessel\" in a.data) : 'none';\n  });\n  root.each(function (d, i) {\n    if (d.depth == 0) {\n      d.pHeight = 40;\n    } else if ('vessel' in d.data) {\n      d.pHeight = d.children.filter(a => !(\"ingredient\" in a.data)).length * 12;\n      console.log(d.pHeight);\n      console.log(d.data.vessel);\n    }\n  });\n  var allVessels = root.descendants().filter(d => 'vessel' in d.data);\n  root.each(function (d) {\n    if (d.depth == 0) {\n      d.posY = 1000;\n      d.posX = 100;\n    } else if ('vessel' in d.data) {\n      var posYAdd = [];\n      allVessels.forEach(a => d.data.vorder > a.data.vorder ? posYAdd.push(a.children.length * 12) : null);\n      d.posY = sum(posYAdd);\n      d.posX = 10;\n    } else if ('ingredient' in d.data) {\n      d.posY = d.parent.posY + d.data.iorder * 12 + 12;\n      d.posX = d.parent.posX;\n    }\n  }); //////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  // descends = descends.filter(d => (d.depth !== 0))\n\n  var flows = [];\n  allVessels.forEach((a, i) => {\n    const vessel = [];\n    vessel.push( /*#__PURE__*/_jsxDEV(Vessels, {\n      a: a,\n      i: i,\n      dim: dim,\n      color: color\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this));\n    const ingredientNodes = [];\n    a.children.forEach((b, j) => {\n      'ingredient' in b.data ? ingredientNodes.push( /*#__PURE__*/_jsxDEV(IngredientNode, {\n        color: color,\n        dim: dim,\n        a: a,\n        b: b,\n        j: j\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }, this)) : console.log('');\n    });\n    flows.push( /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [ingredientNodes, vessel]\n    }, void 0, true));\n  });\n  return /*#__PURE__*/_jsxDEV(\"g\", {\n    transform: `translate(${0}, ${50})`,\n    children: flows\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 7\n  }, this);\n};\n\n_c = Plot;\nexport default Plot;\n\nvar _c;\n\n$RefreshReg$(_c, \"Plot\");","map":{"version":3,"sources":["/Users/elimunn/Desktop/plot-recipes/site/src/components/plot/plot.js"],"names":["React","useRef","select","max","sum","hierarchy","linkHorizontal","each","tree","scaleLinear","Vessels","IngredientNode","Plot","recipe","width","height","color","dim","canvasWidth","main","padding","canvasHeight","root","testTree","size","desc","a","descendants","d","i","order","iorderCount","eachAfter","data","iorder","count","vesselSibs","parent","children","filter","depth","pHeight","length","console","log","vessel","allVessels","posY","posX","posYAdd","forEach","vorder","push","flows","ingredientNodes","b","j"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,QAA8B,OAA9B;AACA,SAASC,MAAT,EAAiBC,GAAjB,EAAsBC,GAAtB,EAA4BC,SAA5B,EAAuCC,cAAvC,EAAuDC,IAAvD,EAA6DC,IAA7D,QAAyE,IAAzE;AACA,SAASC,WAAT,QAA4B,UAA5B;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,cAAP,MAA2B,iCAA3B;;AAIA,MAAMC,IAAI,GAAG,CAAC;AAACC,EAAAA,MAAD;AAASC,EAAAA,KAAT;AAAgBC,EAAAA,MAAhB;AAAwBC,EAAAA,KAAxB;AAA+BC,EAAAA;AAA/B,CAAD,KAAyC;AAEpD,QAAMC,WAAW,GAAGJ,KAAK,GAAG,IAAEG,GAAG,CAACE,IAAJ,CAASC,OAAvC;AACA,QAAMC,YAAY,GAAGN,MAAM,GAAG,IAAEE,GAAG,CAACE,IAAJ,CAASC,OAAzC;AAEA,MAAIE,IAAI,GAAGjB,SAAS,CAACQ,MAAM,CAACA,MAAP,CAAc,CAAd,CAAD,CAApB;AAEA,QAAMU,QAAQ,GAAGf,IAAI,GAAGgB,IAAP,CAAY,CAAC,GAAD,EAAM,GAAN,CAAZ,EAAwBF,IAAxB,CAAjB;;AAEA,QAAMG,IAAI,GAAIC,CAAD,IAAOA,CAAC,CAACC,WAAF,EAApB;;AACAL,EAAAA,IAAI,CAACf,IAAL,CAAU,CAACqB,CAAD,EAAIC,CAAJ,KAAU;AAAED,IAAAA,CAAC,CAACE,KAAF,GAAUD,CAAV;AAAa,GAAnC;AAEA,MAAIE,WAAW,GAAG,CAAlB;AACAT,EAAAA,IAAI,CAACU,SAAL,CACE,UAASJ,CAAT,EAAW;AACT,QAAI,YAAYA,CAAC,CAACK,IAAlB,EAAuB;AACrBF,MAAAA,WAAW,GAAG,CAAd;AACD,KAFD,MAEO,IAAI,gBAAgBH,CAAC,CAACK,IAAtB,EAA2B;AAChCL,MAAAA,CAAC,CAACK,IAAF,CAAOC,MAAP,GAAgBH,WAAhB;AACAA,MAAAA,WAAW,IAAI,CAAf;AACD;AACF,GARH;AAWAT,EAAAA,IAAI,CAACa,KAAL;AACAb,EAAAA,IAAI,CAACf,IAAL,CAAUqB,CAAC,IAAI;AAAEA,IAAAA,CAAC,CAACQ,UAAF,GAAgBR,CAAC,CAACS,MAAF,GAAWT,CAAC,CAACS,MAAF,CAASC,QAAT,CAAkBC,MAAlB,CAAyBb,CAAC,IAAK,YAAYA,CAAC,CAACO,IAA7C,CAAX,GAAiE,MAAjF;AAA0F,GAA3G;AAEAX,EAAAA,IAAI,CAACf,IAAL,CACE,UAASqB,CAAT,EAAYC,CAAZ,EAAc;AACZ,QAAID,CAAC,CAACY,KAAF,IAAW,CAAf,EAAiB;AACfZ,MAAAA,CAAC,CAACa,OAAF,GAAY,EAAZ;AACD,KAFD,MAGK,IAAI,YAAYb,CAAC,CAACK,IAAlB,EAAuB;AAE1BL,MAAAA,CAAC,CAACa,OAAF,GAAab,CAAC,CAACU,QAAF,CAAWC,MAAX,CAAkBb,CAAC,IAAI,EAAE,gBAAgBA,CAAC,CAACO,IAApB,CAAvB,EAAkDS,MAAnD,GAA6D,EAAzE;AAEAC,MAAAA,OAAO,CAACC,GAAR,CAAYhB,CAAC,CAACa,OAAd;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAYhB,CAAC,CAACK,IAAF,CAAOY,MAAnB;AAED;AACF,GAbH;AAgBA,MAAIC,UAAU,GAAGxB,IAAI,CAACK,WAAL,GAAmBY,MAAnB,CAA0BX,CAAC,IAAG,YAAYA,CAAC,CAACK,IAA5C,CAAjB;AAGAX,EAAAA,IAAI,CAACf,IAAL,CAAU,UAASqB,CAAT,EAAW;AACnB,QAAIA,CAAC,CAACY,KAAF,IAAW,CAAf,EAAiB;AACfZ,MAAAA,CAAC,CAACmB,IAAF,GAAS,IAAT;AACAnB,MAAAA,CAAC,CAACoB,IAAF,GAAS,GAAT;AACD,KAHD,MAIK,IAAI,YAAYpB,CAAC,CAACK,IAAlB,EAAwB;AAC3B,UAAIgB,OAAO,GAAG,EAAd;AACAH,MAAAA,UAAU,CAACI,OAAX,CAAmBxB,CAAC,IAAKE,CAAC,CAACK,IAAF,CAAOkB,MAAP,GAAgBzB,CAAC,CAACO,IAAF,CAAOkB,MAAxB,GAAkCF,OAAO,CAACG,IAAR,CAAa1B,CAAC,CAACY,QAAF,CAAWI,MAAX,GAAkB,EAA/B,CAAlC,GAAuE,IAA/F;AACAd,MAAAA,CAAC,CAACmB,IAAF,GAAS3C,GAAG,CAAC6C,OAAD,CAAZ;AACArB,MAAAA,CAAC,CAACoB,IAAF,GAAS,EAAT;AACD,KALI,MAKE,IAAI,gBAAgBpB,CAAC,CAACK,IAAtB,EAA4B;AACjCL,MAAAA,CAAC,CAACmB,IAAF,GAASnB,CAAC,CAACS,MAAF,CAASU,IAAT,GAAkBnB,CAAC,CAACK,IAAF,CAAOC,MAAR,GAAkB,EAAnC,GAAyC,EAAlD;AACAN,MAAAA,CAAC,CAACoB,IAAF,GAASpB,CAAC,CAACS,MAAF,CAASW,IAAlB;AACD;AACF,GAdD,EA9CoD,CAkEpD;AACA;AACA;AAEA;;AAEA,MAAIK,KAAK,GAAG,EAAZ;AAEAP,EAAAA,UAAU,CAACI,OAAX,CAAmB,CAACxB,CAAD,EAAGG,CAAH,KAAS;AAE1B,UAAMgB,MAAM,GAAG,EAAf;AACAA,IAAAA,MAAM,CAACO,IAAP,eACE,QAAC,OAAD;AACE,MAAA,CAAC,EAAE1B,CADL;AAEE,MAAA,CAAC,EAAEG,CAFL;AAGE,MAAA,GAAG,EAAEZ,GAHP;AAIE,MAAA,KAAK,EAAED;AAJT;AAAA;AAAA;AAAA;AAAA,YADF;AASA,UAAMsC,eAAe,GAAG,EAAxB;AAEA5B,IAAAA,CAAC,CAACY,QAAF,CAAWY,OAAX,CAAmB,CAACK,CAAD,EAAGC,CAAH,KAAS;AACzB,sBAAgBD,CAAC,CAACtB,IAAnB,GACEqB,eAAe,CAACF,IAAhB,eACE,QAAC,cAAD;AACE,QAAA,KAAK,EAAEpC,KADT;AAEE,QAAA,GAAG,EAAEC,GAFP;AAGE,QAAA,CAAC,EAAES,CAHL;AAIE,QAAA,CAAC,EAAE6B,CAJL;AAKE,QAAA,CAAC,EAAEC;AALL;AAAA;AAAA;AAAA;AAAA,cADF,CADF,GASMb,OAAO,CAACC,GAAR,CAAY,EAAZ,CATN;AAUC,KAXH;AAgBAS,IAAAA,KAAK,CAACD,IAAN,eACE;AAAA,iBACGE,eADH,EAEGT,MAFH;AAAA,oBADF;AAMD,GApCD;AAuCA,sBACI;AACE,IAAA,SAAS,EAAG,aAAY,CAAE,KAAI,EAAG,GADnC;AAAA,cAGGQ;AAHH;AAAA;AAAA;AAAA;AAAA,UADJ;AAOD,CAxHD;;KAAMzC,I;AA0HN,eAAeA,IAAf","sourcesContent":["import React, { useRef } from 'react';\nimport { select, max, sum,  hierarchy, linkHorizontal, each, tree } from 'd3';\nimport { scaleLinear } from 'd3-scale';\nimport Vessels from './vessels/vessels.js';\nimport IngredientNode from './ingredients/ingredientNode.js';\n\n\n\nconst Plot = ({recipe, width, height, color, dim}) => {\n\n  const canvasWidth = width - 2*dim.main.padding;\n  const canvasHeight = height - 2*dim.main.padding;\n\n  var root = hierarchy(recipe.recipe[0]);\n\n  const testTree = tree().size([300, 600])(root)\n\n  const desc = (a) => a.descendants()\n  root.each((d, i) => { d.order = i })\n\n  var iorderCount = 0\n  root.eachAfter(\n    function(d){\n      if ('vessel' in d.data){\n        iorderCount = 0\n      } else if ('ingredient' in d.data){\n        d.data.iorder = iorderCount\n        iorderCount += 1\n      }\n    }\n  )\n\n  root.count()\n  root.each(d => { d.vesselSibs = (d.parent ? d.parent.children.filter(a => (\"vessel\" in a.data)) : 'none' )})\n\n  root.each(\n    function(d, i){\n      if (d.depth == 0){\n        d.pHeight = 40\n      }\n      else if ('vessel' in d.data){\n\n        d.pHeight = (d.children.filter(a => !(\"ingredient\" in a.data)).length) * 12\n\n        console.log(d.pHeight)\n        console.log(d.data.vessel)\n\n      }\n    }\n  )\n\n  var allVessels = root.descendants().filter(d =>'vessel' in d.data)\n\n\n  root.each(function(d){\n    if (d.depth == 0){\n      d.posY = 1000\n      d.posX = 100\n    }\n    else if ('vessel' in d.data) {\n      var posYAdd = []\n      allVessels.forEach(a => (d.data.vorder > a.data.vorder) ? posYAdd.push(a.children.length*12) : null)\n      d.posY = sum(posYAdd)\n      d.posX = 10\n    } else if ('ingredient' in d.data) {\n      d.posY = d.parent.posY + ((d.data.iorder) * 12) + 12\n      d.posX = d.parent.posX\n    }\n  })\n\n\n\n\n\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n  // descends = descends.filter(d => (d.depth !== 0))\n\n  var flows = []\n\n  allVessels.forEach((a,i) => {\n\n    const vessel = []\n    vessel.push(\n      <Vessels\n        a={a}\n        i={i}\n        dim={dim}\n        color={color}\n      />\n    )\n\n    const ingredientNodes = []\n\n    a.children.forEach((b,j) => {\n      ('ingredient' in b.data) ?\n        ingredientNodes.push(\n          <IngredientNode\n            color={color}\n            dim={dim}\n            a={a}\n            b={b}\n            j={j}\n          />\n        ) : console.log('')\n      }\n    )\n\n\n\n    flows.push(\n      <>\n        {ingredientNodes}\n        {vessel}\n      </>\n    )\n  })\n\n\n  return (\n      <g\n        transform={`translate(${0}, ${50})`}\n        >\n        {flows}\n      </g>\n  );\n};\n\nexport default Plot;\n"]},"metadata":{},"sourceType":"module"}