{"ast":null,"code":"import { createAlgorithm02 } from '../../type/matrix/utils/algorithm02.js';\nimport { createAlgorithm11 } from '../../type/matrix/utils/algorithm11.js';\nimport { createAlgorithm13 } from '../../type/matrix/utils/algorithm13.js';\nimport { createAlgorithm14 } from '../../type/matrix/utils/algorithm14.js';\nimport { createAlgorithm01 } from '../../type/matrix/utils/algorithm01.js';\nimport { createAlgorithm10 } from '../../type/matrix/utils/algorithm10.js';\nimport { createAlgorithm08 } from '../../type/matrix/utils/algorithm08.js';\nimport { factory } from '../../utils/factory.js';\nimport { leftShiftNumber } from '../../plain/number/index.js';\nimport { leftShiftBigNumber } from '../../utils/bignumber/bitwise.js';\nvar name = 'leftShift';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'zeros', 'DenseMatrix'];\nexport var createLeftShift = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar,\n    zeros,\n    DenseMatrix\n  } = _ref;\n  var algorithm01 = createAlgorithm01({\n    typed\n  });\n  var algorithm02 = createAlgorithm02({\n    typed,\n    equalScalar\n  });\n  var algorithm08 = createAlgorithm08({\n    typed,\n    equalScalar\n  });\n  var algorithm10 = createAlgorithm10({\n    typed,\n    DenseMatrix\n  });\n  var algorithm11 = createAlgorithm11({\n    typed,\n    equalScalar\n  });\n  var algorithm13 = createAlgorithm13({\n    typed\n  });\n  var algorithm14 = createAlgorithm14({\n    typed\n  });\n  /**\n   * Bitwise left logical shift of a value x by y number of bits, `x << y`.\n   * For matrices, the function is evaluated element wise.\n   * For units, the function is evaluated on the best prefix base.\n   *\n   * Syntax:\n   *\n   *    math.leftShift(x, y)\n   *\n   * Examples:\n   *\n   *    math.leftShift(1, 2)               // returns number 4\n   *\n   *    math.leftShift([1, 2, 3], 4)       // returns Array [16, 32, 64]\n   *\n   * See also:\n   *\n   *    leftShift, bitNot, bitOr, bitXor, rightArithShift, rightLogShift\n   *\n   * @param  {number | BigNumber | Array | Matrix} x Value to be shifted\n   * @param  {number | BigNumber} y Amount of shifts\n   * @return {number | BigNumber | Array | Matrix} `x` shifted left `y` times\n   */\n\n  return typed(name, {\n    'number, number': leftShiftNumber,\n    'BigNumber, BigNumber': leftShiftBigNumber,\n    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {\n      return algorithm08(x, y, this, false);\n    },\n    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {\n      return algorithm02(y, x, this, true);\n    },\n    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {\n      return algorithm01(x, y, this, false);\n    },\n    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\n      return algorithm13(x, y, this);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return this(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return this(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return this(x, matrix(y));\n    },\n    'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {\n      // check scalar\n      if (equalScalar(y, 0)) {\n        return x.clone();\n      }\n\n      return algorithm11(x, y, this, false);\n    },\n    'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {\n      // check scalar\n      if (equalScalar(y, 0)) {\n        return x.clone();\n      }\n\n      return algorithm14(x, y, this, false);\n    },\n    'number | BigNumber, SparseMatrix': function numberBigNumberSparseMatrix(x, y) {\n      // check scalar\n      if (equalScalar(x, 0)) {\n        return zeros(y.size(), y.storage());\n      }\n\n      return algorithm10(y, x, this, true);\n    },\n    'number | BigNumber, DenseMatrix': function numberBigNumberDenseMatrix(x, y) {\n      // check scalar\n      if (equalScalar(x, 0)) {\n        return zeros(y.size(), y.storage());\n      }\n\n      return algorithm14(y, x, this, true);\n    },\n    'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {\n      // use matrix implementation\n      return this(matrix(x), y).valueOf();\n    },\n    'number | BigNumber, Array': function numberBigNumberArray(x, y) {\n      // use matrix implementation\n      return this(x, matrix(y)).valueOf();\n    }\n  });\n});","map":{"version":3,"sources":["/Users/elimunn/Desktop/plot-recipes/node_modules/mathjs/lib/esm/function/bitwise/leftShift.js"],"names":["createAlgorithm02","createAlgorithm11","createAlgorithm13","createAlgorithm14","createAlgorithm01","createAlgorithm10","createAlgorithm08","factory","leftShiftNumber","leftShiftBigNumber","name","dependencies","createLeftShift","_ref","typed","matrix","equalScalar","zeros","DenseMatrix","algorithm01","algorithm02","algorithm08","algorithm10","algorithm11","algorithm13","algorithm14","SparseMatrixSparseMatrix","x","y","SparseMatrixDenseMatrix","DenseMatrixSparseMatrix","DenseMatrixDenseMatrix","ArrayArray","valueOf","ArrayMatrix","MatrixArray","SparseMatrixNumberBigNumber","clone","DenseMatrixNumberBigNumber","numberBigNumberSparseMatrix","size","storage","numberBigNumberDenseMatrix","ArrayNumberBigNumber","numberBigNumberArray"],"mappings":"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","sourcesContent":["import { createAlgorithm02 } from '../../type/matrix/utils/algorithm02.js';\nimport { createAlgorithm11 } from '../../type/matrix/utils/algorithm11.js';\nimport { createAlgorithm13 } from '../../type/matrix/utils/algorithm13.js';\nimport { createAlgorithm14 } from '../../type/matrix/utils/algorithm14.js';\nimport { createAlgorithm01 } from '../../type/matrix/utils/algorithm01.js';\nimport { createAlgorithm10 } from '../../type/matrix/utils/algorithm10.js';\nimport { createAlgorithm08 } from '../../type/matrix/utils/algorithm08.js';\nimport { factory } from '../../utils/factory.js';\nimport { leftShiftNumber } from '../../plain/number/index.js';\nimport { leftShiftBigNumber } from '../../utils/bignumber/bitwise.js';\nvar name = 'leftShift';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'zeros', 'DenseMatrix'];\nexport var createLeftShift = /* #__PURE__ */factory(name, dependencies, (_ref) => {\n  var {\n    typed,\n    matrix,\n    equalScalar,\n    zeros,\n    DenseMatrix\n  } = _ref;\n  var algorithm01 = createAlgorithm01({\n    typed\n  });\n  var algorithm02 = createAlgorithm02({\n    typed,\n    equalScalar\n  });\n  var algorithm08 = createAlgorithm08({\n    typed,\n    equalScalar\n  });\n  var algorithm10 = createAlgorithm10({\n    typed,\n    DenseMatrix\n  });\n  var algorithm11 = createAlgorithm11({\n    typed,\n    equalScalar\n  });\n  var algorithm13 = createAlgorithm13({\n    typed\n  });\n  var algorithm14 = createAlgorithm14({\n    typed\n  });\n  /**\n   * Bitwise left logical shift of a value x by y number of bits, `x << y`.\n   * For matrices, the function is evaluated element wise.\n   * For units, the function is evaluated on the best prefix base.\n   *\n   * Syntax:\n   *\n   *    math.leftShift(x, y)\n   *\n   * Examples:\n   *\n   *    math.leftShift(1, 2)               // returns number 4\n   *\n   *    math.leftShift([1, 2, 3], 4)       // returns Array [16, 32, 64]\n   *\n   * See also:\n   *\n   *    leftShift, bitNot, bitOr, bitXor, rightArithShift, rightLogShift\n   *\n   * @param  {number | BigNumber | Array | Matrix} x Value to be shifted\n   * @param  {number | BigNumber} y Amount of shifts\n   * @return {number | BigNumber | Array | Matrix} `x` shifted left `y` times\n   */\n\n  return typed(name, {\n    'number, number': leftShiftNumber,\n    'BigNumber, BigNumber': leftShiftBigNumber,\n    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {\n      return algorithm08(x, y, this, false);\n    },\n    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {\n      return algorithm02(y, x, this, true);\n    },\n    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {\n      return algorithm01(x, y, this, false);\n    },\n    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\n      return algorithm13(x, y, this);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return this(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return this(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return this(x, matrix(y));\n    },\n    'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {\n      // check scalar\n      if (equalScalar(y, 0)) {\n        return x.clone();\n      }\n\n      return algorithm11(x, y, this, false);\n    },\n    'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {\n      // check scalar\n      if (equalScalar(y, 0)) {\n        return x.clone();\n      }\n\n      return algorithm14(x, y, this, false);\n    },\n    'number | BigNumber, SparseMatrix': function numberBigNumberSparseMatrix(x, y) {\n      // check scalar\n      if (equalScalar(x, 0)) {\n        return zeros(y.size(), y.storage());\n      }\n\n      return algorithm10(y, x, this, true);\n    },\n    'number | BigNumber, DenseMatrix': function numberBigNumberDenseMatrix(x, y) {\n      // check scalar\n      if (equalScalar(x, 0)) {\n        return zeros(y.size(), y.storage());\n      }\n\n      return algorithm14(y, x, this, true);\n    },\n    'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {\n      // use matrix implementation\n      return this(matrix(x), y).valueOf();\n    },\n    'number | BigNumber, Array': function numberBigNumberArray(x, y) {\n      // use matrix implementation\n      return this(x, matrix(y)).valueOf();\n    }\n  });\n});"]},"metadata":{},"sourceType":"module"}