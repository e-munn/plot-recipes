{"ast":null,"code":"import { compareText as _compareText } from '../../utils/string.js';\nimport { factory } from '../../utils/factory.js';\nimport { createAlgorithm14 } from '../../type/matrix/utils/algorithm14.js';\nimport { createAlgorithm13 } from '../../type/matrix/utils/algorithm13.js';\nvar name = 'compareText';\nvar dependencies = ['typed', 'matrix'];\nexport var createCompareText = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix\n  } = _ref;\n  var algorithm13 = createAlgorithm13({\n    typed\n  });\n  var algorithm14 = createAlgorithm14({\n    typed\n  });\n  /**\n   * Compare two strings lexically. Comparison is case sensitive.\n   * Returns 1 when x > y, -1 when x < y, and 0 when x == y.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.compareText(x, y)\n   *\n   * Examples:\n   *\n   *    math.compareText('B', 'A')     // returns 1\n   *    math.compareText('2', '10')    // returns 1\n   *    math.compare('2', '10')        // returns -1\n   *    math.compareNatural('2', '10') // returns -1\n   *\n   *    math.compareText('B', ['A', 'B', 'C']) // returns [1, 0, -1]\n   *\n   * See also:\n   *\n   *    equal, equalText, compare, compareNatural\n   *\n   * @param  {string | Array | DenseMatrix} x First string to compare\n   * @param  {string | Array | DenseMatrix} y Second string to compare\n   * @return {number | Array | DenseMatrix} Returns the result of the comparison:\n   *                                        1 when x > y, -1 when x < y, and 0 when x == y.\n   */\n\n  return typed(name, {\n    'any, any': _compareText,\n    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\n      return algorithm13(x, y, _compareText);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return this(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return this(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return this(x, matrix(y));\n    },\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\n      return algorithm14(x, y, _compareText, false);\n    },\n    'any, DenseMatrix': function anyDenseMatrix(x, y) {\n      return algorithm14(y, x, _compareText, true);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, _compareText, false).valueOf();\n    },\n    'any, Array': function anyArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, _compareText, true).valueOf();\n    }\n  });\n});\nexport var createCompareTextNumber = /* #__PURE__ */factory(name, ['typed'], _ref2 => {\n  var {\n    typed\n  } = _ref2;\n  return typed(name, {\n    'any, any': _compareText\n  });\n});","map":{"version":3,"sources":["/Users/elimunn/Desktop/plot-recipes/node_modules/mathjs/lib/esm/function/relational/compareText.js"],"names":["compareText","_compareText","factory","createAlgorithm14","createAlgorithm13","name","dependencies","createCompareText","_ref","typed","matrix","algorithm13","algorithm14","DenseMatrixDenseMatrix","x","y","ArrayArray","valueOf","ArrayMatrix","MatrixArray","DenseMatrixAny","anyDenseMatrix","ArrayAny","anyArray","createCompareTextNumber","_ref2"],"mappings":"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","sourcesContent":["import { compareText as _compareText } from '../../utils/string.js';\nimport { factory } from '../../utils/factory.js';\nimport { createAlgorithm14 } from '../../type/matrix/utils/algorithm14.js';\nimport { createAlgorithm13 } from '../../type/matrix/utils/algorithm13.js';\nvar name = 'compareText';\nvar dependencies = ['typed', 'matrix'];\nexport var createCompareText = /* #__PURE__ */factory(name, dependencies, (_ref) => {\n  var {\n    typed,\n    matrix\n  } = _ref;\n  var algorithm13 = createAlgorithm13({\n    typed\n  });\n  var algorithm14 = createAlgorithm14({\n    typed\n  });\n  /**\n   * Compare two strings lexically. Comparison is case sensitive.\n   * Returns 1 when x > y, -1 when x < y, and 0 when x == y.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.compareText(x, y)\n   *\n   * Examples:\n   *\n   *    math.compareText('B', 'A')     // returns 1\n   *    math.compareText('2', '10')    // returns 1\n   *    math.compare('2', '10')        // returns -1\n   *    math.compareNatural('2', '10') // returns -1\n   *\n   *    math.compareText('B', ['A', 'B', 'C']) // returns [1, 0, -1]\n   *\n   * See also:\n   *\n   *    equal, equalText, compare, compareNatural\n   *\n   * @param  {string | Array | DenseMatrix} x First string to compare\n   * @param  {string | Array | DenseMatrix} y Second string to compare\n   * @return {number | Array | DenseMatrix} Returns the result of the comparison:\n   *                                        1 when x > y, -1 when x < y, and 0 when x == y.\n   */\n\n  return typed(name, {\n    'any, any': _compareText,\n    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\n      return algorithm13(x, y, _compareText);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return this(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return this(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return this(x, matrix(y));\n    },\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\n      return algorithm14(x, y, _compareText, false);\n    },\n    'any, DenseMatrix': function anyDenseMatrix(x, y) {\n      return algorithm14(y, x, _compareText, true);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, _compareText, false).valueOf();\n    },\n    'any, Array': function anyArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, _compareText, true).valueOf();\n    }\n  });\n});\nexport var createCompareTextNumber = /* #__PURE__ */factory(name, ['typed'], (_ref2) => {\n  var {\n    typed\n  } = _ref2;\n  return typed(name, {\n    'any, any': _compareText\n  });\n});"]},"metadata":{},"sourceType":"module"}