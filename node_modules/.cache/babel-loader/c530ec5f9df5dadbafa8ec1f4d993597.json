{"ast":null,"code":"import { isArray, isMatrix, isDenseMatrix, isSparseMatrix } from '../../../../utils/is.js';\nimport { arraySize } from '../../../../utils/array.js';\nimport { format } from '../../../../utils/string.js';\nexport function createSolveValidation(_ref) {\n  var {\n    DenseMatrix\n  } = _ref;\n  /**\n   * Validates matrix and column vector b for backward/forward substitution algorithms.\n   *\n   * @param {Matrix} m            An N x N matrix\n   * @param {Array | Matrix} b    A column vector\n   * @param {Boolean} copy        Return a copy of vector b\n   *\n   * @return {DenseMatrix}        Dense column vector b\n   */\n\n  return function solveValidation(m, b, copy) {\n    var mSize = m.size();\n\n    if (mSize.length !== 2) {\n      throw new RangeError('Matrix must be two dimensional (size: ' + format(mSize) + ')');\n    }\n\n    var rows = mSize[0];\n    var columns = mSize[1];\n\n    if (rows !== columns) {\n      throw new RangeError('Matrix must be square (size: ' + format(mSize) + ')');\n    }\n\n    var data = [];\n\n    if (isMatrix(b)) {\n      var bSize = b.size();\n      var bdata = b._data; // 1-dim vector\n\n      if (bSize.length === 1) {\n        if (bSize[0] !== rows) {\n          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');\n        }\n\n        for (var i = 0; i < rows; i++) {\n          data[i] = [bdata[i]];\n        }\n\n        return new DenseMatrix({\n          data: data,\n          size: [rows, 1],\n          datatype: b._datatype\n        });\n      } // 2-dim column\n\n\n      if (bSize.length === 2) {\n        if (bSize[0] !== rows || bSize[1] !== 1) {\n          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');\n        }\n\n        if (isDenseMatrix(b)) {\n          if (copy) {\n            data = [];\n\n            for (var _i = 0; _i < rows; _i++) {\n              data[_i] = [bdata[_i][0]];\n            }\n\n            return new DenseMatrix({\n              data: data,\n              size: [rows, 1],\n              datatype: b._datatype\n            });\n          }\n\n          return b;\n        }\n\n        if (isSparseMatrix(b)) {\n          for (var _i2 = 0; _i2 < rows; _i2++) {\n            data[_i2] = [0];\n          }\n\n          var values = b._values;\n          var index = b._index;\n          var ptr = b._ptr;\n\n          for (var k1 = ptr[1], k = ptr[0]; k < k1; k++) {\n            var _i3 = index[k];\n            data[_i3][0] = values[k];\n          }\n\n          return new DenseMatrix({\n            data: data,\n            size: [rows, 1],\n            datatype: b._datatype\n          });\n        }\n      }\n\n      throw new RangeError('Dimension mismatch. The right side has to be either 1- or 2-dimensional vector.');\n    }\n\n    if (isArray(b)) {\n      var bsize = arraySize(b);\n\n      if (bsize.length === 1) {\n        if (bsize[0] !== rows) {\n          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');\n        }\n\n        for (var _i4 = 0; _i4 < rows; _i4++) {\n          data[_i4] = [b[_i4]];\n        }\n\n        return new DenseMatrix({\n          data: data,\n          size: [rows, 1]\n        });\n      }\n\n      if (bsize.length === 2) {\n        if (bsize[0] !== rows || bsize[1] !== 1) {\n          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');\n        }\n\n        for (var _i5 = 0; _i5 < rows; _i5++) {\n          data[_i5] = [b[_i5][0]];\n        }\n\n        return new DenseMatrix({\n          data: data,\n          size: [rows, 1]\n        });\n      }\n\n      throw new RangeError('Dimension mismatch. The right side has to be either 1- or 2-dimensional vector.');\n    }\n  };\n}","map":{"version":3,"sources":["/Users/elimunn/Desktop/plot-recipes/node_modules/mathjs/lib/esm/function/algebra/solver/utils/solveValidation.js"],"names":["isArray","isMatrix","isDenseMatrix","isSparseMatrix","arraySize","format","createSolveValidation","_ref","DenseMatrix","solveValidation","m","b","copy","mSize","size","length","RangeError","rows","columns","data","bSize","bdata","_data","i","datatype","_datatype","_i","_i2","values","_values","index","_index","ptr","_ptr","k1","k","_i3","bsize","_i4","_i5"],"mappings":"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","sourcesContent":["import { isArray, isMatrix, isDenseMatrix, isSparseMatrix } from '../../../../utils/is.js';\nimport { arraySize } from '../../../../utils/array.js';\nimport { format } from '../../../../utils/string.js';\nexport function createSolveValidation(_ref) {\n  var {\n    DenseMatrix\n  } = _ref;\n\n  /**\n   * Validates matrix and column vector b for backward/forward substitution algorithms.\n   *\n   * @param {Matrix} m            An N x N matrix\n   * @param {Array | Matrix} b    A column vector\n   * @param {Boolean} copy        Return a copy of vector b\n   *\n   * @return {DenseMatrix}        Dense column vector b\n   */\n  return function solveValidation(m, b, copy) {\n    var mSize = m.size();\n\n    if (mSize.length !== 2) {\n      throw new RangeError('Matrix must be two dimensional (size: ' + format(mSize) + ')');\n    }\n\n    var rows = mSize[0];\n    var columns = mSize[1];\n\n    if (rows !== columns) {\n      throw new RangeError('Matrix must be square (size: ' + format(mSize) + ')');\n    }\n\n    var data = [];\n\n    if (isMatrix(b)) {\n      var bSize = b.size();\n      var bdata = b._data; // 1-dim vector\n\n      if (bSize.length === 1) {\n        if (bSize[0] !== rows) {\n          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');\n        }\n\n        for (var i = 0; i < rows; i++) {\n          data[i] = [bdata[i]];\n        }\n\n        return new DenseMatrix({\n          data: data,\n          size: [rows, 1],\n          datatype: b._datatype\n        });\n      } // 2-dim column\n\n\n      if (bSize.length === 2) {\n        if (bSize[0] !== rows || bSize[1] !== 1) {\n          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');\n        }\n\n        if (isDenseMatrix(b)) {\n          if (copy) {\n            data = [];\n\n            for (var _i = 0; _i < rows; _i++) {\n              data[_i] = [bdata[_i][0]];\n            }\n\n            return new DenseMatrix({\n              data: data,\n              size: [rows, 1],\n              datatype: b._datatype\n            });\n          }\n\n          return b;\n        }\n\n        if (isSparseMatrix(b)) {\n          for (var _i2 = 0; _i2 < rows; _i2++) {\n            data[_i2] = [0];\n          }\n\n          var values = b._values;\n          var index = b._index;\n          var ptr = b._ptr;\n\n          for (var k1 = ptr[1], k = ptr[0]; k < k1; k++) {\n            var _i3 = index[k];\n            data[_i3][0] = values[k];\n          }\n\n          return new DenseMatrix({\n            data: data,\n            size: [rows, 1],\n            datatype: b._datatype\n          });\n        }\n      }\n\n      throw new RangeError('Dimension mismatch. The right side has to be either 1- or 2-dimensional vector.');\n    }\n\n    if (isArray(b)) {\n      var bsize = arraySize(b);\n\n      if (bsize.length === 1) {\n        if (bsize[0] !== rows) {\n          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');\n        }\n\n        for (var _i4 = 0; _i4 < rows; _i4++) {\n          data[_i4] = [b[_i4]];\n        }\n\n        return new DenseMatrix({\n          data: data,\n          size: [rows, 1]\n        });\n      }\n\n      if (bsize.length === 2) {\n        if (bsize[0] !== rows || bsize[1] !== 1) {\n          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');\n        }\n\n        for (var _i5 = 0; _i5 < rows; _i5++) {\n          data[_i5] = [b[_i5][0]];\n        }\n\n        return new DenseMatrix({\n          data: data,\n          size: [rows, 1]\n        });\n      }\n\n      throw new RangeError('Dimension mismatch. The right side has to be either 1- or 2-dimensional vector.');\n    }\n  };\n}"]},"metadata":{},"sourceType":"module"}