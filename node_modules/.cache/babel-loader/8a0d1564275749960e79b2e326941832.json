{"ast":null,"code":"import { deepForEach, reduce, containsCollections } from '../../utils/collection.js';\nimport { factory } from '../../utils/factory.js';\nimport { improveErrorMessage } from './utils/improveErrorMessage.js';\nvar name = 'max';\nvar dependencies = ['typed', 'config', 'numeric', 'larger'];\nexport var createMax = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    numeric,\n    larger\n  } = _ref;\n  /**\n   * Compute the maximum value of a matrix or a  list with values.\n   * In case of a multi dimensional array, the maximum of the flattened array\n   * will be calculated. When `dim` is provided, the maximum over the selected\n   * dimension will be calculated. Parameter `dim` is zero-based.\n   *\n   * Syntax:\n   *\n   *     math.max(a, b, c, ...)\n   *     math.max(A)\n   *     math.max(A, dim)\n   *\n   * Examples:\n   *\n   *     math.max(2, 1, 4, 3)                  // returns 4\n   *     math.max([2, 1, 4, 3])                // returns 4\n   *\n   *     // maximum over a specified dimension (zero-based)\n   *     math.max([[2, 5], [4, 3], [1, 7]], 0) // returns [4, 7]\n   *     math.max([[2, 5], [4, 3]], [1, 7], 1) // returns [5, 4, 7]\n   *\n   *     math.max(2.7, 7.1, -4.5, 2.0, 4.1)    // returns 7.1\n   *     math.min(2.7, 7.1, -4.5, 2.0, 4.1)    // returns -4.5\n   *\n   * See also:\n   *\n   *    mean, median, min, prod, std, sum, variance\n   *\n   * @param {... *} args  A single matrix or or multiple scalar values\n   * @return {*} The maximum value\n   */\n\n  return typed(name, {\n    // max([a, b, c, d, ...])\n    'Array | Matrix': _max,\n    // max([a, b, c, d, ...], dim)\n    'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(array, dim) {\n      return reduce(array, dim.valueOf(), _largest);\n    },\n    // max(a, b, c, d, ...)\n    '...': function _(args) {\n      if (containsCollections(args)) {\n        throw new TypeError('Scalar values expected in function max');\n      }\n\n      return _max(args);\n    }\n  });\n  /**\n   * Return the largest of two values\n   * @param {*} x\n   * @param {*} y\n   * @returns {*} Returns x when x is largest, or y when y is largest\n   * @private\n   */\n\n  function _largest(x, y) {\n    try {\n      return larger(x, y) ? x : y;\n    } catch (err) {\n      throw improveErrorMessage(err, 'max', y);\n    }\n  }\n  /**\n   * Recursively calculate the maximum value in an n-dimensional array\n   * @param {Array} array\n   * @return {number} max\n   * @private\n   */\n\n\n  function _max(array) {\n    var res;\n    deepForEach(array, function (value) {\n      try {\n        if (isNaN(value) && typeof value === 'number') {\n          res = NaN;\n        } else if (res === undefined || larger(value, res)) {\n          res = value;\n        }\n      } catch (err) {\n        throw improveErrorMessage(err, 'max', value);\n      }\n    });\n\n    if (res === undefined) {\n      throw new Error('Cannot calculate max of an empty array');\n    } // make sure returning numeric value: parse a string into a numeric value\n\n\n    if (typeof res === 'string') {\n      res = numeric(res, config.number);\n    }\n\n    return res;\n  }\n});","map":{"version":3,"sources":["/Users/elimunn/Desktop/plot-recipes/node_modules/mathjs/lib/esm/function/statistics/max.js"],"names":["deepForEach","reduce","containsCollections","factory","improveErrorMessage","name","dependencies","createMax","_ref","typed","config","numeric","larger","_max","ArrayMatrixNumberBigNumber","array","dim","valueOf","_largest","_","args","TypeError","x","y","err","res","value","isNaN","NaN","undefined","Error","number"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,MAAtB,EAA8BC,mBAA9B,QAAyD,2BAAzD;AACA,SAASC,OAAT,QAAwB,wBAAxB;AACA,SAASC,mBAAT,QAAoC,gCAApC;AACA,IAAIC,IAAI,GAAG,KAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,QAAV,EAAoB,SAApB,EAA+B,QAA/B,CAAnB;AACA,OAAO,IAAIC,SAAS,GAAG,eAAeJ,OAAO,CAACE,IAAD,EAAOC,YAAP,EAAsBE,IAAD,IAAU;AAC1E,MAAI;AACFC,IAAAA,KADE;AAEFC,IAAAA,MAFE;AAGFC,IAAAA,OAHE;AAIFC,IAAAA;AAJE,MAKAJ,IALJ;AAOA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAOC,KAAK,CAACJ,IAAD,EAAO;AACjB;AACA,sBAAkBQ,IAFD;AAGjB;AACA,0CAAsC,SAASC,0BAAT,CAAoCC,KAApC,EAA2CC,GAA3C,EAAgD;AACpF,aAAOf,MAAM,CAACc,KAAD,EAAQC,GAAG,CAACC,OAAJ,EAAR,EAAuBC,QAAvB,CAAb;AACD,KANgB;AAOjB;AACA,WAAO,SAASC,CAAT,CAAWC,IAAX,EAAiB;AACtB,UAAIlB,mBAAmB,CAACkB,IAAD,CAAvB,EAA+B;AAC7B,cAAM,IAAIC,SAAJ,CAAc,wCAAd,CAAN;AACD;;AAED,aAAOR,IAAI,CAACO,IAAD,CAAX;AACD;AAdgB,GAAP,CAAZ;AAgBA;AACF;AACA;AACA;AACA;AACA;AACA;;AAEE,WAASF,QAAT,CAAkBI,CAAlB,EAAqBC,CAArB,EAAwB;AACtB,QAAI;AACF,aAAOX,MAAM,CAACU,CAAD,EAAIC,CAAJ,CAAN,GAAeD,CAAf,GAAmBC,CAA1B;AACD,KAFD,CAEE,OAAOC,GAAP,EAAY;AACZ,YAAMpB,mBAAmB,CAACoB,GAAD,EAAM,KAAN,EAAaD,CAAb,CAAzB;AACD;AACF;AACD;AACF;AACA;AACA;AACA;AACA;;;AAGE,WAASV,IAAT,CAAcE,KAAd,EAAqB;AACnB,QAAIU,GAAJ;AACAzB,IAAAA,WAAW,CAACe,KAAD,EAAQ,UAAUW,KAAV,EAAiB;AAClC,UAAI;AACF,YAAIC,KAAK,CAACD,KAAD,CAAL,IAAgB,OAAOA,KAAP,KAAiB,QAArC,EAA+C;AAC7CD,UAAAA,GAAG,GAAGG,GAAN;AACD,SAFD,MAEO,IAAIH,GAAG,KAAKI,SAAR,IAAqBjB,MAAM,CAACc,KAAD,EAAQD,GAAR,CAA/B,EAA6C;AAClDA,UAAAA,GAAG,GAAGC,KAAN;AACD;AACF,OAND,CAME,OAAOF,GAAP,EAAY;AACZ,cAAMpB,mBAAmB,CAACoB,GAAD,EAAM,KAAN,EAAaE,KAAb,CAAzB;AACD;AACF,KAVU,CAAX;;AAYA,QAAID,GAAG,KAAKI,SAAZ,EAAuB;AACrB,YAAM,IAAIC,KAAJ,CAAU,wCAAV,CAAN;AACD,KAhBkB,CAgBjB;;;AAGF,QAAI,OAAOL,GAAP,KAAe,QAAnB,EAA6B;AAC3BA,MAAAA,GAAG,GAAGd,OAAO,CAACc,GAAD,EAAMf,MAAM,CAACqB,MAAb,CAAb;AACD;;AAED,WAAON,GAAP;AACD;AACF,CAvG4C,CAAtC","sourcesContent":["import { deepForEach, reduce, containsCollections } from '../../utils/collection.js';\nimport { factory } from '../../utils/factory.js';\nimport { improveErrorMessage } from './utils/improveErrorMessage.js';\nvar name = 'max';\nvar dependencies = ['typed', 'config', 'numeric', 'larger'];\nexport var createMax = /* #__PURE__ */factory(name, dependencies, (_ref) => {\n  var {\n    typed,\n    config,\n    numeric,\n    larger\n  } = _ref;\n\n  /**\n   * Compute the maximum value of a matrix or a  list with values.\n   * In case of a multi dimensional array, the maximum of the flattened array\n   * will be calculated. When `dim` is provided, the maximum over the selected\n   * dimension will be calculated. Parameter `dim` is zero-based.\n   *\n   * Syntax:\n   *\n   *     math.max(a, b, c, ...)\n   *     math.max(A)\n   *     math.max(A, dim)\n   *\n   * Examples:\n   *\n   *     math.max(2, 1, 4, 3)                  // returns 4\n   *     math.max([2, 1, 4, 3])                // returns 4\n   *\n   *     // maximum over a specified dimension (zero-based)\n   *     math.max([[2, 5], [4, 3], [1, 7]], 0) // returns [4, 7]\n   *     math.max([[2, 5], [4, 3]], [1, 7], 1) // returns [5, 4, 7]\n   *\n   *     math.max(2.7, 7.1, -4.5, 2.0, 4.1)    // returns 7.1\n   *     math.min(2.7, 7.1, -4.5, 2.0, 4.1)    // returns -4.5\n   *\n   * See also:\n   *\n   *    mean, median, min, prod, std, sum, variance\n   *\n   * @param {... *} args  A single matrix or or multiple scalar values\n   * @return {*} The maximum value\n   */\n  return typed(name, {\n    // max([a, b, c, d, ...])\n    'Array | Matrix': _max,\n    // max([a, b, c, d, ...], dim)\n    'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(array, dim) {\n      return reduce(array, dim.valueOf(), _largest);\n    },\n    // max(a, b, c, d, ...)\n    '...': function _(args) {\n      if (containsCollections(args)) {\n        throw new TypeError('Scalar values expected in function max');\n      }\n\n      return _max(args);\n    }\n  });\n  /**\n   * Return the largest of two values\n   * @param {*} x\n   * @param {*} y\n   * @returns {*} Returns x when x is largest, or y when y is largest\n   * @private\n   */\n\n  function _largest(x, y) {\n    try {\n      return larger(x, y) ? x : y;\n    } catch (err) {\n      throw improveErrorMessage(err, 'max', y);\n    }\n  }\n  /**\n   * Recursively calculate the maximum value in an n-dimensional array\n   * @param {Array} array\n   * @return {number} max\n   * @private\n   */\n\n\n  function _max(array) {\n    var res;\n    deepForEach(array, function (value) {\n      try {\n        if (isNaN(value) && typeof value === 'number') {\n          res = NaN;\n        } else if (res === undefined || larger(value, res)) {\n          res = value;\n        }\n      } catch (err) {\n        throw improveErrorMessage(err, 'max', value);\n      }\n    });\n\n    if (res === undefined) {\n      throw new Error('Cannot calculate max of an empty array');\n    } // make sure returning numeric value: parse a string into a numeric value\n\n\n    if (typeof res === 'string') {\n      res = numeric(res, config.number);\n    }\n\n    return res;\n  }\n});"]},"metadata":{},"sourceType":"module"}