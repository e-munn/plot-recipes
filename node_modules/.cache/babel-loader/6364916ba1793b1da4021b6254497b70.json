{"ast":null,"code":"// TODO this could be improved by simplifying seperated constants under associative and commutative operators\nimport { isFraction, isNode, isOperatorNode } from '../../../utils/is.js';\nimport { factory } from '../../../utils/factory.js';\nimport { createUtil } from './util.js';\nimport { noBignumber, noFraction } from '../../../utils/noop.js';\nvar name = 'simplifyConstant';\nvar dependencies = ['typed', 'config', 'mathWithTransform', '?fraction', '?bignumber', 'ConstantNode', 'OperatorNode', 'FunctionNode', 'SymbolNode'];\nexport var createSimplifyConstant = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    mathWithTransform,\n    fraction,\n    bignumber,\n    ConstantNode,\n    OperatorNode,\n    FunctionNode,\n    SymbolNode\n  } = _ref;\n  var {\n    isCommutative,\n    isAssociative,\n    allChildren,\n    createMakeNodeFunction\n  } = createUtil({\n    FunctionNode,\n    OperatorNode,\n    SymbolNode\n  });\n\n  function simplifyConstant(expr, options) {\n    var res = foldFraction(expr, options);\n    return isNode(res) ? res : _toNode(res);\n  }\n\n  function _eval(fnname, args, options) {\n    try {\n      return _toNumber(mathWithTransform[fnname].apply(null, args), options);\n    } catch (ignore) {\n      // sometimes the implicit type conversion causes the evaluation to fail, so we'll try again after removing Fractions\n      args = args.map(function (x) {\n        if (isFraction(x)) {\n          return x.valueOf();\n        }\n\n        return x;\n      });\n      return _toNumber(mathWithTransform[fnname].apply(null, args), options);\n    }\n  }\n\n  var _toNode = typed({\n    Fraction: _fractionToNode,\n    number: function number(n) {\n      if (n < 0) {\n        return unaryMinusNode(new ConstantNode(-n));\n      }\n\n      return new ConstantNode(n);\n    },\n    BigNumber: function BigNumber(n) {\n      if (n < 0) {\n        return unaryMinusNode(new ConstantNode(-n));\n      }\n\n      return new ConstantNode(n); // old parameters: (n.toString(), 'number')\n    },\n    Complex: function Complex(s) {\n      throw new Error('Cannot convert Complex number to Node');\n    }\n  }); // convert a number to a fraction only if it can be expressed exactly,\n  // and when both numerator and denominator are small enough\n\n\n  function _exactFraction(n, options) {\n    var exactFractions = options && options.exactFractions !== false;\n\n    if (exactFractions && isFinite(n) && fraction) {\n      var f = fraction(n);\n      var fractionsLimit = options && typeof options.fractionsLimit === 'number' ? options.fractionsLimit : Infinity; // no limit by default\n\n      if (f.valueOf() === n && f.n < fractionsLimit && f.d < fractionsLimit) {\n        return f;\n      }\n    }\n\n    return n;\n  } // Convert numbers to a preferred number type in preference order: Fraction, number, Complex\n  // BigNumbers are left alone\n\n\n  var _toNumber = typed({\n    'string, Object': function stringObject(s, options) {\n      if (config.number === 'BigNumber') {\n        if (bignumber === undefined) {\n          noBignumber();\n        }\n\n        return bignumber(s);\n      } else if (config.number === 'Fraction') {\n        if (fraction === undefined) {\n          noFraction();\n        }\n\n        return fraction(s);\n      } else {\n        var n = parseFloat(s);\n        return _exactFraction(n, options);\n      }\n    },\n    'Fraction, Object': function FractionObject(s, options) {\n      return s;\n    },\n    // we don't need options here\n    'BigNumber, Object': function BigNumberObject(s, options) {\n      return s;\n    },\n    // we don't need options here\n    'number, Object': function numberObject(s, options) {\n      return _exactFraction(s, options);\n    },\n    'Complex, Object': function ComplexObject(s, options) {\n      if (s.im !== 0) {\n        return s;\n      }\n\n      return _exactFraction(s.re, options);\n    }\n  });\n\n  function unaryMinusNode(n) {\n    return new OperatorNode('-', 'unaryMinus', [n]);\n  }\n\n  function _fractionToNode(f) {\n    var n;\n    var vn = f.s * f.n;\n\n    if (vn < 0) {\n      n = new OperatorNode('-', 'unaryMinus', [new ConstantNode(-vn)]);\n    } else {\n      n = new ConstantNode(vn);\n    }\n\n    if (f.d === 1) {\n      return n;\n    }\n\n    return new OperatorNode('/', 'divide', [n, new ConstantNode(f.d)]);\n  }\n  /*\n   * Create a binary tree from a list of Fractions and Nodes.\n   * Tries to fold Fractions by evaluating them until the first Node in the list is hit, so\n   * `args` should be sorted to have the Fractions at the start (if the operator is commutative).\n   * @param args - list of Fractions and Nodes\n   * @param fn - evaluator for the binary operation evaluator that accepts two Fractions\n   * @param makeNode - creates a binary OperatorNode/FunctionNode from a list of child Nodes\n   * if args.length is 1, returns args[0]\n   * @return - Either a Node representing a binary expression or Fraction\n   */\n\n\n  function foldOp(fn, args, makeNode, options) {\n    return args.reduce(function (a, b) {\n      if (!isNode(a) && !isNode(b)) {\n        try {\n          return _eval(fn, [a, b], options);\n        } catch (ignoreandcontinue) {}\n\n        a = _toNode(a);\n        b = _toNode(b);\n      } else if (!isNode(a)) {\n        a = _toNode(a);\n      } else if (!isNode(b)) {\n        b = _toNode(b);\n      }\n\n      return makeNode([a, b]);\n    });\n  } // destroys the original node and returns a folded one\n\n\n  function foldFraction(node, options) {\n    switch (node.type) {\n      case 'SymbolNode':\n        return node;\n\n      case 'ConstantNode':\n        if (typeof node.value === 'number' || !isNaN(node.value)) {\n          return _toNumber(node.value, options);\n        }\n\n        return node;\n\n      case 'FunctionNode':\n        if (mathWithTransform[node.name] && mathWithTransform[node.name].rawArgs) {\n          return node;\n        }\n\n        {\n          // Process operators as OperatorNode\n          var operatorFunctions = ['add', 'multiply'];\n\n          if (operatorFunctions.indexOf(node.name) === -1) {\n            var args = node.args.map(arg => foldFraction(arg, options)); // If all args are numbers\n\n            if (!args.some(isNode)) {\n              try {\n                return _eval(node.name, args, options);\n              } catch (ignoreandcontine) {}\n            } // Convert all args to nodes and construct a symbolic function call\n\n\n            args = args.map(function (arg) {\n              return isNode(arg) ? arg : _toNode(arg);\n            });\n            return new FunctionNode(node.name, args);\n          } else {// treat as operator\n          }\n        }\n\n      /* falls through */\n\n      case 'OperatorNode':\n        {\n          var fn = node.fn.toString();\n\n          var _args;\n\n          var res;\n          var makeNode = createMakeNodeFunction(node);\n\n          if (isOperatorNode(node) && node.isUnary()) {\n            _args = [foldFraction(node.args[0], options)];\n\n            if (!isNode(_args[0])) {\n              res = _eval(fn, _args, options);\n            } else {\n              res = makeNode(_args);\n            }\n          } else if (isAssociative(node)) {\n            _args = allChildren(node);\n            _args = _args.map(arg => foldFraction(arg, options));\n\n            if (isCommutative(fn)) {\n              // commutative binary operator\n              var consts = [];\n              var vars = [];\n\n              for (var i = 0; i < _args.length; i++) {\n                if (!isNode(_args[i])) {\n                  consts.push(_args[i]);\n                } else {\n                  vars.push(_args[i]);\n                }\n              }\n\n              if (consts.length > 1) {\n                res = foldOp(fn, consts, makeNode, options);\n                vars.unshift(res);\n                res = foldOp(fn, vars, makeNode, options);\n              } else {\n                // we won't change the children order since it's not neccessary\n                res = foldOp(fn, _args, makeNode, options);\n              }\n            } else {\n              // non-commutative binary operator\n              res = foldOp(fn, _args, makeNode, options);\n            }\n          } else {\n            // non-associative binary operator\n            _args = node.args.map(arg => foldFraction(arg, options));\n            res = foldOp(fn, _args, makeNode, options);\n          }\n\n          return res;\n        }\n\n      case 'ParenthesisNode':\n        // remove the uneccessary parenthesis\n        return foldFraction(node.content, options);\n\n      case 'AccessorNode':\n      /* falls through */\n\n      case 'ArrayNode':\n      /* falls through */\n\n      case 'AssignmentNode':\n      /* falls through */\n\n      case 'BlockNode':\n      /* falls through */\n\n      case 'FunctionAssignmentNode':\n      /* falls through */\n\n      case 'IndexNode':\n      /* falls through */\n\n      case 'ObjectNode':\n      /* falls through */\n\n      case 'RangeNode':\n      /* falls through */\n\n      case 'ConditionalNode':\n      /* falls through */\n\n      default:\n        throw new Error(\"Unimplemented node type in simplifyConstant: \".concat(node.type));\n    }\n  }\n\n  return simplifyConstant;\n});","map":{"version":3,"sources":["/Users/elimunn/Desktop/plot-recipes/node_modules/mathjs/lib/esm/function/algebra/simplify/simplifyConstant.js"],"names":["isFraction","isNode","isOperatorNode","factory","createUtil","noBignumber","noFraction","name","dependencies","createSimplifyConstant","_ref","typed","config","mathWithTransform","fraction","bignumber","ConstantNode","OperatorNode","FunctionNode","SymbolNode","isCommutative","isAssociative","allChildren","createMakeNodeFunction","simplifyConstant","expr","options","res","foldFraction","_toNode","_eval","fnname","args","_toNumber","apply","ignore","map","x","valueOf","Fraction","_fractionToNode","number","n","unaryMinusNode","BigNumber","Complex","s","Error","_exactFraction","exactFractions","isFinite","f","fractionsLimit","Infinity","d","stringObject","undefined","parseFloat","FractionObject","BigNumberObject","numberObject","ComplexObject","im","re","vn","foldOp","fn","makeNode","reduce","a","b","ignoreandcontinue","node","type","value","isNaN","rawArgs","operatorFunctions","indexOf","arg","some","ignoreandcontine","toString","_args","isUnary","consts","vars","i","length","push","unshift","content","concat"],"mappings":"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","sourcesContent":["// TODO this could be improved by simplifying seperated constants under associative and commutative operators\nimport { isFraction, isNode, isOperatorNode } from '../../../utils/is.js';\nimport { factory } from '../../../utils/factory.js';\nimport { createUtil } from './util.js';\nimport { noBignumber, noFraction } from '../../../utils/noop.js';\nvar name = 'simplifyConstant';\nvar dependencies = ['typed', 'config', 'mathWithTransform', '?fraction', '?bignumber', 'ConstantNode', 'OperatorNode', 'FunctionNode', 'SymbolNode'];\nexport var createSimplifyConstant = /* #__PURE__ */factory(name, dependencies, (_ref) => {\n  var {\n    typed,\n    config,\n    mathWithTransform,\n    fraction,\n    bignumber,\n    ConstantNode,\n    OperatorNode,\n    FunctionNode,\n    SymbolNode\n  } = _ref;\n  var {\n    isCommutative,\n    isAssociative,\n    allChildren,\n    createMakeNodeFunction\n  } = createUtil({\n    FunctionNode,\n    OperatorNode,\n    SymbolNode\n  });\n\n  function simplifyConstant(expr, options) {\n    var res = foldFraction(expr, options);\n    return isNode(res) ? res : _toNode(res);\n  }\n\n  function _eval(fnname, args, options) {\n    try {\n      return _toNumber(mathWithTransform[fnname].apply(null, args), options);\n    } catch (ignore) {\n      // sometimes the implicit type conversion causes the evaluation to fail, so we'll try again after removing Fractions\n      args = args.map(function (x) {\n        if (isFraction(x)) {\n          return x.valueOf();\n        }\n\n        return x;\n      });\n      return _toNumber(mathWithTransform[fnname].apply(null, args), options);\n    }\n  }\n\n  var _toNode = typed({\n    Fraction: _fractionToNode,\n    number: function number(n) {\n      if (n < 0) {\n        return unaryMinusNode(new ConstantNode(-n));\n      }\n\n      return new ConstantNode(n);\n    },\n    BigNumber: function BigNumber(n) {\n      if (n < 0) {\n        return unaryMinusNode(new ConstantNode(-n));\n      }\n\n      return new ConstantNode(n); // old parameters: (n.toString(), 'number')\n    },\n    Complex: function Complex(s) {\n      throw new Error('Cannot convert Complex number to Node');\n    }\n  }); // convert a number to a fraction only if it can be expressed exactly,\n  // and when both numerator and denominator are small enough\n\n\n  function _exactFraction(n, options) {\n    var exactFractions = options && options.exactFractions !== false;\n\n    if (exactFractions && isFinite(n) && fraction) {\n      var f = fraction(n);\n      var fractionsLimit = options && typeof options.fractionsLimit === 'number' ? options.fractionsLimit : Infinity; // no limit by default\n\n      if (f.valueOf() === n && f.n < fractionsLimit && f.d < fractionsLimit) {\n        return f;\n      }\n    }\n\n    return n;\n  } // Convert numbers to a preferred number type in preference order: Fraction, number, Complex\n  // BigNumbers are left alone\n\n\n  var _toNumber = typed({\n    'string, Object': function stringObject(s, options) {\n      if (config.number === 'BigNumber') {\n        if (bignumber === undefined) {\n          noBignumber();\n        }\n\n        return bignumber(s);\n      } else if (config.number === 'Fraction') {\n        if (fraction === undefined) {\n          noFraction();\n        }\n\n        return fraction(s);\n      } else {\n        var n = parseFloat(s);\n        return _exactFraction(n, options);\n      }\n    },\n    'Fraction, Object': function FractionObject(s, options) {\n      return s;\n    },\n    // we don't need options here\n    'BigNumber, Object': function BigNumberObject(s, options) {\n      return s;\n    },\n    // we don't need options here\n    'number, Object': function numberObject(s, options) {\n      return _exactFraction(s, options);\n    },\n    'Complex, Object': function ComplexObject(s, options) {\n      if (s.im !== 0) {\n        return s;\n      }\n\n      return _exactFraction(s.re, options);\n    }\n  });\n\n  function unaryMinusNode(n) {\n    return new OperatorNode('-', 'unaryMinus', [n]);\n  }\n\n  function _fractionToNode(f) {\n    var n;\n    var vn = f.s * f.n;\n\n    if (vn < 0) {\n      n = new OperatorNode('-', 'unaryMinus', [new ConstantNode(-vn)]);\n    } else {\n      n = new ConstantNode(vn);\n    }\n\n    if (f.d === 1) {\n      return n;\n    }\n\n    return new OperatorNode('/', 'divide', [n, new ConstantNode(f.d)]);\n  }\n  /*\n   * Create a binary tree from a list of Fractions and Nodes.\n   * Tries to fold Fractions by evaluating them until the first Node in the list is hit, so\n   * `args` should be sorted to have the Fractions at the start (if the operator is commutative).\n   * @param args - list of Fractions and Nodes\n   * @param fn - evaluator for the binary operation evaluator that accepts two Fractions\n   * @param makeNode - creates a binary OperatorNode/FunctionNode from a list of child Nodes\n   * if args.length is 1, returns args[0]\n   * @return - Either a Node representing a binary expression or Fraction\n   */\n\n\n  function foldOp(fn, args, makeNode, options) {\n    return args.reduce(function (a, b) {\n      if (!isNode(a) && !isNode(b)) {\n        try {\n          return _eval(fn, [a, b], options);\n        } catch (ignoreandcontinue) {}\n\n        a = _toNode(a);\n        b = _toNode(b);\n      } else if (!isNode(a)) {\n        a = _toNode(a);\n      } else if (!isNode(b)) {\n        b = _toNode(b);\n      }\n\n      return makeNode([a, b]);\n    });\n  } // destroys the original node and returns a folded one\n\n\n  function foldFraction(node, options) {\n    switch (node.type) {\n      case 'SymbolNode':\n        return node;\n\n      case 'ConstantNode':\n        if (typeof node.value === 'number' || !isNaN(node.value)) {\n          return _toNumber(node.value, options);\n        }\n\n        return node;\n\n      case 'FunctionNode':\n        if (mathWithTransform[node.name] && mathWithTransform[node.name].rawArgs) {\n          return node;\n        }\n\n        {\n          // Process operators as OperatorNode\n          var operatorFunctions = ['add', 'multiply'];\n\n          if (operatorFunctions.indexOf(node.name) === -1) {\n            var args = node.args.map(arg => foldFraction(arg, options)); // If all args are numbers\n\n            if (!args.some(isNode)) {\n              try {\n                return _eval(node.name, args, options);\n              } catch (ignoreandcontine) {}\n            } // Convert all args to nodes and construct a symbolic function call\n\n\n            args = args.map(function (arg) {\n              return isNode(arg) ? arg : _toNode(arg);\n            });\n            return new FunctionNode(node.name, args);\n          } else {// treat as operator\n          }\n        }\n\n      /* falls through */\n\n      case 'OperatorNode':\n        {\n          var fn = node.fn.toString();\n\n          var _args;\n\n          var res;\n          var makeNode = createMakeNodeFunction(node);\n\n          if (isOperatorNode(node) && node.isUnary()) {\n            _args = [foldFraction(node.args[0], options)];\n\n            if (!isNode(_args[0])) {\n              res = _eval(fn, _args, options);\n            } else {\n              res = makeNode(_args);\n            }\n          } else if (isAssociative(node)) {\n            _args = allChildren(node);\n            _args = _args.map(arg => foldFraction(arg, options));\n\n            if (isCommutative(fn)) {\n              // commutative binary operator\n              var consts = [];\n              var vars = [];\n\n              for (var i = 0; i < _args.length; i++) {\n                if (!isNode(_args[i])) {\n                  consts.push(_args[i]);\n                } else {\n                  vars.push(_args[i]);\n                }\n              }\n\n              if (consts.length > 1) {\n                res = foldOp(fn, consts, makeNode, options);\n                vars.unshift(res);\n                res = foldOp(fn, vars, makeNode, options);\n              } else {\n                // we won't change the children order since it's not neccessary\n                res = foldOp(fn, _args, makeNode, options);\n              }\n            } else {\n              // non-commutative binary operator\n              res = foldOp(fn, _args, makeNode, options);\n            }\n          } else {\n            // non-associative binary operator\n            _args = node.args.map(arg => foldFraction(arg, options));\n            res = foldOp(fn, _args, makeNode, options);\n          }\n\n          return res;\n        }\n\n      case 'ParenthesisNode':\n        // remove the uneccessary parenthesis\n        return foldFraction(node.content, options);\n\n      case 'AccessorNode':\n      /* falls through */\n\n      case 'ArrayNode':\n      /* falls through */\n\n      case 'AssignmentNode':\n      /* falls through */\n\n      case 'BlockNode':\n      /* falls through */\n\n      case 'FunctionAssignmentNode':\n      /* falls through */\n\n      case 'IndexNode':\n      /* falls through */\n\n      case 'ObjectNode':\n      /* falls through */\n\n      case 'RangeNode':\n      /* falls through */\n\n      case 'ConditionalNode':\n      /* falls through */\n\n      default:\n        throw new Error(\"Unimplemented node type in simplifyConstant: \".concat(node.type));\n    }\n  }\n\n  return simplifyConstant;\n});"]},"metadata":{},"sourceType":"module"}