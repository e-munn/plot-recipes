{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/elimunn/Desktop/plot-recipes/site/src/components/plot/ingredients/ingredientNode.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { select, max, sum, hierarchy, linkHorizontal, easeSin, easeCubicIn, easeCubicOut, transition } from 'd3';\nimport '../../../css/plot.css';\n\nconst IngredientNode = ({\n  root,\n  color,\n  dim,\n  a,\n  b,\n  j\n}) => {\n  _s();\n\n  const [focus, setFocus] = useState(0);\n  const statesIng = [{\n    \"textposX\": b.data.pX + 30,\n    \"dotposX\": b.data.pX + 20,\n    \"dotColor\": color.blue2,\n    \"posXTransform\": 'translate(50px, 0px)'\n  }, {\n    \"textposX\": b.data.pX + 12,\n    \"dotposX\": b.data.pX,\n    \"dotColor\": color.blue1,\n    \"posXTransform\": 'translate(0px, 0px)'\n  }];\n\n  const label = /*#__PURE__*/_jsxDEV(\"text\", {\n    className: 'plot-animation',\n    className: 'plot-text',\n    x: b.data.pX + 12,\n    y: b.data.pY + 1,\n    style: {\n      textTransform: 'capitalize'\n    },\n    fill: `${color.blue2}`,\n    textAnchor: 'start',\n    fontSize: dim.i.font.size,\n    fontWeight: dim.i.font.weight,\n    alignmentBaseline: 'middle',\n    children: b.data.ingredient\n  }, 'ingredient' + b + j, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n\n  const dot = /*#__PURE__*/_jsxDEV(\"circle\", {\n    className: 'plot-animation',\n    r: 4,\n    cx: statesIng[focus].dotposX,\n    cy: b.data.pY,\n    fill: `${statesIng[focus].dotColor}`\n  }, 'ingredient' + b + j, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(\"g\", {\n    // ref={ focusRef }\n    className: 'plot-animation',\n    onClick: () => setFocus(1 - focus),\n    style: {\n      transform: `${statesIng[focus].posXTransform}`\n    },\n    children: [label, dot]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n\n_s(IngredientNode, \"86TzMMaejrO3PqfxMnmA1uNahYY=\");\n\n_c = IngredientNode;\nexport default IngredientNode;\n\nvar _c;\n\n$RefreshReg$(_c, \"IngredientNode\");","map":{"version":3,"sources":["/Users/elimunn/Desktop/plot-recipes/site/src/components/plot/ingredients/ingredientNode.js"],"names":["React","useState","useEffect","useRef","select","max","sum","hierarchy","linkHorizontal","easeSin","easeCubicIn","easeCubicOut","transition","IngredientNode","root","color","dim","a","b","j","focus","setFocus","statesIng","data","pX","blue2","blue1","label","pY","textTransform","i","font","size","weight","ingredient","dot","dotposX","dotColor","transform","posXTransform"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,SAASC,MAAT,EAAiBC,GAAjB,EAAsBC,GAAtB,EAA4BC,SAA5B,EAAuCC,cAAvC,EAAuDC,OAAvD,EAAgEC,WAAhE,EAA6EC,YAA7E,EAA2FC,UAA3F,QAA6G,IAA7G;AACA,OAAO,uBAAP;;AAGA,MAAMC,cAAc,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,KAAR;AAAeC,EAAAA,GAAf;AAAoBC,EAAAA,CAApB;AAAuBC,EAAAA,CAAvB;AAA0BC,EAAAA;AAA1B,CAAD,KAAmC;AAAA;;AAExD,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBpB,QAAQ,CAAC,CAAD,CAAlC;AAEA,QAAMqB,SAAS,GAAG,CAChB;AACE,gBAAYJ,CAAC,CAACK,IAAF,CAAOC,EAAP,GAAY,EAD1B;AAEE,eAAWN,CAAC,CAACK,IAAF,CAAOC,EAAP,GAAY,EAFzB;AAGE,gBAAYT,KAAK,CAACU,KAHpB;AAIE,qBAAiB;AAJnB,GADgB,EAOhB;AACE,gBAAYP,CAAC,CAACK,IAAF,CAAOC,EAAP,GAAY,EAD1B;AAEE,eAAWN,CAAC,CAACK,IAAF,CAAOC,EAFpB;AAGE,gBAAYT,KAAK,CAACW,KAHpB;AAIE,qBAAiB;AAJnB,GAPgB,CAAlB;;AAiBA,QAAMC,KAAK,gBACT;AACE,IAAA,SAAS,EAAE,gBADb;AAGE,IAAA,SAAS,EAAE,WAHb;AAKE,IAAA,CAAC,EAAGT,CAAC,CAACK,IAAF,CAAOC,EAAP,GAAY,EALlB;AAME,IAAA,CAAC,EAAGN,CAAC,CAACK,IAAF,CAAOK,EAAP,GAAY,CANlB;AAOE,IAAA,KAAK,EAAE;AAACC,MAAAA,aAAa,EAAC;AAAf,KAPT;AAQE,IAAA,IAAI,EAAG,GAAEd,KAAK,CAACU,KAAM,EARvB;AASE,IAAA,UAAU,EAAE,OATd;AAUE,IAAA,QAAQ,EAAET,GAAG,CAACc,CAAJ,CAAMC,IAAN,CAAWC,IAVvB;AAWE,IAAA,UAAU,EAAEhB,GAAG,CAACc,CAAJ,CAAMC,IAAN,CAAWE,MAXzB;AAYE,IAAA,iBAAiB,EAAE,QAZrB;AAAA,cAgBIf,CAAC,CAACK,IAAF,CAAOW;AAhBX,KAIO,eAAehB,CAAf,GAAmBC,CAJ1B;AAAA;AAAA;AAAA;AAAA,UADF;;AAsBA,QAAMgB,GAAG,gBACP;AACE,IAAA,SAAS,EAAE,gBADb;AAIE,IAAA,CAAC,EAAE,CAJL;AAKE,IAAA,EAAE,EAAGb,SAAS,CAACF,KAAD,CAAT,CAAiBgB,OALxB;AAME,IAAA,EAAE,EAAGlB,CAAC,CAACK,IAAF,CAAOK,EANd;AAOE,IAAA,IAAI,EAAG,GAAEN,SAAS,CAACF,KAAD,CAAT,CAAiBiB,QAAS;AAPrC,KAGO,eAAenB,CAAf,GAAmBC,CAH1B;AAAA;AAAA;AAAA;AAAA,UADF;;AAcA,sBACE;AACE;AACA,IAAA,SAAS,EAAE,gBAFb;AAGE,IAAA,OAAO,EAAG,MAAME,QAAQ,CAAC,IAAED,KAAH,CAH1B;AAIE,IAAA,KAAK,EAAE;AAACkB,MAAAA,SAAS,EAAG,GAAGhB,SAAS,CAACF,KAAD,CAAT,CAAiBmB,aAAe;AAAhD,KAJT;AAAA,eAOGZ,KAPH,EAQGQ,GARH;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAaD,CAtED;;GAAMtB,c;;KAAAA,c;AAwEN,eAAeA,cAAf","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { select, max, sum,  hierarchy, linkHorizontal, easeSin, easeCubicIn, easeCubicOut, transition } from 'd3';\nimport '../../../css/plot.css'\n\n\nconst IngredientNode = ({ root, color, dim, a, b, j }) => {\n\n  const [focus, setFocus] = useState(0);\n\n  const statesIng = [\n    {\n      \"textposX\": b.data.pX + 30,\n      \"dotposX\": b.data.pX + 20,\n      \"dotColor\": color.blue2,\n      \"posXTransform\": 'translate(50px, 0px)'\n    },\n    {\n      \"textposX\": b.data.pX + 12,\n      \"dotposX\": b.data.pX,\n      \"dotColor\": color.blue1,\n      \"posXTransform\": 'translate(0px, 0px)'\n    }\n  ]\n\n\n\n  const label = (\n    <text\n      className={'plot-animation'}\n\n      className={'plot-text'}\n      key={'ingredient' + b + j}\n      x={ b.data.pX + 12 }\n      y={ b.data.pY + 1}\n      style={{textTransform:'capitalize'}}\n      fill={`${color.blue2}`}\n      textAnchor={'start'}\n      fontSize={dim.i.font.size}\n      fontWeight={dim.i.font.weight}\n      alignmentBaseline={'middle'}\n      >\n      {/* { b.data.stepOrder} */}\n\n      { b.data.ingredient}\n\n    </text>\n\n  )\n  const dot = (\n    <circle\n      className={'plot-animation'}\n\n      key={'ingredient' + b + j}\n      r={4}\n      cx={ statesIng[focus].dotposX }\n      cy={ b.data.pY }\n      fill={`${statesIng[focus].dotColor}`}\n      >\n    </circle>\n\n  )\n\n  return (\n    <g\n      // ref={ focusRef }\n      className={'plot-animation'}\n      onClick={ () => setFocus(1-focus) }\n      style={{transform: `${ statesIng[focus].posXTransform }`}}\n\n      >\n      {label}\n      {dot}\n    </g>\n\n  );\n};\n\nexport default IngredientNode;\n"]},"metadata":{},"sourceType":"module"}