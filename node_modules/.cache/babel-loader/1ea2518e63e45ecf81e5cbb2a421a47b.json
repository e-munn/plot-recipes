{"ast":null,"code":"import { deepMap } from '../../utils/collection.js';\nimport { factory } from '../../utils/factory.js';\nimport { isZeroNumber } from '../../plain/number/index.js';\nvar name = 'isZero';\nvar dependencies = ['typed'];\nexport var createIsZero = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Test whether a value is zero.\n   * The function can check for zero for types `number`, `BigNumber`, `Fraction`,\n   * `Complex`, and `Unit`.\n   *\n   * The function is evaluated element-wise in case of Array or Matrix input.\n   *\n   * Syntax:\n   *\n   *     math.isZero(x)\n   *\n   * Examples:\n   *\n   *    math.isZero(0)                     // returns true\n   *    math.isZero(2)                     // returns false\n   *    math.isZero(0.5)                   // returns false\n   *    math.isZero(math.bignumber(0))     // returns true\n   *    math.isZero(math.fraction(0))      // returns true\n   *    math.isZero(math.fraction(1,3))    // returns false\n   *    math.isZero(math.complex('2 - 4i') // returns false\n   *    math.isZero(math.complex('0i')     // returns true\n   *    math.isZero('0')                   // returns true\n   *    math.isZero('2')                   // returns false\n   *    math.isZero([2, 0, -3]')           // returns [false, true, false]\n   *\n   * See also:\n   *\n   *    isNumeric, isPositive, isNegative, isInteger\n   *\n   * @param {number | BigNumber | Complex | Fraction | Unit | Array | Matrix} x       Value to be tested\n   * @return {boolean}  Returns true when `x` is zero.\n   *                    Throws an error in case of an unknown data type.\n   */\n\n  return typed(name, {\n    number: isZeroNumber,\n    BigNumber: function BigNumber(x) {\n      return x.isZero();\n    },\n    Complex: function Complex(x) {\n      return x.re === 0 && x.im === 0;\n    },\n    Fraction: function Fraction(x) {\n      return x.d === 1 && x.n === 0;\n    },\n    Unit: function Unit(x) {\n      return this(x.value);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return deepMap(x, this);\n    }\n  });\n});","map":{"version":3,"sources":["/Users/elimunn/Desktop/plot-recipes/node_modules/mathjs/lib/esm/function/utils/isZero.js"],"names":["deepMap","factory","isZeroNumber","name","dependencies","createIsZero","_ref","typed","number","BigNumber","x","isZero","Complex","re","im","Fraction","d","n","Unit","value","ArrayMatrix"],"mappings":"AAAA,SAASA,OAAT,QAAwB,2BAAxB;AACA,SAASC,OAAT,QAAwB,wBAAxB;AACA,SAASC,YAAT,QAA6B,6BAA7B;AACA,IAAIC,IAAI,GAAG,QAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,CAAnB;AACA,OAAO,IAAIC,YAAY,GAAG,eAAeJ,OAAO,CAACE,IAAD,EAAOC,YAAP,EAAsBE,IAAD,IAAU;AAC7E,MAAI;AACFC,IAAAA;AADE,MAEAD,IAFJ;AAIA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAOC,KAAK,CAACJ,IAAD,EAAO;AACjBK,IAAAA,MAAM,EAAEN,YADS;AAEjBO,IAAAA,SAAS,EAAE,SAASA,SAAT,CAAmBC,CAAnB,EAAsB;AAC/B,aAAOA,CAAC,CAACC,MAAF,EAAP;AACD,KAJgB;AAKjBC,IAAAA,OAAO,EAAE,SAASA,OAAT,CAAiBF,CAAjB,EAAoB;AAC3B,aAAOA,CAAC,CAACG,EAAF,KAAS,CAAT,IAAcH,CAAC,CAACI,EAAF,KAAS,CAA9B;AACD,KAPgB;AAQjBC,IAAAA,QAAQ,EAAE,SAASA,QAAT,CAAkBL,CAAlB,EAAqB;AAC7B,aAAOA,CAAC,CAACM,CAAF,KAAQ,CAAR,IAAaN,CAAC,CAACO,CAAF,KAAQ,CAA5B;AACD,KAVgB;AAWjBC,IAAAA,IAAI,EAAE,SAASA,IAAT,CAAcR,CAAd,EAAiB;AACrB,aAAO,KAAKA,CAAC,CAACS,KAAP,CAAP;AACD,KAbgB;AAcjB,sBAAkB,SAASC,WAAT,CAAqBV,CAArB,EAAwB;AACxC,aAAOV,OAAO,CAACU,CAAD,EAAI,IAAJ,CAAd;AACD;AAhBgB,GAAP,CAAZ;AAkBD,CAxD+C,CAAzC","sourcesContent":["import { deepMap } from '../../utils/collection.js';\nimport { factory } from '../../utils/factory.js';\nimport { isZeroNumber } from '../../plain/number/index.js';\nvar name = 'isZero';\nvar dependencies = ['typed'];\nexport var createIsZero = /* #__PURE__ */factory(name, dependencies, (_ref) => {\n  var {\n    typed\n  } = _ref;\n\n  /**\n   * Test whether a value is zero.\n   * The function can check for zero for types `number`, `BigNumber`, `Fraction`,\n   * `Complex`, and `Unit`.\n   *\n   * The function is evaluated element-wise in case of Array or Matrix input.\n   *\n   * Syntax:\n   *\n   *     math.isZero(x)\n   *\n   * Examples:\n   *\n   *    math.isZero(0)                     // returns true\n   *    math.isZero(2)                     // returns false\n   *    math.isZero(0.5)                   // returns false\n   *    math.isZero(math.bignumber(0))     // returns true\n   *    math.isZero(math.fraction(0))      // returns true\n   *    math.isZero(math.fraction(1,3))    // returns false\n   *    math.isZero(math.complex('2 - 4i') // returns false\n   *    math.isZero(math.complex('0i')     // returns true\n   *    math.isZero('0')                   // returns true\n   *    math.isZero('2')                   // returns false\n   *    math.isZero([2, 0, -3]')           // returns [false, true, false]\n   *\n   * See also:\n   *\n   *    isNumeric, isPositive, isNegative, isInteger\n   *\n   * @param {number | BigNumber | Complex | Fraction | Unit | Array | Matrix} x       Value to be tested\n   * @return {boolean}  Returns true when `x` is zero.\n   *                    Throws an error in case of an unknown data type.\n   */\n  return typed(name, {\n    number: isZeroNumber,\n    BigNumber: function BigNumber(x) {\n      return x.isZero();\n    },\n    Complex: function Complex(x) {\n      return x.re === 0 && x.im === 0;\n    },\n    Fraction: function Fraction(x) {\n      return x.d === 1 && x.n === 0;\n    },\n    Unit: function Unit(x) {\n      return this(x.value);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return deepMap(x, this);\n    }\n  });\n});"]},"metadata":{},"sourceType":"module"}