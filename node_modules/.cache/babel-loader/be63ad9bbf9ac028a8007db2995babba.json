{"ast":null,"code":"import { isFunctionAssignmentNode, isSymbolNode } from '../../utils/is.js';\nimport { maxArgumentCount } from '../../utils/function.js';\nimport { map } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nimport { compileInlineExpression } from './utils/compileInlineExpression.js';\nvar name = 'map';\nvar dependencies = ['typed'];\nexport var createMapTransform = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Attach a transform function to math.map\n   * Adds a property transform containing the transform function.\n   *\n   * This transform creates a one-based index instead of a zero-based index\n   */\n\n  function mapTransform(args, math, scope) {\n    var x, callback;\n\n    if (args[0]) {\n      x = args[0].compile().evaluate(scope);\n    }\n\n    if (args[1]) {\n      if (isSymbolNode(args[1]) || isFunctionAssignmentNode(args[1])) {\n        // a function pointer, like filter([3, -2, 5], myTestFunction)\n        callback = args[1].compile().evaluate(scope);\n      } else {\n        // an expression like filter([3, -2, 5], x > 0)\n        callback = compileInlineExpression(args[1], math, scope);\n      }\n    }\n\n    return map(x, callback);\n  }\n\n  mapTransform.rawArgs = true; // one-based version of map function\n\n  var map = typed('map', {\n    'Array, function': function ArrayFunction(x, callback) {\n      return _map(x, callback, x);\n    },\n    'Matrix, function': function MatrixFunction(x, callback) {\n      return x.create(_map(x.valueOf(), callback, x));\n    }\n  });\n  return mapTransform;\n}, {\n  isTransformFunction: true\n});\n/**\n * Map for a multi dimensional array. One-based indexes\n * @param {Array} array\n * @param {function} callback\n * @param {Array} orig\n * @return {Array}\n * @private\n */\n\nfunction _map(array, callback, orig) {\n  // figure out what number of arguments the callback function expects\n  var argsCount = maxArgumentCount(callback);\n\n  function recurse(value, index) {\n    if (Array.isArray(value)) {\n      return map(value, function (child, i) {\n        // we create a copy of the index array and append the new index value\n        return recurse(child, index.concat(i + 1)); // one based index, hence i + 1\n      });\n    } else {\n      // invoke the (typed) callback function with the right number of arguments\n      if (argsCount === 1) {\n        return callback(value);\n      } else if (argsCount === 2) {\n        return callback(value, index);\n      } else {\n        // 3 or -1\n        return callback(value, index, orig);\n      }\n    }\n  }\n\n  return recurse(array, []);\n}","map":{"version":3,"sources":["/Users/elimunn/Desktop/plot-recipes/node_modules/mathjs/lib/esm/expression/transform/map.transform.js"],"names":["isFunctionAssignmentNode","isSymbolNode","maxArgumentCount","map","factory","compileInlineExpression","name","dependencies","createMapTransform","_ref","typed","mapTransform","args","math","scope","x","callback","compile","evaluate","rawArgs","ArrayFunction","_map","MatrixFunction","create","valueOf","isTransformFunction","array","orig","argsCount","recurse","value","index","Array","isArray","child","i","concat"],"mappings":"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","sourcesContent":["import { isFunctionAssignmentNode, isSymbolNode } from '../../utils/is.js';\nimport { maxArgumentCount } from '../../utils/function.js';\nimport { map } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nimport { compileInlineExpression } from './utils/compileInlineExpression.js';\nvar name = 'map';\nvar dependencies = ['typed'];\nexport var createMapTransform = /* #__PURE__ */factory(name, dependencies, (_ref) => {\n  var {\n    typed\n  } = _ref;\n\n  /**\n   * Attach a transform function to math.map\n   * Adds a property transform containing the transform function.\n   *\n   * This transform creates a one-based index instead of a zero-based index\n   */\n  function mapTransform(args, math, scope) {\n    var x, callback;\n\n    if (args[0]) {\n      x = args[0].compile().evaluate(scope);\n    }\n\n    if (args[1]) {\n      if (isSymbolNode(args[1]) || isFunctionAssignmentNode(args[1])) {\n        // a function pointer, like filter([3, -2, 5], myTestFunction)\n        callback = args[1].compile().evaluate(scope);\n      } else {\n        // an expression like filter([3, -2, 5], x > 0)\n        callback = compileInlineExpression(args[1], math, scope);\n      }\n    }\n\n    return map(x, callback);\n  }\n\n  mapTransform.rawArgs = true; // one-based version of map function\n\n  var map = typed('map', {\n    'Array, function': function ArrayFunction(x, callback) {\n      return _map(x, callback, x);\n    },\n    'Matrix, function': function MatrixFunction(x, callback) {\n      return x.create(_map(x.valueOf(), callback, x));\n    }\n  });\n  return mapTransform;\n}, {\n  isTransformFunction: true\n});\n/**\n * Map for a multi dimensional array. One-based indexes\n * @param {Array} array\n * @param {function} callback\n * @param {Array} orig\n * @return {Array}\n * @private\n */\n\nfunction _map(array, callback, orig) {\n  // figure out what number of arguments the callback function expects\n  var argsCount = maxArgumentCount(callback);\n\n  function recurse(value, index) {\n    if (Array.isArray(value)) {\n      return map(value, function (child, i) {\n        // we create a copy of the index array and append the new index value\n        return recurse(child, index.concat(i + 1)); // one based index, hence i + 1\n      });\n    } else {\n      // invoke the (typed) callback function with the right number of arguments\n      if (argsCount === 1) {\n        return callback(value);\n      } else if (argsCount === 2) {\n        return callback(value, index);\n      } else {\n        // 3 or -1\n        return callback(value, index, orig);\n      }\n    }\n  }\n\n  return recurse(array, []);\n}"]},"metadata":{},"sourceType":"module"}