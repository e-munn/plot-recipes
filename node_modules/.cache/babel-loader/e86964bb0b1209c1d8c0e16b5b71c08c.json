{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { isMatrix } from '../../utils/is.js';\nimport { extend } from '../../utils/object.js';\nimport { arraySize } from '../../utils/array.js';\nimport { createAlgorithm11 } from '../../type/matrix/utils/algorithm11.js';\nimport { createAlgorithm14 } from '../../type/matrix/utils/algorithm14.js';\nvar name = 'multiply';\nvar dependencies = ['typed', 'matrix', 'addScalar', 'multiplyScalar', 'equalScalar', 'dot'];\nexport var createMultiply = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    addScalar,\n    multiplyScalar,\n    equalScalar,\n    dot\n  } = _ref;\n  var algorithm11 = createAlgorithm11({\n    typed,\n    equalScalar\n  });\n  var algorithm14 = createAlgorithm14({\n    typed\n  });\n\n  function _validateMatrixDimensions(size1, size2) {\n    // check left operand dimensions\n    switch (size1.length) {\n      case 1:\n        // check size2\n        switch (size2.length) {\n          case 1:\n            // Vector x Vector\n            if (size1[0] !== size2[0]) {\n              // throw error\n              throw new RangeError('Dimension mismatch in multiplication. Vectors must have the same length');\n            }\n\n            break;\n\n          case 2:\n            // Vector x Matrix\n            if (size1[0] !== size2[0]) {\n              // throw error\n              throw new RangeError('Dimension mismatch in multiplication. Vector length (' + size1[0] + ') must match Matrix rows (' + size2[0] + ')');\n            }\n\n            break;\n\n          default:\n            throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix B has ' + size2.length + ' dimensions)');\n        }\n\n        break;\n\n      case 2:\n        // check size2\n        switch (size2.length) {\n          case 1:\n            // Matrix x Vector\n            if (size1[1] !== size2[0]) {\n              // throw error\n              throw new RangeError('Dimension mismatch in multiplication. Matrix columns (' + size1[1] + ') must match Vector length (' + size2[0] + ')');\n            }\n\n            break;\n\n          case 2:\n            // Matrix x Matrix\n            if (size1[1] !== size2[0]) {\n              // throw error\n              throw new RangeError('Dimension mismatch in multiplication. Matrix A columns (' + size1[1] + ') must match Matrix B rows (' + size2[0] + ')');\n            }\n\n            break;\n\n          default:\n            throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix B has ' + size2.length + ' dimensions)');\n        }\n\n        break;\n\n      default:\n        throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix A has ' + size1.length + ' dimensions)');\n    }\n  }\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            Dense Vector   (N)\n   * @param {Matrix} b            Dense Vector   (N)\n   *\n   * @return {number}             Scalar value\n   */\n\n\n  function _multiplyVectorVector(a, b, n) {\n    // check empty vector\n    if (n === 0) {\n      throw new Error('Cannot multiply two empty vectors');\n    }\n\n    return dot(a, b);\n  }\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            Dense Vector   (M)\n   * @param {Matrix} b            Matrix         (MxN)\n   *\n   * @return {Matrix}             Dense Vector   (N)\n   */\n\n\n  function _multiplyVectorMatrix(a, b) {\n    // process storage\n    if (b.storage() !== 'dense') {\n      throw new Error('Support for SparseMatrix not implemented');\n    }\n\n    return _multiplyVectorDenseMatrix(a, b);\n  }\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            Dense Vector   (M)\n   * @param {Matrix} b            Dense Matrix   (MxN)\n   *\n   * @return {Matrix}             Dense Vector   (N)\n   */\n\n\n  function _multiplyVectorDenseMatrix(a, b) {\n    // a dense\n    var adata = a._data;\n    var asize = a._size;\n    var adt = a._datatype; // b dense\n\n    var bdata = b._data;\n    var bsize = b._size;\n    var bdt = b._datatype; // rows & columns\n\n    var alength = asize[0];\n    var bcolumns = bsize[1]; // datatype\n\n    var dt; // addScalar signature to use\n\n    var af = addScalar; // multiplyScalar signature to use\n\n    var mf = multiplyScalar; // process data types\n\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt; // find signatures that matches (dt, dt)\n\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n    } // result\n\n\n    var c = []; // loop matrix columns\n\n    for (var j = 0; j < bcolumns; j++) {\n      // sum (do not initialize it with zero)\n      var sum = mf(adata[0], bdata[0][j]); // loop vector\n\n      for (var i = 1; i < alength; i++) {\n        // multiply & accumulate\n        sum = af(sum, mf(adata[i], bdata[i][j]));\n      }\n\n      c[j] = sum;\n    } // return matrix\n\n\n    return a.createDenseMatrix({\n      data: c,\n      size: [bcolumns],\n      datatype: dt\n    });\n  }\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            Matrix         (MxN)\n   * @param {Matrix} b            Dense Vector   (N)\n   *\n   * @return {Matrix}             Dense Vector   (M)\n   */\n\n\n  var _multiplyMatrixVector = typed('_multiplyMatrixVector', {\n    'DenseMatrix, any': _multiplyDenseMatrixVector,\n    'SparseMatrix, any': _multiplySparseMatrixVector\n  });\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            Matrix         (MxN)\n   * @param {Matrix} b            Matrix         (NxC)\n   *\n   * @return {Matrix}             Matrix         (MxC)\n   */\n\n\n  var _multiplyMatrixMatrix = typed('_multiplyMatrixMatrix', {\n    'DenseMatrix, DenseMatrix': _multiplyDenseMatrixDenseMatrix,\n    'DenseMatrix, SparseMatrix': _multiplyDenseMatrixSparseMatrix,\n    'SparseMatrix, DenseMatrix': _multiplySparseMatrixDenseMatrix,\n    'SparseMatrix, SparseMatrix': _multiplySparseMatrixSparseMatrix\n  });\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            DenseMatrix  (MxN)\n   * @param {Matrix} b            Dense Vector (N)\n   *\n   * @return {Matrix}             Dense Vector (M)\n   */\n\n\n  function _multiplyDenseMatrixVector(a, b) {\n    // a dense\n    var adata = a._data;\n    var asize = a._size;\n    var adt = a._datatype; // b dense\n\n    var bdata = b._data;\n    var bdt = b._datatype; // rows & columns\n\n    var arows = asize[0];\n    var acolumns = asize[1]; // datatype\n\n    var dt; // addScalar signature to use\n\n    var af = addScalar; // multiplyScalar signature to use\n\n    var mf = multiplyScalar; // process data types\n\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt; // find signatures that matches (dt, dt)\n\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n    } // result\n\n\n    var c = []; // loop matrix a rows\n\n    for (var i = 0; i < arows; i++) {\n      // current row\n      var row = adata[i]; // sum (do not initialize it with zero)\n\n      var sum = mf(row[0], bdata[0]); // loop matrix a columns\n\n      for (var j = 1; j < acolumns; j++) {\n        // multiply & accumulate\n        sum = af(sum, mf(row[j], bdata[j]));\n      }\n\n      c[i] = sum;\n    } // return matrix\n\n\n    return a.createDenseMatrix({\n      data: c,\n      size: [arows],\n      datatype: dt\n    });\n  }\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            DenseMatrix    (MxN)\n   * @param {Matrix} b            DenseMatrix    (NxC)\n   *\n   * @return {Matrix}             DenseMatrix    (MxC)\n   */\n\n\n  function _multiplyDenseMatrixDenseMatrix(a, b) {\n    // a dense\n    var adata = a._data;\n    var asize = a._size;\n    var adt = a._datatype; // b dense\n\n    var bdata = b._data;\n    var bsize = b._size;\n    var bdt = b._datatype; // rows & columns\n\n    var arows = asize[0];\n    var acolumns = asize[1];\n    var bcolumns = bsize[1]; // datatype\n\n    var dt; // addScalar signature to use\n\n    var af = addScalar; // multiplyScalar signature to use\n\n    var mf = multiplyScalar; // process data types\n\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt; // find signatures that matches (dt, dt)\n\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n    } // result\n\n\n    var c = []; // loop matrix a rows\n\n    for (var i = 0; i < arows; i++) {\n      // current row\n      var row = adata[i]; // initialize row array\n\n      c[i] = []; // loop matrix b columns\n\n      for (var j = 0; j < bcolumns; j++) {\n        // sum (avoid initializing sum to zero)\n        var sum = mf(row[0], bdata[0][j]); // loop matrix a columns\n\n        for (var x = 1; x < acolumns; x++) {\n          // multiply & accumulate\n          sum = af(sum, mf(row[x], bdata[x][j]));\n        }\n\n        c[i][j] = sum;\n      }\n    } // return matrix\n\n\n    return a.createDenseMatrix({\n      data: c,\n      size: [arows, bcolumns],\n      datatype: dt\n    });\n  }\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            DenseMatrix    (MxN)\n   * @param {Matrix} b            SparseMatrix   (NxC)\n   *\n   * @return {Matrix}             SparseMatrix   (MxC)\n   */\n\n\n  function _multiplyDenseMatrixSparseMatrix(a, b) {\n    // a dense\n    var adata = a._data;\n    var asize = a._size;\n    var adt = a._datatype; // b sparse\n\n    var bvalues = b._values;\n    var bindex = b._index;\n    var bptr = b._ptr;\n    var bsize = b._size;\n    var bdt = b._datatype; // validate b matrix\n\n    if (!bvalues) {\n      throw new Error('Cannot multiply Dense Matrix times Pattern only Matrix');\n    } // rows & columns\n\n\n    var arows = asize[0];\n    var bcolumns = bsize[1]; // datatype\n\n    var dt; // addScalar signature to use\n\n    var af = addScalar; // multiplyScalar signature to use\n\n    var mf = multiplyScalar; // equalScalar signature to use\n\n    var eq = equalScalar; // zero value\n\n    var zero = 0; // process data types\n\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt; // find signatures that matches (dt, dt)\n\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype\n\n      zero = typed.convert(0, dt);\n    } // result\n\n\n    var cvalues = [];\n    var cindex = [];\n    var cptr = []; // c matrix\n\n    var c = b.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [arows, bcolumns],\n      datatype: dt\n    }); // loop b columns\n\n    for (var jb = 0; jb < bcolumns; jb++) {\n      // update ptr\n      cptr[jb] = cindex.length; // indeces in column jb\n\n      var kb0 = bptr[jb];\n      var kb1 = bptr[jb + 1]; // do not process column jb if no data exists\n\n      if (kb1 > kb0) {\n        // last row mark processed\n        var last = 0; // loop a rows\n\n        for (var i = 0; i < arows; i++) {\n          // column mark\n          var mark = i + 1; // C[i, jb]\n\n          var cij = void 0; // values in b column j\n\n          for (var kb = kb0; kb < kb1; kb++) {\n            // row\n            var ib = bindex[kb]; // check value has been initialized\n\n            if (last !== mark) {\n              // first value in column jb\n              cij = mf(adata[i][ib], bvalues[kb]); // update mark\n\n              last = mark;\n            } else {\n              // accumulate value\n              cij = af(cij, mf(adata[i][ib], bvalues[kb]));\n            }\n          } // check column has been processed and value != 0\n\n\n          if (last === mark && !eq(cij, zero)) {\n            // push row & value\n            cindex.push(i);\n            cvalues.push(cij);\n          }\n        }\n      }\n    } // update ptr\n\n\n    cptr[bcolumns] = cindex.length; // return sparse matrix\n\n    return c;\n  }\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            SparseMatrix    (MxN)\n   * @param {Matrix} b            Dense Vector (N)\n   *\n   * @return {Matrix}             SparseMatrix    (M, 1)\n   */\n\n\n  function _multiplySparseMatrixVector(a, b) {\n    // a sparse\n    var avalues = a._values;\n    var aindex = a._index;\n    var aptr = a._ptr;\n    var adt = a._datatype; // validate a matrix\n\n    if (!avalues) {\n      throw new Error('Cannot multiply Pattern only Matrix times Dense Matrix');\n    } // b dense\n\n\n    var bdata = b._data;\n    var bdt = b._datatype; // rows & columns\n\n    var arows = a._size[0];\n    var brows = b._size[0]; // result\n\n    var cvalues = [];\n    var cindex = [];\n    var cptr = []; // datatype\n\n    var dt; // addScalar signature to use\n\n    var af = addScalar; // multiplyScalar signature to use\n\n    var mf = multiplyScalar; // equalScalar signature to use\n\n    var eq = equalScalar; // zero value\n\n    var zero = 0; // process data types\n\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt; // find signatures that matches (dt, dt)\n\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype\n\n      zero = typed.convert(0, dt);\n    } // workspace\n\n\n    var x = []; // vector with marks indicating a value x[i] exists in a given column\n\n    var w = []; // update ptr\n\n    cptr[0] = 0; // rows in b\n\n    for (var ib = 0; ib < brows; ib++) {\n      // b[ib]\n      var vbi = bdata[ib]; // check b[ib] != 0, avoid loops\n\n      if (!eq(vbi, zero)) {\n        // A values & index in ib column\n        for (var ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {\n          // a row\n          var ia = aindex[ka]; // check value exists in current j\n\n          if (!w[ia]) {\n            // ia is new entry in j\n            w[ia] = true; // add i to pattern of C\n\n            cindex.push(ia); // x(ia) = A\n\n            x[ia] = mf(vbi, avalues[ka]);\n          } else {\n            // i exists in C already\n            x[ia] = af(x[ia], mf(vbi, avalues[ka]));\n          }\n        }\n      }\n    } // copy values from x to column jb of c\n\n\n    for (var p1 = cindex.length, p = 0; p < p1; p++) {\n      // row\n      var ic = cindex[p]; // copy value\n\n      cvalues[p] = x[ic];\n    } // update ptr\n\n\n    cptr[1] = cindex.length; // return sparse matrix\n\n    return a.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [arows, 1],\n      datatype: dt\n    });\n  }\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            SparseMatrix      (MxN)\n   * @param {Matrix} b            DenseMatrix       (NxC)\n   *\n   * @return {Matrix}             SparseMatrix      (MxC)\n   */\n\n\n  function _multiplySparseMatrixDenseMatrix(a, b) {\n    // a sparse\n    var avalues = a._values;\n    var aindex = a._index;\n    var aptr = a._ptr;\n    var adt = a._datatype; // validate a matrix\n\n    if (!avalues) {\n      throw new Error('Cannot multiply Pattern only Matrix times Dense Matrix');\n    } // b dense\n\n\n    var bdata = b._data;\n    var bdt = b._datatype; // rows & columns\n\n    var arows = a._size[0];\n    var brows = b._size[0];\n    var bcolumns = b._size[1]; // datatype\n\n    var dt; // addScalar signature to use\n\n    var af = addScalar; // multiplyScalar signature to use\n\n    var mf = multiplyScalar; // equalScalar signature to use\n\n    var eq = equalScalar; // zero value\n\n    var zero = 0; // process data types\n\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt; // find signatures that matches (dt, dt)\n\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype\n\n      zero = typed.convert(0, dt);\n    } // result\n\n\n    var cvalues = [];\n    var cindex = [];\n    var cptr = []; // c matrix\n\n    var c = a.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [arows, bcolumns],\n      datatype: dt\n    }); // workspace\n\n    var x = []; // vector with marks indicating a value x[i] exists in a given column\n\n    var w = []; // loop b columns\n\n    for (var jb = 0; jb < bcolumns; jb++) {\n      // update ptr\n      cptr[jb] = cindex.length; // mark in workspace for current column\n\n      var mark = jb + 1; // rows in jb\n\n      for (var ib = 0; ib < brows; ib++) {\n        // b[ib, jb]\n        var vbij = bdata[ib][jb]; // check b[ib, jb] != 0, avoid loops\n\n        if (!eq(vbij, zero)) {\n          // A values & index in ib column\n          for (var ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {\n            // a row\n            var ia = aindex[ka]; // check value exists in current j\n\n            if (w[ia] !== mark) {\n              // ia is new entry in j\n              w[ia] = mark; // add i to pattern of C\n\n              cindex.push(ia); // x(ia) = A\n\n              x[ia] = mf(vbij, avalues[ka]);\n            } else {\n              // i exists in C already\n              x[ia] = af(x[ia], mf(vbij, avalues[ka]));\n            }\n          }\n        }\n      } // copy values from x to column jb of c\n\n\n      for (var p0 = cptr[jb], p1 = cindex.length, p = p0; p < p1; p++) {\n        // row\n        var ic = cindex[p]; // copy value\n\n        cvalues[p] = x[ic];\n      }\n    } // update ptr\n\n\n    cptr[bcolumns] = cindex.length; // return sparse matrix\n\n    return c;\n  }\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            SparseMatrix      (MxN)\n   * @param {Matrix} b            SparseMatrix      (NxC)\n   *\n   * @return {Matrix}             SparseMatrix      (MxC)\n   */\n\n\n  function _multiplySparseMatrixSparseMatrix(a, b) {\n    // a sparse\n    var avalues = a._values;\n    var aindex = a._index;\n    var aptr = a._ptr;\n    var adt = a._datatype; // b sparse\n\n    var bvalues = b._values;\n    var bindex = b._index;\n    var bptr = b._ptr;\n    var bdt = b._datatype; // rows & columns\n\n    var arows = a._size[0];\n    var bcolumns = b._size[1]; // flag indicating both matrices (a & b) contain data\n\n    var values = avalues && bvalues; // datatype\n\n    var dt; // addScalar signature to use\n\n    var af = addScalar; // multiplyScalar signature to use\n\n    var mf = multiplyScalar; // process data types\n\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt; // find signatures that matches (dt, dt)\n\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n    } // result\n\n\n    var cvalues = values ? [] : undefined;\n    var cindex = [];\n    var cptr = []; // c matrix\n\n    var c = a.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [arows, bcolumns],\n      datatype: dt\n    }); // workspace\n\n    var x = values ? [] : undefined; // vector with marks indicating a value x[i] exists in a given column\n\n    var w = []; // variables\n\n    var ka, ka0, ka1, kb, kb0, kb1, ia, ib; // loop b columns\n\n    for (var jb = 0; jb < bcolumns; jb++) {\n      // update ptr\n      cptr[jb] = cindex.length; // mark in workspace for current column\n\n      var mark = jb + 1; // B values & index in j\n\n      for (kb0 = bptr[jb], kb1 = bptr[jb + 1], kb = kb0; kb < kb1; kb++) {\n        // b row\n        ib = bindex[kb]; // check we need to process values\n\n        if (values) {\n          // loop values in a[:,ib]\n          for (ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {\n            // row\n            ia = aindex[ka]; // check value exists in current j\n\n            if (w[ia] !== mark) {\n              // ia is new entry in j\n              w[ia] = mark; // add i to pattern of C\n\n              cindex.push(ia); // x(ia) = A\n\n              x[ia] = mf(bvalues[kb], avalues[ka]);\n            } else {\n              // i exists in C already\n              x[ia] = af(x[ia], mf(bvalues[kb], avalues[ka]));\n            }\n          }\n        } else {\n          // loop values in a[:,ib]\n          for (ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {\n            // row\n            ia = aindex[ka]; // check value exists in current j\n\n            if (w[ia] !== mark) {\n              // ia is new entry in j\n              w[ia] = mark; // add i to pattern of C\n\n              cindex.push(ia);\n            }\n          }\n        }\n      } // check we need to process matrix values (pattern matrix)\n\n\n      if (values) {\n        // copy values from x to column jb of c\n        for (var p0 = cptr[jb], p1 = cindex.length, p = p0; p < p1; p++) {\n          // row\n          var ic = cindex[p]; // copy value\n\n          cvalues[p] = x[ic];\n        }\n      }\n    } // update ptr\n\n\n    cptr[bcolumns] = cindex.length; // return sparse matrix\n\n    return c;\n  }\n  /**\n   * Multiply two or more values, `x * y`.\n   * For matrices, the matrix product is calculated.\n   *\n   * Syntax:\n   *\n   *    math.multiply(x, y)\n   *    math.multiply(x, y, z, ...)\n   *\n   * Examples:\n   *\n   *    math.multiply(4, 5.2)        // returns number 20.8\n   *    math.multiply(2, 3, 4)       // returns number 24\n   *\n   *    const a = math.complex(2, 3)\n   *    const b = math.complex(4, 1)\n   *    math.multiply(a, b)          // returns Complex 5 + 14i\n   *\n   *    const c = [[1, 2], [4, 3]]\n   *    const d = [[1, 2, 3], [3, -4, 7]]\n   *    math.multiply(c, d)          // returns Array [[7, -6, 17], [13, -4, 33]]\n   *\n   *    const e = math.unit('2.1 km')\n   *    math.multiply(3, e)          // returns Unit 6.3 km\n   *\n   * See also:\n   *\n   *    divide, prod, cross, dot\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First value to multiply\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second value to multiply\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Multiplication of `x` and `y`\n   */\n\n\n  return typed(name, extend({\n    // we extend the signatures of multiplyScalar with signatures dealing with matrices\n    'Array, Array': function ArrayArray(x, y) {\n      // check dimensions\n      _validateMatrixDimensions(arraySize(x), arraySize(y)); // use dense matrix implementation\n\n\n      var m = this(matrix(x), matrix(y)); // return array or scalar\n\n      return isMatrix(m) ? m.valueOf() : m;\n    },\n    'Matrix, Matrix': function MatrixMatrix(x, y) {\n      // dimensions\n      var xsize = x.size();\n      var ysize = y.size(); // check dimensions\n\n      _validateMatrixDimensions(xsize, ysize); // process dimensions\n\n\n      if (xsize.length === 1) {\n        // process y dimensions\n        if (ysize.length === 1) {\n          // Vector * Vector\n          return _multiplyVectorVector(x, y, xsize[0]);\n        } // Vector * Matrix\n\n\n        return _multiplyVectorMatrix(x, y);\n      } // process y dimensions\n\n\n      if (ysize.length === 1) {\n        // Matrix * Vector\n        return _multiplyMatrixVector(x, y);\n      } // Matrix * Matrix\n\n\n      return _multiplyMatrixMatrix(x, y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use Matrix * Matrix implementation\n      return this(x, matrix(y));\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use Matrix * Matrix implementation\n      return this(matrix(x, y.storage()), y);\n    },\n    'SparseMatrix, any': function SparseMatrixAny(x, y) {\n      return algorithm11(x, y, multiplyScalar, false);\n    },\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\n      return algorithm14(x, y, multiplyScalar, false);\n    },\n    'any, SparseMatrix': function anySparseMatrix(x, y) {\n      return algorithm11(y, x, multiplyScalar, true);\n    },\n    'any, DenseMatrix': function anyDenseMatrix(x, y) {\n      return algorithm14(y, x, multiplyScalar, true);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, multiplyScalar, false).valueOf();\n    },\n    'any, Array': function anyArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, multiplyScalar, true).valueOf();\n    },\n    'any, any': multiplyScalar,\n    'any, any, ...any': function anyAnyAny(x, y, rest) {\n      var result = this(x, y);\n\n      for (var i = 0; i < rest.length; i++) {\n        result = this(result, rest[i]);\n      }\n\n      return result;\n    }\n  }, multiplyScalar.signatures));\n});","map":{"version":3,"sources":["/Users/elimunn/Desktop/plot-recipes/node_modules/mathjs/lib/esm/function/arithmetic/multiply.js"],"names":["factory","isMatrix","extend","arraySize","createAlgorithm11","createAlgorithm14","name","dependencies","createMultiply","_ref","typed","matrix","addScalar","multiplyScalar","equalScalar","dot","algorithm11","algorithm14","_validateMatrixDimensions","size1","size2","length","RangeError","Error","_multiplyVectorVector","a","b","n","_multiplyVectorMatrix","storage","_multiplyVectorDenseMatrix","adata","_data","asize","_size","adt","_datatype","bdata","bsize","bdt","alength","bcolumns","dt","af","mf","find","c","j","sum","i","createDenseMatrix","data","size","datatype","_multiplyMatrixVector","_multiplyDenseMatrixVector","_multiplySparseMatrixVector","_multiplyMatrixMatrix","_multiplyDenseMatrixDenseMatrix","_multiplyDenseMatrixSparseMatrix","_multiplySparseMatrixDenseMatrix","_multiplySparseMatrixSparseMatrix","arows","acolumns","row","x","bvalues","_values","bindex","_index","bptr","_ptr","eq","zero","convert","cvalues","cindex","cptr","createSparseMatrix","values","index","ptr","jb","kb0","kb1","last","mark","cij","kb","ib","push","avalues","aindex","aptr","brows","w","vbi","ka0","ka1","ka","ia","p1","p","ic","vbij","p0","undefined","ArrayArray","y","m","valueOf","MatrixMatrix","xsize","ysize","MatrixArray","ArrayMatrix","SparseMatrixAny","DenseMatrixAny","anySparseMatrix","anyDenseMatrix","ArrayAny","anyArray","anyAnyAny","rest","result","signatures"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,QAAT,QAAyB,mBAAzB;AACA,SAASC,MAAT,QAAuB,uBAAvB;AACA,SAASC,SAAT,QAA0B,sBAA1B;AACA,SAASC,iBAAT,QAAkC,wCAAlC;AACA,SAASC,iBAAT,QAAkC,wCAAlC;AACA,IAAIC,IAAI,GAAG,UAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,QAAV,EAAoB,WAApB,EAAiC,gBAAjC,EAAmD,aAAnD,EAAkE,KAAlE,CAAnB;AACA,OAAO,IAAIC,cAAc,GAAG,eAAeR,OAAO,CAACM,IAAD,EAAOC,YAAP,EAAsBE,IAAD,IAAU;AAC/E,MAAI;AACFC,IAAAA,KADE;AAEFC,IAAAA,MAFE;AAGFC,IAAAA,SAHE;AAIFC,IAAAA,cAJE;AAKFC,IAAAA,WALE;AAMFC,IAAAA;AANE,MAOAN,IAPJ;AAQA,MAAIO,WAAW,GAAGZ,iBAAiB,CAAC;AAClCM,IAAAA,KADkC;AAElCI,IAAAA;AAFkC,GAAD,CAAnC;AAIA,MAAIG,WAAW,GAAGZ,iBAAiB,CAAC;AAClCK,IAAAA;AADkC,GAAD,CAAnC;;AAIA,WAASQ,yBAAT,CAAmCC,KAAnC,EAA0CC,KAA1C,EAAiD;AAC/C;AACA,YAAQD,KAAK,CAACE,MAAd;AACE,WAAK,CAAL;AACE;AACA,gBAAQD,KAAK,CAACC,MAAd;AACE,eAAK,CAAL;AACE;AACA,gBAAIF,KAAK,CAAC,CAAD,CAAL,KAAaC,KAAK,CAAC,CAAD,CAAtB,EAA2B;AACzB;AACA,oBAAM,IAAIE,UAAJ,CAAe,yEAAf,CAAN;AACD;;AAED;;AAEF,eAAK,CAAL;AACE;AACA,gBAAIH,KAAK,CAAC,CAAD,CAAL,KAAaC,KAAK,CAAC,CAAD,CAAtB,EAA2B;AACzB;AACA,oBAAM,IAAIE,UAAJ,CAAe,0DAA0DH,KAAK,CAAC,CAAD,CAA/D,GAAqE,4BAArE,GAAoGC,KAAK,CAAC,CAAD,CAAzG,GAA+G,GAA9H,CAAN;AACD;;AAED;;AAEF;AACE,kBAAM,IAAIG,KAAJ,CAAU,iEAAiEH,KAAK,CAACC,MAAvE,GAAgF,cAA1F,CAAN;AApBJ;;AAuBA;;AAEF,WAAK,CAAL;AACE;AACA,gBAAQD,KAAK,CAACC,MAAd;AACE,eAAK,CAAL;AACE;AACA,gBAAIF,KAAK,CAAC,CAAD,CAAL,KAAaC,KAAK,CAAC,CAAD,CAAtB,EAA2B;AACzB;AACA,oBAAM,IAAIE,UAAJ,CAAe,2DAA2DH,KAAK,CAAC,CAAD,CAAhE,GAAsE,8BAAtE,GAAuGC,KAAK,CAAC,CAAD,CAA5G,GAAkH,GAAjI,CAAN;AACD;;AAED;;AAEF,eAAK,CAAL;AACE;AACA,gBAAID,KAAK,CAAC,CAAD,CAAL,KAAaC,KAAK,CAAC,CAAD,CAAtB,EAA2B;AACzB;AACA,oBAAM,IAAIE,UAAJ,CAAe,6DAA6DH,KAAK,CAAC,CAAD,CAAlE,GAAwE,8BAAxE,GAAyGC,KAAK,CAAC,CAAD,CAA9G,GAAoH,GAAnI,CAAN;AACD;;AAED;;AAEF;AACE,kBAAM,IAAIG,KAAJ,CAAU,iEAAiEH,KAAK,CAACC,MAAvE,GAAgF,cAA1F,CAAN;AApBJ;;AAuBA;;AAEF;AACE,cAAM,IAAIE,KAAJ,CAAU,iEAAiEJ,KAAK,CAACE,MAAvE,GAAgF,cAA1F,CAAN;AAxDJ;AA0DD;AACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGE,WAASG,qBAAT,CAA+BC,CAA/B,EAAkCC,CAAlC,EAAqCC,CAArC,EAAwC;AACtC;AACA,QAAIA,CAAC,KAAK,CAAV,EAAa;AACX,YAAM,IAAIJ,KAAJ,CAAU,mCAAV,CAAN;AACD;;AAED,WAAOR,GAAG,CAACU,CAAD,EAAIC,CAAJ,CAAV;AACD;AACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGE,WAASE,qBAAT,CAA+BH,CAA/B,EAAkCC,CAAlC,EAAqC;AACnC;AACA,QAAIA,CAAC,CAACG,OAAF,OAAgB,OAApB,EAA6B;AAC3B,YAAM,IAAIN,KAAJ,CAAU,0CAAV,CAAN;AACD;;AAED,WAAOO,0BAA0B,CAACL,CAAD,EAAIC,CAAJ,CAAjC;AACD;AACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGE,WAASI,0BAAT,CAAoCL,CAApC,EAAuCC,CAAvC,EAA0C;AACxC;AACA,QAAIK,KAAK,GAAGN,CAAC,CAACO,KAAd;AACA,QAAIC,KAAK,GAAGR,CAAC,CAACS,KAAd;AACA,QAAIC,GAAG,GAAGV,CAAC,CAACW,SAAZ,CAJwC,CAIjB;;AAEvB,QAAIC,KAAK,GAAGX,CAAC,CAACM,KAAd;AACA,QAAIM,KAAK,GAAGZ,CAAC,CAACQ,KAAd;AACA,QAAIK,GAAG,GAAGb,CAAC,CAACU,SAAZ,CARwC,CAQjB;;AAEvB,QAAII,OAAO,GAAGP,KAAK,CAAC,CAAD,CAAnB;AACA,QAAIQ,QAAQ,GAAGH,KAAK,CAAC,CAAD,CAApB,CAXwC,CAWf;;AAEzB,QAAII,EAAJ,CAbwC,CAahC;;AAER,QAAIC,EAAE,GAAG/B,SAAT,CAfwC,CAepB;;AAEpB,QAAIgC,EAAE,GAAG/B,cAAT,CAjBwC,CAiBf;;AAEzB,QAAIsB,GAAG,IAAII,GAAP,IAAcJ,GAAG,KAAKI,GAAtB,IAA6B,OAAOJ,GAAP,KAAe,QAAhD,EAA0D;AACxD;AACAO,MAAAA,EAAE,GAAGP,GAAL,CAFwD,CAE9C;;AAEVQ,MAAAA,EAAE,GAAGjC,KAAK,CAACmC,IAAN,CAAWjC,SAAX,EAAsB,CAAC8B,EAAD,EAAKA,EAAL,CAAtB,CAAL;AACAE,MAAAA,EAAE,GAAGlC,KAAK,CAACmC,IAAN,CAAWhC,cAAX,EAA2B,CAAC6B,EAAD,EAAKA,EAAL,CAA3B,CAAL;AACD,KAzBuC,CAyBtC;;;AAGF,QAAII,CAAC,GAAG,EAAR,CA5BwC,CA4B5B;;AAEZ,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,QAApB,EAA8BM,CAAC,EAA/B,EAAmC;AACjC;AACA,UAAIC,GAAG,GAAGJ,EAAE,CAACb,KAAK,CAAC,CAAD,CAAN,EAAWM,KAAK,CAAC,CAAD,CAAL,CAASU,CAAT,CAAX,CAAZ,CAFiC,CAEI;;AAErC,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,OAApB,EAA6BS,CAAC,EAA9B,EAAkC;AAChC;AACAD,QAAAA,GAAG,GAAGL,EAAE,CAACK,GAAD,EAAMJ,EAAE,CAACb,KAAK,CAACkB,CAAD,CAAN,EAAWZ,KAAK,CAACY,CAAD,CAAL,CAASF,CAAT,CAAX,CAAR,CAAR;AACD;;AAEDD,MAAAA,CAAC,CAACC,CAAD,CAAD,GAAOC,GAAP;AACD,KAxCuC,CAwCtC;;;AAGF,WAAOvB,CAAC,CAACyB,iBAAF,CAAoB;AACzBC,MAAAA,IAAI,EAAEL,CADmB;AAEzBM,MAAAA,IAAI,EAAE,CAACX,QAAD,CAFmB;AAGzBY,MAAAA,QAAQ,EAAEX;AAHe,KAApB,CAAP;AAKD;AACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGE,MAAIY,qBAAqB,GAAG5C,KAAK,CAAC,uBAAD,EAA0B;AACzD,wBAAoB6C,0BADqC;AAEzD,yBAAqBC;AAFoC,GAA1B,CAAjC;AAIA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGE,MAAIC,qBAAqB,GAAG/C,KAAK,CAAC,uBAAD,EAA0B;AACzD,gCAA4BgD,+BAD6B;AAEzD,iCAA6BC,gCAF4B;AAGzD,iCAA6BC,gCAH4B;AAIzD,kCAA8BC;AAJ2B,GAA1B,CAAjC;AAMA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGE,WAASN,0BAAT,CAAoC9B,CAApC,EAAuCC,CAAvC,EAA0C;AACxC;AACA,QAAIK,KAAK,GAAGN,CAAC,CAACO,KAAd;AACA,QAAIC,KAAK,GAAGR,CAAC,CAACS,KAAd;AACA,QAAIC,GAAG,GAAGV,CAAC,CAACW,SAAZ,CAJwC,CAIjB;;AAEvB,QAAIC,KAAK,GAAGX,CAAC,CAACM,KAAd;AACA,QAAIO,GAAG,GAAGb,CAAC,CAACU,SAAZ,CAPwC,CAOjB;;AAEvB,QAAI0B,KAAK,GAAG7B,KAAK,CAAC,CAAD,CAAjB;AACA,QAAI8B,QAAQ,GAAG9B,KAAK,CAAC,CAAD,CAApB,CAVwC,CAUf;;AAEzB,QAAIS,EAAJ,CAZwC,CAYhC;;AAER,QAAIC,EAAE,GAAG/B,SAAT,CAdwC,CAcpB;;AAEpB,QAAIgC,EAAE,GAAG/B,cAAT,CAhBwC,CAgBf;;AAEzB,QAAIsB,GAAG,IAAII,GAAP,IAAcJ,GAAG,KAAKI,GAAtB,IAA6B,OAAOJ,GAAP,KAAe,QAAhD,EAA0D;AACxD;AACAO,MAAAA,EAAE,GAAGP,GAAL,CAFwD,CAE9C;;AAEVQ,MAAAA,EAAE,GAAGjC,KAAK,CAACmC,IAAN,CAAWjC,SAAX,EAAsB,CAAC8B,EAAD,EAAKA,EAAL,CAAtB,CAAL;AACAE,MAAAA,EAAE,GAAGlC,KAAK,CAACmC,IAAN,CAAWhC,cAAX,EAA2B,CAAC6B,EAAD,EAAKA,EAAL,CAA3B,CAAL;AACD,KAxBuC,CAwBtC;;;AAGF,QAAII,CAAC,GAAG,EAAR,CA3BwC,CA2B5B;;AAEZ,SAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGa,KAApB,EAA2Bb,CAAC,EAA5B,EAAgC;AAC9B;AACA,UAAIe,GAAG,GAAGjC,KAAK,CAACkB,CAAD,CAAf,CAF8B,CAEV;;AAEpB,UAAID,GAAG,GAAGJ,EAAE,CAACoB,GAAG,CAAC,CAAD,CAAJ,EAAS3B,KAAK,CAAC,CAAD,CAAd,CAAZ,CAJ8B,CAIE;;AAEhC,WAAK,IAAIU,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGgB,QAApB,EAA8BhB,CAAC,EAA/B,EAAmC;AACjC;AACAC,QAAAA,GAAG,GAAGL,EAAE,CAACK,GAAD,EAAMJ,EAAE,CAACoB,GAAG,CAACjB,CAAD,CAAJ,EAASV,KAAK,CAACU,CAAD,CAAd,CAAR,CAAR;AACD;;AAEDD,MAAAA,CAAC,CAACG,CAAD,CAAD,GAAOD,GAAP;AACD,KAzCuC,CAyCtC;;;AAGF,WAAOvB,CAAC,CAACyB,iBAAF,CAAoB;AACzBC,MAAAA,IAAI,EAAEL,CADmB;AAEzBM,MAAAA,IAAI,EAAE,CAACU,KAAD,CAFmB;AAGzBT,MAAAA,QAAQ,EAAEX;AAHe,KAApB,CAAP;AAKD;AACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGE,WAASgB,+BAAT,CAAyCjC,CAAzC,EAA4CC,CAA5C,EAA+C;AAC7C;AACA,QAAIK,KAAK,GAAGN,CAAC,CAACO,KAAd;AACA,QAAIC,KAAK,GAAGR,CAAC,CAACS,KAAd;AACA,QAAIC,GAAG,GAAGV,CAAC,CAACW,SAAZ,CAJ6C,CAItB;;AAEvB,QAAIC,KAAK,GAAGX,CAAC,CAACM,KAAd;AACA,QAAIM,KAAK,GAAGZ,CAAC,CAACQ,KAAd;AACA,QAAIK,GAAG,GAAGb,CAAC,CAACU,SAAZ,CAR6C,CAQtB;;AAEvB,QAAI0B,KAAK,GAAG7B,KAAK,CAAC,CAAD,CAAjB;AACA,QAAI8B,QAAQ,GAAG9B,KAAK,CAAC,CAAD,CAApB;AACA,QAAIQ,QAAQ,GAAGH,KAAK,CAAC,CAAD,CAApB,CAZ6C,CAYpB;;AAEzB,QAAII,EAAJ,CAd6C,CAcrC;;AAER,QAAIC,EAAE,GAAG/B,SAAT,CAhB6C,CAgBzB;;AAEpB,QAAIgC,EAAE,GAAG/B,cAAT,CAlB6C,CAkBpB;;AAEzB,QAAIsB,GAAG,IAAII,GAAP,IAAcJ,GAAG,KAAKI,GAAtB,IAA6B,OAAOJ,GAAP,KAAe,QAAhD,EAA0D;AACxD;AACAO,MAAAA,EAAE,GAAGP,GAAL,CAFwD,CAE9C;;AAEVQ,MAAAA,EAAE,GAAGjC,KAAK,CAACmC,IAAN,CAAWjC,SAAX,EAAsB,CAAC8B,EAAD,EAAKA,EAAL,CAAtB,CAAL;AACAE,MAAAA,EAAE,GAAGlC,KAAK,CAACmC,IAAN,CAAWhC,cAAX,EAA2B,CAAC6B,EAAD,EAAKA,EAAL,CAA3B,CAAL;AACD,KA1B4C,CA0B3C;;;AAGF,QAAII,CAAC,GAAG,EAAR,CA7B6C,CA6BjC;;AAEZ,SAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGa,KAApB,EAA2Bb,CAAC,EAA5B,EAAgC;AAC9B;AACA,UAAIe,GAAG,GAAGjC,KAAK,CAACkB,CAAD,CAAf,CAF8B,CAEV;;AAEpBH,MAAAA,CAAC,CAACG,CAAD,CAAD,GAAO,EAAP,CAJ8B,CAInB;;AAEX,WAAK,IAAIF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,QAApB,EAA8BM,CAAC,EAA/B,EAAmC;AACjC;AACA,YAAIC,GAAG,GAAGJ,EAAE,CAACoB,GAAG,CAAC,CAAD,CAAJ,EAAS3B,KAAK,CAAC,CAAD,CAAL,CAASU,CAAT,CAAT,CAAZ,CAFiC,CAEE;;AAEnC,aAAK,IAAIkB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,QAApB,EAA8BE,CAAC,EAA/B,EAAmC;AACjC;AACAjB,UAAAA,GAAG,GAAGL,EAAE,CAACK,GAAD,EAAMJ,EAAE,CAACoB,GAAG,CAACC,CAAD,CAAJ,EAAS5B,KAAK,CAAC4B,CAAD,CAAL,CAASlB,CAAT,CAAT,CAAR,CAAR;AACD;;AAEDD,QAAAA,CAAC,CAACG,CAAD,CAAD,CAAKF,CAAL,IAAUC,GAAV;AACD;AACF,KAhD4C,CAgD3C;;;AAGF,WAAOvB,CAAC,CAACyB,iBAAF,CAAoB;AACzBC,MAAAA,IAAI,EAAEL,CADmB;AAEzBM,MAAAA,IAAI,EAAE,CAACU,KAAD,EAAQrB,QAAR,CAFmB;AAGzBY,MAAAA,QAAQ,EAAEX;AAHe,KAApB,CAAP;AAKD;AACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGE,WAASiB,gCAAT,CAA0ClC,CAA1C,EAA6CC,CAA7C,EAAgD;AAC9C;AACA,QAAIK,KAAK,GAAGN,CAAC,CAACO,KAAd;AACA,QAAIC,KAAK,GAAGR,CAAC,CAACS,KAAd;AACA,QAAIC,GAAG,GAAGV,CAAC,CAACW,SAAZ,CAJ8C,CAIvB;;AAEvB,QAAI8B,OAAO,GAAGxC,CAAC,CAACyC,OAAhB;AACA,QAAIC,MAAM,GAAG1C,CAAC,CAAC2C,MAAf;AACA,QAAIC,IAAI,GAAG5C,CAAC,CAAC6C,IAAb;AACA,QAAIjC,KAAK,GAAGZ,CAAC,CAACQ,KAAd;AACA,QAAIK,GAAG,GAAGb,CAAC,CAACU,SAAZ,CAV8C,CAUvB;;AAEvB,QAAI,CAAC8B,OAAL,EAAc;AACZ,YAAM,IAAI3C,KAAJ,CAAU,wDAAV,CAAN;AACD,KAd6C,CAc5C;;;AAGF,QAAIuC,KAAK,GAAG7B,KAAK,CAAC,CAAD,CAAjB;AACA,QAAIQ,QAAQ,GAAGH,KAAK,CAAC,CAAD,CAApB,CAlB8C,CAkBrB;;AAEzB,QAAII,EAAJ,CApB8C,CAoBtC;;AAER,QAAIC,EAAE,GAAG/B,SAAT,CAtB8C,CAsB1B;;AAEpB,QAAIgC,EAAE,GAAG/B,cAAT,CAxB8C,CAwBrB;;AAEzB,QAAI2D,EAAE,GAAG1D,WAAT,CA1B8C,CA0BxB;;AAEtB,QAAI2D,IAAI,GAAG,CAAX,CA5B8C,CA4BhC;;AAEd,QAAItC,GAAG,IAAII,GAAP,IAAcJ,GAAG,KAAKI,GAAtB,IAA6B,OAAOJ,GAAP,KAAe,QAAhD,EAA0D;AACxD;AACAO,MAAAA,EAAE,GAAGP,GAAL,CAFwD,CAE9C;;AAEVQ,MAAAA,EAAE,GAAGjC,KAAK,CAACmC,IAAN,CAAWjC,SAAX,EAAsB,CAAC8B,EAAD,EAAKA,EAAL,CAAtB,CAAL;AACAE,MAAAA,EAAE,GAAGlC,KAAK,CAACmC,IAAN,CAAWhC,cAAX,EAA2B,CAAC6B,EAAD,EAAKA,EAAL,CAA3B,CAAL;AACA8B,MAAAA,EAAE,GAAG9D,KAAK,CAACmC,IAAN,CAAW/B,WAAX,EAAwB,CAAC4B,EAAD,EAAKA,EAAL,CAAxB,CAAL,CANwD,CAMhB;;AAExC+B,MAAAA,IAAI,GAAG/D,KAAK,CAACgE,OAAN,CAAc,CAAd,EAAiBhC,EAAjB,CAAP;AACD,KAvC6C,CAuC5C;;;AAGF,QAAIiC,OAAO,GAAG,EAAd;AACA,QAAIC,MAAM,GAAG,EAAb;AACA,QAAIC,IAAI,GAAG,EAAX,CA5C8C,CA4C/B;;AAEf,QAAI/B,CAAC,GAAGpB,CAAC,CAACoD,kBAAF,CAAqB;AAC3BC,MAAAA,MAAM,EAAEJ,OADmB;AAE3BK,MAAAA,KAAK,EAAEJ,MAFoB;AAG3BK,MAAAA,GAAG,EAAEJ,IAHsB;AAI3BzB,MAAAA,IAAI,EAAE,CAACU,KAAD,EAAQrB,QAAR,CAJqB;AAK3BY,MAAAA,QAAQ,EAAEX;AALiB,KAArB,CAAR,CA9C8C,CAoD1C;;AAEJ,SAAK,IAAIwC,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGzC,QAAtB,EAAgCyC,EAAE,EAAlC,EAAsC;AACpC;AACAL,MAAAA,IAAI,CAACK,EAAD,CAAJ,GAAWN,MAAM,CAACvD,MAAlB,CAFoC,CAEV;;AAE1B,UAAI8D,GAAG,GAAGb,IAAI,CAACY,EAAD,CAAd;AACA,UAAIE,GAAG,GAAGd,IAAI,CAACY,EAAE,GAAG,CAAN,CAAd,CALoC,CAKZ;;AAExB,UAAIE,GAAG,GAAGD,GAAV,EAAe;AACb;AACA,YAAIE,IAAI,GAAG,CAAX,CAFa,CAEC;;AAEd,aAAK,IAAIpC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGa,KAApB,EAA2Bb,CAAC,EAA5B,EAAgC;AAC9B;AACA,cAAIqC,IAAI,GAAGrC,CAAC,GAAG,CAAf,CAF8B,CAEZ;;AAElB,cAAIsC,GAAG,GAAG,KAAK,CAAf,CAJ8B,CAIZ;;AAElB,eAAK,IAAIC,EAAE,GAAGL,GAAd,EAAmBK,EAAE,GAAGJ,GAAxB,EAA6BI,EAAE,EAA/B,EAAmC;AACjC;AACA,gBAAIC,EAAE,GAAGrB,MAAM,CAACoB,EAAD,CAAf,CAFiC,CAEZ;;AAErB,gBAAIH,IAAI,KAAKC,IAAb,EAAmB;AACjB;AACAC,cAAAA,GAAG,GAAG3C,EAAE,CAACb,KAAK,CAACkB,CAAD,CAAL,CAASwC,EAAT,CAAD,EAAevB,OAAO,CAACsB,EAAD,CAAtB,CAAR,CAFiB,CAEoB;;AAErCH,cAAAA,IAAI,GAAGC,IAAP;AACD,aALD,MAKO;AACL;AACAC,cAAAA,GAAG,GAAG5C,EAAE,CAAC4C,GAAD,EAAM3C,EAAE,CAACb,KAAK,CAACkB,CAAD,CAAL,CAASwC,EAAT,CAAD,EAAevB,OAAO,CAACsB,EAAD,CAAtB,CAAR,CAAR;AACD;AACF,WAnB6B,CAmB5B;;;AAGF,cAAIH,IAAI,KAAKC,IAAT,IAAiB,CAACd,EAAE,CAACe,GAAD,EAAMd,IAAN,CAAxB,EAAqC;AACnC;AACAG,YAAAA,MAAM,CAACc,IAAP,CAAYzC,CAAZ;AACA0B,YAAAA,OAAO,CAACe,IAAR,CAAaH,GAAb;AACD;AACF;AACF;AACF,KA9F6C,CA8F5C;;;AAGFV,IAAAA,IAAI,CAACpC,QAAD,CAAJ,GAAiBmC,MAAM,CAACvD,MAAxB,CAjG8C,CAiGd;;AAEhC,WAAOyB,CAAP;AACD;AACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGE,WAASU,2BAAT,CAAqC/B,CAArC,EAAwCC,CAAxC,EAA2C;AACzC;AACA,QAAIiE,OAAO,GAAGlE,CAAC,CAAC0C,OAAhB;AACA,QAAIyB,MAAM,GAAGnE,CAAC,CAAC4C,MAAf;AACA,QAAIwB,IAAI,GAAGpE,CAAC,CAAC8C,IAAb;AACA,QAAIpC,GAAG,GAAGV,CAAC,CAACW,SAAZ,CALyC,CAKlB;;AAEvB,QAAI,CAACuD,OAAL,EAAc;AACZ,YAAM,IAAIpE,KAAJ,CAAU,wDAAV,CAAN;AACD,KATwC,CASvC;;;AAGF,QAAIc,KAAK,GAAGX,CAAC,CAACM,KAAd;AACA,QAAIO,GAAG,GAAGb,CAAC,CAACU,SAAZ,CAbyC,CAalB;;AAEvB,QAAI0B,KAAK,GAAGrC,CAAC,CAACS,KAAF,CAAQ,CAAR,CAAZ;AACA,QAAI4D,KAAK,GAAGpE,CAAC,CAACQ,KAAF,CAAQ,CAAR,CAAZ,CAhByC,CAgBjB;;AAExB,QAAIyC,OAAO,GAAG,EAAd;AACA,QAAIC,MAAM,GAAG,EAAb;AACA,QAAIC,IAAI,GAAG,EAAX,CApByC,CAoB1B;;AAEf,QAAInC,EAAJ,CAtByC,CAsBjC;;AAER,QAAIC,EAAE,GAAG/B,SAAT,CAxByC,CAwBrB;;AAEpB,QAAIgC,EAAE,GAAG/B,cAAT,CA1ByC,CA0BhB;;AAEzB,QAAI2D,EAAE,GAAG1D,WAAT,CA5ByC,CA4BnB;;AAEtB,QAAI2D,IAAI,GAAG,CAAX,CA9ByC,CA8B3B;;AAEd,QAAItC,GAAG,IAAII,GAAP,IAAcJ,GAAG,KAAKI,GAAtB,IAA6B,OAAOJ,GAAP,KAAe,QAAhD,EAA0D;AACxD;AACAO,MAAAA,EAAE,GAAGP,GAAL,CAFwD,CAE9C;;AAEVQ,MAAAA,EAAE,GAAGjC,KAAK,CAACmC,IAAN,CAAWjC,SAAX,EAAsB,CAAC8B,EAAD,EAAKA,EAAL,CAAtB,CAAL;AACAE,MAAAA,EAAE,GAAGlC,KAAK,CAACmC,IAAN,CAAWhC,cAAX,EAA2B,CAAC6B,EAAD,EAAKA,EAAL,CAA3B,CAAL;AACA8B,MAAAA,EAAE,GAAG9D,KAAK,CAACmC,IAAN,CAAW/B,WAAX,EAAwB,CAAC4B,EAAD,EAAKA,EAAL,CAAxB,CAAL,CANwD,CAMhB;;AAExC+B,MAAAA,IAAI,GAAG/D,KAAK,CAACgE,OAAN,CAAc,CAAd,EAAiBhC,EAAjB,CAAP;AACD,KAzCwC,CAyCvC;;;AAGF,QAAIuB,CAAC,GAAG,EAAR,CA5CyC,CA4C7B;;AAEZ,QAAI8B,CAAC,GAAG,EAAR,CA9CyC,CA8C7B;;AAEZlB,IAAAA,IAAI,CAAC,CAAD,CAAJ,GAAU,CAAV,CAhDyC,CAgD5B;;AAEb,SAAK,IAAIY,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGK,KAAtB,EAA6BL,EAAE,EAA/B,EAAmC;AACjC;AACA,UAAIO,GAAG,GAAG3D,KAAK,CAACoD,EAAD,CAAf,CAFiC,CAEZ;;AAErB,UAAI,CAACjB,EAAE,CAACwB,GAAD,EAAMvB,IAAN,CAAP,EAAoB;AAClB;AACA,aAAK,IAAIwB,GAAG,GAAGJ,IAAI,CAACJ,EAAD,CAAd,EAAoBS,GAAG,GAAGL,IAAI,CAACJ,EAAE,GAAG,CAAN,CAA9B,EAAwCU,EAAE,GAAGF,GAAlD,EAAuDE,EAAE,GAAGD,GAA5D,EAAiEC,EAAE,EAAnE,EAAuE;AACrE;AACA,cAAIC,EAAE,GAAGR,MAAM,CAACO,EAAD,CAAf,CAFqE,CAEhD;;AAErB,cAAI,CAACJ,CAAC,CAACK,EAAD,CAAN,EAAY;AACV;AACAL,YAAAA,CAAC,CAACK,EAAD,CAAD,GAAQ,IAAR,CAFU,CAEI;;AAEdxB,YAAAA,MAAM,CAACc,IAAP,CAAYU,EAAZ,EAJU,CAIO;;AAEjBnC,YAAAA,CAAC,CAACmC,EAAD,CAAD,GAAQxD,EAAE,CAACoD,GAAD,EAAML,OAAO,CAACQ,EAAD,CAAb,CAAV;AACD,WAPD,MAOO;AACL;AACAlC,YAAAA,CAAC,CAACmC,EAAD,CAAD,GAAQzD,EAAE,CAACsB,CAAC,CAACmC,EAAD,CAAF,EAAQxD,EAAE,CAACoD,GAAD,EAAML,OAAO,CAACQ,EAAD,CAAb,CAAV,CAAV;AACD;AACF;AACF;AACF,KAzEwC,CAyEvC;;;AAGF,SAAK,IAAIE,EAAE,GAAGzB,MAAM,CAACvD,MAAhB,EAAwBiF,CAAC,GAAG,CAAjC,EAAoCA,CAAC,GAAGD,EAAxC,EAA4CC,CAAC,EAA7C,EAAiD;AAC/C;AACA,UAAIC,EAAE,GAAG3B,MAAM,CAAC0B,CAAD,CAAf,CAF+C,CAE3B;;AAEpB3B,MAAAA,OAAO,CAAC2B,CAAD,CAAP,GAAarC,CAAC,CAACsC,EAAD,CAAd;AACD,KAjFwC,CAiFvC;;;AAGF1B,IAAAA,IAAI,CAAC,CAAD,CAAJ,GAAUD,MAAM,CAACvD,MAAjB,CApFyC,CAoFhB;;AAEzB,WAAOI,CAAC,CAACqD,kBAAF,CAAqB;AAC1BC,MAAAA,MAAM,EAAEJ,OADkB;AAE1BK,MAAAA,KAAK,EAAEJ,MAFmB;AAG1BK,MAAAA,GAAG,EAAEJ,IAHqB;AAI1BzB,MAAAA,IAAI,EAAE,CAACU,KAAD,EAAQ,CAAR,CAJoB;AAK1BT,MAAAA,QAAQ,EAAEX;AALgB,KAArB,CAAP;AAOD;AACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGE,WAASkB,gCAAT,CAA0CnC,CAA1C,EAA6CC,CAA7C,EAAgD;AAC9C;AACA,QAAIiE,OAAO,GAAGlE,CAAC,CAAC0C,OAAhB;AACA,QAAIyB,MAAM,GAAGnE,CAAC,CAAC4C,MAAf;AACA,QAAIwB,IAAI,GAAGpE,CAAC,CAAC8C,IAAb;AACA,QAAIpC,GAAG,GAAGV,CAAC,CAACW,SAAZ,CAL8C,CAKvB;;AAEvB,QAAI,CAACuD,OAAL,EAAc;AACZ,YAAM,IAAIpE,KAAJ,CAAU,wDAAV,CAAN;AACD,KAT6C,CAS5C;;;AAGF,QAAIc,KAAK,GAAGX,CAAC,CAACM,KAAd;AACA,QAAIO,GAAG,GAAGb,CAAC,CAACU,SAAZ,CAb8C,CAavB;;AAEvB,QAAI0B,KAAK,GAAGrC,CAAC,CAACS,KAAF,CAAQ,CAAR,CAAZ;AACA,QAAI4D,KAAK,GAAGpE,CAAC,CAACQ,KAAF,CAAQ,CAAR,CAAZ;AACA,QAAIO,QAAQ,GAAGf,CAAC,CAACQ,KAAF,CAAQ,CAAR,CAAf,CAjB8C,CAiBnB;;AAE3B,QAAIQ,EAAJ,CAnB8C,CAmBtC;;AAER,QAAIC,EAAE,GAAG/B,SAAT,CArB8C,CAqB1B;;AAEpB,QAAIgC,EAAE,GAAG/B,cAAT,CAvB8C,CAuBrB;;AAEzB,QAAI2D,EAAE,GAAG1D,WAAT,CAzB8C,CAyBxB;;AAEtB,QAAI2D,IAAI,GAAG,CAAX,CA3B8C,CA2BhC;;AAEd,QAAItC,GAAG,IAAII,GAAP,IAAcJ,GAAG,KAAKI,GAAtB,IAA6B,OAAOJ,GAAP,KAAe,QAAhD,EAA0D;AACxD;AACAO,MAAAA,EAAE,GAAGP,GAAL,CAFwD,CAE9C;;AAEVQ,MAAAA,EAAE,GAAGjC,KAAK,CAACmC,IAAN,CAAWjC,SAAX,EAAsB,CAAC8B,EAAD,EAAKA,EAAL,CAAtB,CAAL;AACAE,MAAAA,EAAE,GAAGlC,KAAK,CAACmC,IAAN,CAAWhC,cAAX,EAA2B,CAAC6B,EAAD,EAAKA,EAAL,CAA3B,CAAL;AACA8B,MAAAA,EAAE,GAAG9D,KAAK,CAACmC,IAAN,CAAW/B,WAAX,EAAwB,CAAC4B,EAAD,EAAKA,EAAL,CAAxB,CAAL,CANwD,CAMhB;;AAExC+B,MAAAA,IAAI,GAAG/D,KAAK,CAACgE,OAAN,CAAc,CAAd,EAAiBhC,EAAjB,CAAP;AACD,KAtC6C,CAsC5C;;;AAGF,QAAIiC,OAAO,GAAG,EAAd;AACA,QAAIC,MAAM,GAAG,EAAb;AACA,QAAIC,IAAI,GAAG,EAAX,CA3C8C,CA2C/B;;AAEf,QAAI/B,CAAC,GAAGrB,CAAC,CAACqD,kBAAF,CAAqB;AAC3BC,MAAAA,MAAM,EAAEJ,OADmB;AAE3BK,MAAAA,KAAK,EAAEJ,MAFoB;AAG3BK,MAAAA,GAAG,EAAEJ,IAHsB;AAI3BzB,MAAAA,IAAI,EAAE,CAACU,KAAD,EAAQrB,QAAR,CAJqB;AAK3BY,MAAAA,QAAQ,EAAEX;AALiB,KAArB,CAAR,CA7C8C,CAmD1C;;AAEJ,QAAIuB,CAAC,GAAG,EAAR,CArD8C,CAqDlC;;AAEZ,QAAI8B,CAAC,GAAG,EAAR,CAvD8C,CAuDlC;;AAEZ,SAAK,IAAIb,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGzC,QAAtB,EAAgCyC,EAAE,EAAlC,EAAsC;AACpC;AACAL,MAAAA,IAAI,CAACK,EAAD,CAAJ,GAAWN,MAAM,CAACvD,MAAlB,CAFoC,CAEV;;AAE1B,UAAIiE,IAAI,GAAGJ,EAAE,GAAG,CAAhB,CAJoC,CAIjB;;AAEnB,WAAK,IAAIO,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGK,KAAtB,EAA6BL,EAAE,EAA/B,EAAmC;AACjC;AACA,YAAIe,IAAI,GAAGnE,KAAK,CAACoD,EAAD,CAAL,CAAUP,EAAV,CAAX,CAFiC,CAEP;;AAE1B,YAAI,CAACV,EAAE,CAACgC,IAAD,EAAO/B,IAAP,CAAP,EAAqB;AACnB;AACA,eAAK,IAAIwB,GAAG,GAAGJ,IAAI,CAACJ,EAAD,CAAd,EAAoBS,GAAG,GAAGL,IAAI,CAACJ,EAAE,GAAG,CAAN,CAA9B,EAAwCU,EAAE,GAAGF,GAAlD,EAAuDE,EAAE,GAAGD,GAA5D,EAAiEC,EAAE,EAAnE,EAAuE;AACrE;AACA,gBAAIC,EAAE,GAAGR,MAAM,CAACO,EAAD,CAAf,CAFqE,CAEhD;;AAErB,gBAAIJ,CAAC,CAACK,EAAD,CAAD,KAAUd,IAAd,EAAoB;AAClB;AACAS,cAAAA,CAAC,CAACK,EAAD,CAAD,GAAQd,IAAR,CAFkB,CAEJ;;AAEdV,cAAAA,MAAM,CAACc,IAAP,CAAYU,EAAZ,EAJkB,CAID;;AAEjBnC,cAAAA,CAAC,CAACmC,EAAD,CAAD,GAAQxD,EAAE,CAAC4D,IAAD,EAAOb,OAAO,CAACQ,EAAD,CAAd,CAAV;AACD,aAPD,MAOO;AACL;AACAlC,cAAAA,CAAC,CAACmC,EAAD,CAAD,GAAQzD,EAAE,CAACsB,CAAC,CAACmC,EAAD,CAAF,EAAQxD,EAAE,CAAC4D,IAAD,EAAOb,OAAO,CAACQ,EAAD,CAAd,CAAV,CAAV;AACD;AACF;AACF;AACF,OA7BmC,CA6BlC;;;AAGF,WAAK,IAAIM,EAAE,GAAG5B,IAAI,CAACK,EAAD,CAAb,EAAmBmB,EAAE,GAAGzB,MAAM,CAACvD,MAA/B,EAAuCiF,CAAC,GAAGG,EAAhD,EAAoDH,CAAC,GAAGD,EAAxD,EAA4DC,CAAC,EAA7D,EAAiE;AAC/D;AACA,YAAIC,EAAE,GAAG3B,MAAM,CAAC0B,CAAD,CAAf,CAF+D,CAE3C;;AAEpB3B,QAAAA,OAAO,CAAC2B,CAAD,CAAP,GAAarC,CAAC,CAACsC,EAAD,CAAd;AACD;AACF,KA/F6C,CA+F5C;;;AAGF1B,IAAAA,IAAI,CAACpC,QAAD,CAAJ,GAAiBmC,MAAM,CAACvD,MAAxB,CAlG8C,CAkGd;;AAEhC,WAAOyB,CAAP;AACD;AACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGE,WAASe,iCAAT,CAA2CpC,CAA3C,EAA8CC,CAA9C,EAAiD;AAC/C;AACA,QAAIiE,OAAO,GAAGlE,CAAC,CAAC0C,OAAhB;AACA,QAAIyB,MAAM,GAAGnE,CAAC,CAAC4C,MAAf;AACA,QAAIwB,IAAI,GAAGpE,CAAC,CAAC8C,IAAb;AACA,QAAIpC,GAAG,GAAGV,CAAC,CAACW,SAAZ,CAL+C,CAKxB;;AAEvB,QAAI8B,OAAO,GAAGxC,CAAC,CAACyC,OAAhB;AACA,QAAIC,MAAM,GAAG1C,CAAC,CAAC2C,MAAf;AACA,QAAIC,IAAI,GAAG5C,CAAC,CAAC6C,IAAb;AACA,QAAIhC,GAAG,GAAGb,CAAC,CAACU,SAAZ,CAV+C,CAUxB;;AAEvB,QAAI0B,KAAK,GAAGrC,CAAC,CAACS,KAAF,CAAQ,CAAR,CAAZ;AACA,QAAIO,QAAQ,GAAGf,CAAC,CAACQ,KAAF,CAAQ,CAAR,CAAf,CAb+C,CAapB;;AAE3B,QAAI6C,MAAM,GAAGY,OAAO,IAAIzB,OAAxB,CAf+C,CAed;;AAEjC,QAAIxB,EAAJ,CAjB+C,CAiBvC;;AAER,QAAIC,EAAE,GAAG/B,SAAT,CAnB+C,CAmB3B;;AAEpB,QAAIgC,EAAE,GAAG/B,cAAT,CArB+C,CAqBtB;;AAEzB,QAAIsB,GAAG,IAAII,GAAP,IAAcJ,GAAG,KAAKI,GAAtB,IAA6B,OAAOJ,GAAP,KAAe,QAAhD,EAA0D;AACxD;AACAO,MAAAA,EAAE,GAAGP,GAAL,CAFwD,CAE9C;;AAEVQ,MAAAA,EAAE,GAAGjC,KAAK,CAACmC,IAAN,CAAWjC,SAAX,EAAsB,CAAC8B,EAAD,EAAKA,EAAL,CAAtB,CAAL;AACAE,MAAAA,EAAE,GAAGlC,KAAK,CAACmC,IAAN,CAAWhC,cAAX,EAA2B,CAAC6B,EAAD,EAAKA,EAAL,CAA3B,CAAL;AACD,KA7B8C,CA6B7C;;;AAGF,QAAIiC,OAAO,GAAGI,MAAM,GAAG,EAAH,GAAQ2B,SAA5B;AACA,QAAI9B,MAAM,GAAG,EAAb;AACA,QAAIC,IAAI,GAAG,EAAX,CAlC+C,CAkChC;;AAEf,QAAI/B,CAAC,GAAGrB,CAAC,CAACqD,kBAAF,CAAqB;AAC3BC,MAAAA,MAAM,EAAEJ,OADmB;AAE3BK,MAAAA,KAAK,EAAEJ,MAFoB;AAG3BK,MAAAA,GAAG,EAAEJ,IAHsB;AAI3BzB,MAAAA,IAAI,EAAE,CAACU,KAAD,EAAQrB,QAAR,CAJqB;AAK3BY,MAAAA,QAAQ,EAAEX;AALiB,KAArB,CAAR,CApC+C,CA0C3C;;AAEJ,QAAIuB,CAAC,GAAGc,MAAM,GAAG,EAAH,GAAQ2B,SAAtB,CA5C+C,CA4Cd;;AAEjC,QAAIX,CAAC,GAAG,EAAR,CA9C+C,CA8CnC;;AAEZ,QAAII,EAAJ,EAAQF,GAAR,EAAaC,GAAb,EAAkBV,EAAlB,EAAsBL,GAAtB,EAA2BC,GAA3B,EAAgCgB,EAAhC,EAAoCX,EAApC,CAhD+C,CAgDP;;AAExC,SAAK,IAAIP,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGzC,QAAtB,EAAgCyC,EAAE,EAAlC,EAAsC;AACpC;AACAL,MAAAA,IAAI,CAACK,EAAD,CAAJ,GAAWN,MAAM,CAACvD,MAAlB,CAFoC,CAEV;;AAE1B,UAAIiE,IAAI,GAAGJ,EAAE,GAAG,CAAhB,CAJoC,CAIjB;;AAEnB,WAAKC,GAAG,GAAGb,IAAI,CAACY,EAAD,CAAV,EAAgBE,GAAG,GAAGd,IAAI,CAACY,EAAE,GAAG,CAAN,CAA1B,EAAoCM,EAAE,GAAGL,GAA9C,EAAmDK,EAAE,GAAGJ,GAAxD,EAA6DI,EAAE,EAA/D,EAAmE;AACjE;AACAC,QAAAA,EAAE,GAAGrB,MAAM,CAACoB,EAAD,CAAX,CAFiE,CAEhD;;AAEjB,YAAIT,MAAJ,EAAY;AACV;AACA,eAAKkB,GAAG,GAAGJ,IAAI,CAACJ,EAAD,CAAV,EAAgBS,GAAG,GAAGL,IAAI,CAACJ,EAAE,GAAG,CAAN,CAA1B,EAAoCU,EAAE,GAAGF,GAA9C,EAAmDE,EAAE,GAAGD,GAAxD,EAA6DC,EAAE,EAA/D,EAAmE;AACjE;AACAC,YAAAA,EAAE,GAAGR,MAAM,CAACO,EAAD,CAAX,CAFiE,CAEhD;;AAEjB,gBAAIJ,CAAC,CAACK,EAAD,CAAD,KAAUd,IAAd,EAAoB;AAClB;AACAS,cAAAA,CAAC,CAACK,EAAD,CAAD,GAAQd,IAAR,CAFkB,CAEJ;;AAEdV,cAAAA,MAAM,CAACc,IAAP,CAAYU,EAAZ,EAJkB,CAID;;AAEjBnC,cAAAA,CAAC,CAACmC,EAAD,CAAD,GAAQxD,EAAE,CAACsB,OAAO,CAACsB,EAAD,CAAR,EAAcG,OAAO,CAACQ,EAAD,CAArB,CAAV;AACD,aAPD,MAOO;AACL;AACAlC,cAAAA,CAAC,CAACmC,EAAD,CAAD,GAAQzD,EAAE,CAACsB,CAAC,CAACmC,EAAD,CAAF,EAAQxD,EAAE,CAACsB,OAAO,CAACsB,EAAD,CAAR,EAAcG,OAAO,CAACQ,EAAD,CAArB,CAAV,CAAV;AACD;AACF;AACF,SAlBD,MAkBO;AACL;AACA,eAAKF,GAAG,GAAGJ,IAAI,CAACJ,EAAD,CAAV,EAAgBS,GAAG,GAAGL,IAAI,CAACJ,EAAE,GAAG,CAAN,CAA1B,EAAoCU,EAAE,GAAGF,GAA9C,EAAmDE,EAAE,GAAGD,GAAxD,EAA6DC,EAAE,EAA/D,EAAmE;AACjE;AACAC,YAAAA,EAAE,GAAGR,MAAM,CAACO,EAAD,CAAX,CAFiE,CAEhD;;AAEjB,gBAAIJ,CAAC,CAACK,EAAD,CAAD,KAAUd,IAAd,EAAoB;AAClB;AACAS,cAAAA,CAAC,CAACK,EAAD,CAAD,GAAQd,IAAR,CAFkB,CAEJ;;AAEdV,cAAAA,MAAM,CAACc,IAAP,CAAYU,EAAZ;AACD;AACF;AACF;AACF,OA1CmC,CA0ClC;;;AAGF,UAAIrB,MAAJ,EAAY;AACV;AACA,aAAK,IAAI0B,EAAE,GAAG5B,IAAI,CAACK,EAAD,CAAb,EAAmBmB,EAAE,GAAGzB,MAAM,CAACvD,MAA/B,EAAuCiF,CAAC,GAAGG,EAAhD,EAAoDH,CAAC,GAAGD,EAAxD,EAA4DC,CAAC,EAA7D,EAAiE;AAC/D;AACA,cAAIC,EAAE,GAAG3B,MAAM,CAAC0B,CAAD,CAAf,CAF+D,CAE3C;;AAEpB3B,UAAAA,OAAO,CAAC2B,CAAD,CAAP,GAAarC,CAAC,CAACsC,EAAD,CAAd;AACD;AACF;AACF,KAxG8C,CAwG7C;;;AAGF1B,IAAAA,IAAI,CAACpC,QAAD,CAAJ,GAAiBmC,MAAM,CAACvD,MAAxB,CA3G+C,CA2Gf;;AAEhC,WAAOyB,CAAP;AACD;AACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGE,SAAOpC,KAAK,CAACJ,IAAD,EAAOJ,MAAM,CAAC;AACxB;AACA,oBAAgB,SAASyG,UAAT,CAAoB1C,CAApB,EAAuB2C,CAAvB,EAA0B;AACxC;AACA1F,MAAAA,yBAAyB,CAACf,SAAS,CAAC8D,CAAD,CAAV,EAAe9D,SAAS,CAACyG,CAAD,CAAxB,CAAzB,CAFwC,CAEe;;;AAGvD,UAAIC,CAAC,GAAG,KAAKlG,MAAM,CAACsD,CAAD,CAAX,EAAgBtD,MAAM,CAACiG,CAAD,CAAtB,CAAR,CALwC,CAKJ;;AAEpC,aAAO3G,QAAQ,CAAC4G,CAAD,CAAR,GAAcA,CAAC,CAACC,OAAF,EAAd,GAA4BD,CAAnC;AACD,KAVuB;AAWxB,sBAAkB,SAASE,YAAT,CAAsB9C,CAAtB,EAAyB2C,CAAzB,EAA4B;AAC5C;AACA,UAAII,KAAK,GAAG/C,CAAC,CAACb,IAAF,EAAZ;AACA,UAAI6D,KAAK,GAAGL,CAAC,CAACxD,IAAF,EAAZ,CAH4C,CAGtB;;AAEtBlC,MAAAA,yBAAyB,CAAC8F,KAAD,EAAQC,KAAR,CAAzB,CAL4C,CAKH;;;AAGzC,UAAID,KAAK,CAAC3F,MAAN,KAAiB,CAArB,EAAwB;AACtB;AACA,YAAI4F,KAAK,CAAC5F,MAAN,KAAiB,CAArB,EAAwB;AACtB;AACA,iBAAOG,qBAAqB,CAACyC,CAAD,EAAI2C,CAAJ,EAAOI,KAAK,CAAC,CAAD,CAAZ,CAA5B;AACD,SALqB,CAKpB;;;AAGF,eAAOpF,qBAAqB,CAACqC,CAAD,EAAI2C,CAAJ,CAA5B;AACD,OAjB2C,CAiB1C;;;AAGF,UAAIK,KAAK,CAAC5F,MAAN,KAAiB,CAArB,EAAwB;AACtB;AACA,eAAOiC,qBAAqB,CAACW,CAAD,EAAI2C,CAAJ,CAA5B;AACD,OAvB2C,CAuB1C;;;AAGF,aAAOnD,qBAAqB,CAACQ,CAAD,EAAI2C,CAAJ,CAA5B;AACD,KAtCuB;AAuCxB,qBAAiB,SAASM,WAAT,CAAqBjD,CAArB,EAAwB2C,CAAxB,EAA2B;AAC1C;AACA,aAAO,KAAK3C,CAAL,EAAQtD,MAAM,CAACiG,CAAD,CAAd,CAAP;AACD,KA1CuB;AA2CxB,qBAAiB,SAASO,WAAT,CAAqBlD,CAArB,EAAwB2C,CAAxB,EAA2B;AAC1C;AACA,aAAO,KAAKjG,MAAM,CAACsD,CAAD,EAAI2C,CAAC,CAAC/E,OAAF,EAAJ,CAAX,EAA6B+E,CAA7B,CAAP;AACD,KA9CuB;AA+CxB,yBAAqB,SAASQ,eAAT,CAAyBnD,CAAzB,EAA4B2C,CAA5B,EAA+B;AAClD,aAAO5F,WAAW,CAACiD,CAAD,EAAI2C,CAAJ,EAAO/F,cAAP,EAAuB,KAAvB,CAAlB;AACD,KAjDuB;AAkDxB,wBAAoB,SAASwG,cAAT,CAAwBpD,CAAxB,EAA2B2C,CAA3B,EAA8B;AAChD,aAAO3F,WAAW,CAACgD,CAAD,EAAI2C,CAAJ,EAAO/F,cAAP,EAAuB,KAAvB,CAAlB;AACD,KApDuB;AAqDxB,yBAAqB,SAASyG,eAAT,CAAyBrD,CAAzB,EAA4B2C,CAA5B,EAA+B;AAClD,aAAO5F,WAAW,CAAC4F,CAAD,EAAI3C,CAAJ,EAAOpD,cAAP,EAAuB,IAAvB,CAAlB;AACD,KAvDuB;AAwDxB,wBAAoB,SAAS0G,cAAT,CAAwBtD,CAAxB,EAA2B2C,CAA3B,EAA8B;AAChD,aAAO3F,WAAW,CAAC2F,CAAD,EAAI3C,CAAJ,EAAOpD,cAAP,EAAuB,IAAvB,CAAlB;AACD,KA1DuB;AA2DxB,kBAAc,SAAS2G,QAAT,CAAkBvD,CAAlB,EAAqB2C,CAArB,EAAwB;AACpC;AACA,aAAO3F,WAAW,CAACN,MAAM,CAACsD,CAAD,CAAP,EAAY2C,CAAZ,EAAe/F,cAAf,EAA+B,KAA/B,CAAX,CAAiDiG,OAAjD,EAAP;AACD,KA9DuB;AA+DxB,kBAAc,SAASW,QAAT,CAAkBxD,CAAlB,EAAqB2C,CAArB,EAAwB;AACpC;AACA,aAAO3F,WAAW,CAACN,MAAM,CAACiG,CAAD,CAAP,EAAY3C,CAAZ,EAAepD,cAAf,EAA+B,IAA/B,CAAX,CAAgDiG,OAAhD,EAAP;AACD,KAlEuB;AAmExB,gBAAYjG,cAnEY;AAoExB,wBAAoB,SAAS6G,SAAT,CAAmBzD,CAAnB,EAAsB2C,CAAtB,EAAyBe,IAAzB,EAA+B;AACjD,UAAIC,MAAM,GAAG,KAAK3D,CAAL,EAAQ2C,CAAR,CAAb;;AAEA,WAAK,IAAI3D,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG0E,IAAI,CAACtG,MAAzB,EAAiC4B,CAAC,EAAlC,EAAsC;AACpC2E,QAAAA,MAAM,GAAG,KAAKA,MAAL,EAAaD,IAAI,CAAC1E,CAAD,CAAjB,CAAT;AACD;;AAED,aAAO2E,MAAP;AACD;AA5EuB,GAAD,EA6EtB/G,cAAc,CAACgH,UA7EO,CAAb,CAAZ;AA8ED,CA33BiD,CAA3C","sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { isMatrix } from '../../utils/is.js';\nimport { extend } from '../../utils/object.js';\nimport { arraySize } from '../../utils/array.js';\nimport { createAlgorithm11 } from '../../type/matrix/utils/algorithm11.js';\nimport { createAlgorithm14 } from '../../type/matrix/utils/algorithm14.js';\nvar name = 'multiply';\nvar dependencies = ['typed', 'matrix', 'addScalar', 'multiplyScalar', 'equalScalar', 'dot'];\nexport var createMultiply = /* #__PURE__ */factory(name, dependencies, (_ref) => {\n  var {\n    typed,\n    matrix,\n    addScalar,\n    multiplyScalar,\n    equalScalar,\n    dot\n  } = _ref;\n  var algorithm11 = createAlgorithm11({\n    typed,\n    equalScalar\n  });\n  var algorithm14 = createAlgorithm14({\n    typed\n  });\n\n  function _validateMatrixDimensions(size1, size2) {\n    // check left operand dimensions\n    switch (size1.length) {\n      case 1:\n        // check size2\n        switch (size2.length) {\n          case 1:\n            // Vector x Vector\n            if (size1[0] !== size2[0]) {\n              // throw error\n              throw new RangeError('Dimension mismatch in multiplication. Vectors must have the same length');\n            }\n\n            break;\n\n          case 2:\n            // Vector x Matrix\n            if (size1[0] !== size2[0]) {\n              // throw error\n              throw new RangeError('Dimension mismatch in multiplication. Vector length (' + size1[0] + ') must match Matrix rows (' + size2[0] + ')');\n            }\n\n            break;\n\n          default:\n            throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix B has ' + size2.length + ' dimensions)');\n        }\n\n        break;\n\n      case 2:\n        // check size2\n        switch (size2.length) {\n          case 1:\n            // Matrix x Vector\n            if (size1[1] !== size2[0]) {\n              // throw error\n              throw new RangeError('Dimension mismatch in multiplication. Matrix columns (' + size1[1] + ') must match Vector length (' + size2[0] + ')');\n            }\n\n            break;\n\n          case 2:\n            // Matrix x Matrix\n            if (size1[1] !== size2[0]) {\n              // throw error\n              throw new RangeError('Dimension mismatch in multiplication. Matrix A columns (' + size1[1] + ') must match Matrix B rows (' + size2[0] + ')');\n            }\n\n            break;\n\n          default:\n            throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix B has ' + size2.length + ' dimensions)');\n        }\n\n        break;\n\n      default:\n        throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix A has ' + size1.length + ' dimensions)');\n    }\n  }\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            Dense Vector   (N)\n   * @param {Matrix} b            Dense Vector   (N)\n   *\n   * @return {number}             Scalar value\n   */\n\n\n  function _multiplyVectorVector(a, b, n) {\n    // check empty vector\n    if (n === 0) {\n      throw new Error('Cannot multiply two empty vectors');\n    }\n\n    return dot(a, b);\n  }\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            Dense Vector   (M)\n   * @param {Matrix} b            Matrix         (MxN)\n   *\n   * @return {Matrix}             Dense Vector   (N)\n   */\n\n\n  function _multiplyVectorMatrix(a, b) {\n    // process storage\n    if (b.storage() !== 'dense') {\n      throw new Error('Support for SparseMatrix not implemented');\n    }\n\n    return _multiplyVectorDenseMatrix(a, b);\n  }\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            Dense Vector   (M)\n   * @param {Matrix} b            Dense Matrix   (MxN)\n   *\n   * @return {Matrix}             Dense Vector   (N)\n   */\n\n\n  function _multiplyVectorDenseMatrix(a, b) {\n    // a dense\n    var adata = a._data;\n    var asize = a._size;\n    var adt = a._datatype; // b dense\n\n    var bdata = b._data;\n    var bsize = b._size;\n    var bdt = b._datatype; // rows & columns\n\n    var alength = asize[0];\n    var bcolumns = bsize[1]; // datatype\n\n    var dt; // addScalar signature to use\n\n    var af = addScalar; // multiplyScalar signature to use\n\n    var mf = multiplyScalar; // process data types\n\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt; // find signatures that matches (dt, dt)\n\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n    } // result\n\n\n    var c = []; // loop matrix columns\n\n    for (var j = 0; j < bcolumns; j++) {\n      // sum (do not initialize it with zero)\n      var sum = mf(adata[0], bdata[0][j]); // loop vector\n\n      for (var i = 1; i < alength; i++) {\n        // multiply & accumulate\n        sum = af(sum, mf(adata[i], bdata[i][j]));\n      }\n\n      c[j] = sum;\n    } // return matrix\n\n\n    return a.createDenseMatrix({\n      data: c,\n      size: [bcolumns],\n      datatype: dt\n    });\n  }\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            Matrix         (MxN)\n   * @param {Matrix} b            Dense Vector   (N)\n   *\n   * @return {Matrix}             Dense Vector   (M)\n   */\n\n\n  var _multiplyMatrixVector = typed('_multiplyMatrixVector', {\n    'DenseMatrix, any': _multiplyDenseMatrixVector,\n    'SparseMatrix, any': _multiplySparseMatrixVector\n  });\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            Matrix         (MxN)\n   * @param {Matrix} b            Matrix         (NxC)\n   *\n   * @return {Matrix}             Matrix         (MxC)\n   */\n\n\n  var _multiplyMatrixMatrix = typed('_multiplyMatrixMatrix', {\n    'DenseMatrix, DenseMatrix': _multiplyDenseMatrixDenseMatrix,\n    'DenseMatrix, SparseMatrix': _multiplyDenseMatrixSparseMatrix,\n    'SparseMatrix, DenseMatrix': _multiplySparseMatrixDenseMatrix,\n    'SparseMatrix, SparseMatrix': _multiplySparseMatrixSparseMatrix\n  });\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            DenseMatrix  (MxN)\n   * @param {Matrix} b            Dense Vector (N)\n   *\n   * @return {Matrix}             Dense Vector (M)\n   */\n\n\n  function _multiplyDenseMatrixVector(a, b) {\n    // a dense\n    var adata = a._data;\n    var asize = a._size;\n    var adt = a._datatype; // b dense\n\n    var bdata = b._data;\n    var bdt = b._datatype; // rows & columns\n\n    var arows = asize[0];\n    var acolumns = asize[1]; // datatype\n\n    var dt; // addScalar signature to use\n\n    var af = addScalar; // multiplyScalar signature to use\n\n    var mf = multiplyScalar; // process data types\n\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt; // find signatures that matches (dt, dt)\n\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n    } // result\n\n\n    var c = []; // loop matrix a rows\n\n    for (var i = 0; i < arows; i++) {\n      // current row\n      var row = adata[i]; // sum (do not initialize it with zero)\n\n      var sum = mf(row[0], bdata[0]); // loop matrix a columns\n\n      for (var j = 1; j < acolumns; j++) {\n        // multiply & accumulate\n        sum = af(sum, mf(row[j], bdata[j]));\n      }\n\n      c[i] = sum;\n    } // return matrix\n\n\n    return a.createDenseMatrix({\n      data: c,\n      size: [arows],\n      datatype: dt\n    });\n  }\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            DenseMatrix    (MxN)\n   * @param {Matrix} b            DenseMatrix    (NxC)\n   *\n   * @return {Matrix}             DenseMatrix    (MxC)\n   */\n\n\n  function _multiplyDenseMatrixDenseMatrix(a, b) {\n    // a dense\n    var adata = a._data;\n    var asize = a._size;\n    var adt = a._datatype; // b dense\n\n    var bdata = b._data;\n    var bsize = b._size;\n    var bdt = b._datatype; // rows & columns\n\n    var arows = asize[0];\n    var acolumns = asize[1];\n    var bcolumns = bsize[1]; // datatype\n\n    var dt; // addScalar signature to use\n\n    var af = addScalar; // multiplyScalar signature to use\n\n    var mf = multiplyScalar; // process data types\n\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt; // find signatures that matches (dt, dt)\n\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n    } // result\n\n\n    var c = []; // loop matrix a rows\n\n    for (var i = 0; i < arows; i++) {\n      // current row\n      var row = adata[i]; // initialize row array\n\n      c[i] = []; // loop matrix b columns\n\n      for (var j = 0; j < bcolumns; j++) {\n        // sum (avoid initializing sum to zero)\n        var sum = mf(row[0], bdata[0][j]); // loop matrix a columns\n\n        for (var x = 1; x < acolumns; x++) {\n          // multiply & accumulate\n          sum = af(sum, mf(row[x], bdata[x][j]));\n        }\n\n        c[i][j] = sum;\n      }\n    } // return matrix\n\n\n    return a.createDenseMatrix({\n      data: c,\n      size: [arows, bcolumns],\n      datatype: dt\n    });\n  }\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            DenseMatrix    (MxN)\n   * @param {Matrix} b            SparseMatrix   (NxC)\n   *\n   * @return {Matrix}             SparseMatrix   (MxC)\n   */\n\n\n  function _multiplyDenseMatrixSparseMatrix(a, b) {\n    // a dense\n    var adata = a._data;\n    var asize = a._size;\n    var adt = a._datatype; // b sparse\n\n    var bvalues = b._values;\n    var bindex = b._index;\n    var bptr = b._ptr;\n    var bsize = b._size;\n    var bdt = b._datatype; // validate b matrix\n\n    if (!bvalues) {\n      throw new Error('Cannot multiply Dense Matrix times Pattern only Matrix');\n    } // rows & columns\n\n\n    var arows = asize[0];\n    var bcolumns = bsize[1]; // datatype\n\n    var dt; // addScalar signature to use\n\n    var af = addScalar; // multiplyScalar signature to use\n\n    var mf = multiplyScalar; // equalScalar signature to use\n\n    var eq = equalScalar; // zero value\n\n    var zero = 0; // process data types\n\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt; // find signatures that matches (dt, dt)\n\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype\n\n      zero = typed.convert(0, dt);\n    } // result\n\n\n    var cvalues = [];\n    var cindex = [];\n    var cptr = []; // c matrix\n\n    var c = b.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [arows, bcolumns],\n      datatype: dt\n    }); // loop b columns\n\n    for (var jb = 0; jb < bcolumns; jb++) {\n      // update ptr\n      cptr[jb] = cindex.length; // indeces in column jb\n\n      var kb0 = bptr[jb];\n      var kb1 = bptr[jb + 1]; // do not process column jb if no data exists\n\n      if (kb1 > kb0) {\n        // last row mark processed\n        var last = 0; // loop a rows\n\n        for (var i = 0; i < arows; i++) {\n          // column mark\n          var mark = i + 1; // C[i, jb]\n\n          var cij = void 0; // values in b column j\n\n          for (var kb = kb0; kb < kb1; kb++) {\n            // row\n            var ib = bindex[kb]; // check value has been initialized\n\n            if (last !== mark) {\n              // first value in column jb\n              cij = mf(adata[i][ib], bvalues[kb]); // update mark\n\n              last = mark;\n            } else {\n              // accumulate value\n              cij = af(cij, mf(adata[i][ib], bvalues[kb]));\n            }\n          } // check column has been processed and value != 0\n\n\n          if (last === mark && !eq(cij, zero)) {\n            // push row & value\n            cindex.push(i);\n            cvalues.push(cij);\n          }\n        }\n      }\n    } // update ptr\n\n\n    cptr[bcolumns] = cindex.length; // return sparse matrix\n\n    return c;\n  }\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            SparseMatrix    (MxN)\n   * @param {Matrix} b            Dense Vector (N)\n   *\n   * @return {Matrix}             SparseMatrix    (M, 1)\n   */\n\n\n  function _multiplySparseMatrixVector(a, b) {\n    // a sparse\n    var avalues = a._values;\n    var aindex = a._index;\n    var aptr = a._ptr;\n    var adt = a._datatype; // validate a matrix\n\n    if (!avalues) {\n      throw new Error('Cannot multiply Pattern only Matrix times Dense Matrix');\n    } // b dense\n\n\n    var bdata = b._data;\n    var bdt = b._datatype; // rows & columns\n\n    var arows = a._size[0];\n    var brows = b._size[0]; // result\n\n    var cvalues = [];\n    var cindex = [];\n    var cptr = []; // datatype\n\n    var dt; // addScalar signature to use\n\n    var af = addScalar; // multiplyScalar signature to use\n\n    var mf = multiplyScalar; // equalScalar signature to use\n\n    var eq = equalScalar; // zero value\n\n    var zero = 0; // process data types\n\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt; // find signatures that matches (dt, dt)\n\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype\n\n      zero = typed.convert(0, dt);\n    } // workspace\n\n\n    var x = []; // vector with marks indicating a value x[i] exists in a given column\n\n    var w = []; // update ptr\n\n    cptr[0] = 0; // rows in b\n\n    for (var ib = 0; ib < brows; ib++) {\n      // b[ib]\n      var vbi = bdata[ib]; // check b[ib] != 0, avoid loops\n\n      if (!eq(vbi, zero)) {\n        // A values & index in ib column\n        for (var ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {\n          // a row\n          var ia = aindex[ka]; // check value exists in current j\n\n          if (!w[ia]) {\n            // ia is new entry in j\n            w[ia] = true; // add i to pattern of C\n\n            cindex.push(ia); // x(ia) = A\n\n            x[ia] = mf(vbi, avalues[ka]);\n          } else {\n            // i exists in C already\n            x[ia] = af(x[ia], mf(vbi, avalues[ka]));\n          }\n        }\n      }\n    } // copy values from x to column jb of c\n\n\n    for (var p1 = cindex.length, p = 0; p < p1; p++) {\n      // row\n      var ic = cindex[p]; // copy value\n\n      cvalues[p] = x[ic];\n    } // update ptr\n\n\n    cptr[1] = cindex.length; // return sparse matrix\n\n    return a.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [arows, 1],\n      datatype: dt\n    });\n  }\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            SparseMatrix      (MxN)\n   * @param {Matrix} b            DenseMatrix       (NxC)\n   *\n   * @return {Matrix}             SparseMatrix      (MxC)\n   */\n\n\n  function _multiplySparseMatrixDenseMatrix(a, b) {\n    // a sparse\n    var avalues = a._values;\n    var aindex = a._index;\n    var aptr = a._ptr;\n    var adt = a._datatype; // validate a matrix\n\n    if (!avalues) {\n      throw new Error('Cannot multiply Pattern only Matrix times Dense Matrix');\n    } // b dense\n\n\n    var bdata = b._data;\n    var bdt = b._datatype; // rows & columns\n\n    var arows = a._size[0];\n    var brows = b._size[0];\n    var bcolumns = b._size[1]; // datatype\n\n    var dt; // addScalar signature to use\n\n    var af = addScalar; // multiplyScalar signature to use\n\n    var mf = multiplyScalar; // equalScalar signature to use\n\n    var eq = equalScalar; // zero value\n\n    var zero = 0; // process data types\n\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt; // find signatures that matches (dt, dt)\n\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype\n\n      zero = typed.convert(0, dt);\n    } // result\n\n\n    var cvalues = [];\n    var cindex = [];\n    var cptr = []; // c matrix\n\n    var c = a.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [arows, bcolumns],\n      datatype: dt\n    }); // workspace\n\n    var x = []; // vector with marks indicating a value x[i] exists in a given column\n\n    var w = []; // loop b columns\n\n    for (var jb = 0; jb < bcolumns; jb++) {\n      // update ptr\n      cptr[jb] = cindex.length; // mark in workspace for current column\n\n      var mark = jb + 1; // rows in jb\n\n      for (var ib = 0; ib < brows; ib++) {\n        // b[ib, jb]\n        var vbij = bdata[ib][jb]; // check b[ib, jb] != 0, avoid loops\n\n        if (!eq(vbij, zero)) {\n          // A values & index in ib column\n          for (var ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {\n            // a row\n            var ia = aindex[ka]; // check value exists in current j\n\n            if (w[ia] !== mark) {\n              // ia is new entry in j\n              w[ia] = mark; // add i to pattern of C\n\n              cindex.push(ia); // x(ia) = A\n\n              x[ia] = mf(vbij, avalues[ka]);\n            } else {\n              // i exists in C already\n              x[ia] = af(x[ia], mf(vbij, avalues[ka]));\n            }\n          }\n        }\n      } // copy values from x to column jb of c\n\n\n      for (var p0 = cptr[jb], p1 = cindex.length, p = p0; p < p1; p++) {\n        // row\n        var ic = cindex[p]; // copy value\n\n        cvalues[p] = x[ic];\n      }\n    } // update ptr\n\n\n    cptr[bcolumns] = cindex.length; // return sparse matrix\n\n    return c;\n  }\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            SparseMatrix      (MxN)\n   * @param {Matrix} b            SparseMatrix      (NxC)\n   *\n   * @return {Matrix}             SparseMatrix      (MxC)\n   */\n\n\n  function _multiplySparseMatrixSparseMatrix(a, b) {\n    // a sparse\n    var avalues = a._values;\n    var aindex = a._index;\n    var aptr = a._ptr;\n    var adt = a._datatype; // b sparse\n\n    var bvalues = b._values;\n    var bindex = b._index;\n    var bptr = b._ptr;\n    var bdt = b._datatype; // rows & columns\n\n    var arows = a._size[0];\n    var bcolumns = b._size[1]; // flag indicating both matrices (a & b) contain data\n\n    var values = avalues && bvalues; // datatype\n\n    var dt; // addScalar signature to use\n\n    var af = addScalar; // multiplyScalar signature to use\n\n    var mf = multiplyScalar; // process data types\n\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt; // find signatures that matches (dt, dt)\n\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n    } // result\n\n\n    var cvalues = values ? [] : undefined;\n    var cindex = [];\n    var cptr = []; // c matrix\n\n    var c = a.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [arows, bcolumns],\n      datatype: dt\n    }); // workspace\n\n    var x = values ? [] : undefined; // vector with marks indicating a value x[i] exists in a given column\n\n    var w = []; // variables\n\n    var ka, ka0, ka1, kb, kb0, kb1, ia, ib; // loop b columns\n\n    for (var jb = 0; jb < bcolumns; jb++) {\n      // update ptr\n      cptr[jb] = cindex.length; // mark in workspace for current column\n\n      var mark = jb + 1; // B values & index in j\n\n      for (kb0 = bptr[jb], kb1 = bptr[jb + 1], kb = kb0; kb < kb1; kb++) {\n        // b row\n        ib = bindex[kb]; // check we need to process values\n\n        if (values) {\n          // loop values in a[:,ib]\n          for (ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {\n            // row\n            ia = aindex[ka]; // check value exists in current j\n\n            if (w[ia] !== mark) {\n              // ia is new entry in j\n              w[ia] = mark; // add i to pattern of C\n\n              cindex.push(ia); // x(ia) = A\n\n              x[ia] = mf(bvalues[kb], avalues[ka]);\n            } else {\n              // i exists in C already\n              x[ia] = af(x[ia], mf(bvalues[kb], avalues[ka]));\n            }\n          }\n        } else {\n          // loop values in a[:,ib]\n          for (ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {\n            // row\n            ia = aindex[ka]; // check value exists in current j\n\n            if (w[ia] !== mark) {\n              // ia is new entry in j\n              w[ia] = mark; // add i to pattern of C\n\n              cindex.push(ia);\n            }\n          }\n        }\n      } // check we need to process matrix values (pattern matrix)\n\n\n      if (values) {\n        // copy values from x to column jb of c\n        for (var p0 = cptr[jb], p1 = cindex.length, p = p0; p < p1; p++) {\n          // row\n          var ic = cindex[p]; // copy value\n\n          cvalues[p] = x[ic];\n        }\n      }\n    } // update ptr\n\n\n    cptr[bcolumns] = cindex.length; // return sparse matrix\n\n    return c;\n  }\n  /**\n   * Multiply two or more values, `x * y`.\n   * For matrices, the matrix product is calculated.\n   *\n   * Syntax:\n   *\n   *    math.multiply(x, y)\n   *    math.multiply(x, y, z, ...)\n   *\n   * Examples:\n   *\n   *    math.multiply(4, 5.2)        // returns number 20.8\n   *    math.multiply(2, 3, 4)       // returns number 24\n   *\n   *    const a = math.complex(2, 3)\n   *    const b = math.complex(4, 1)\n   *    math.multiply(a, b)          // returns Complex 5 + 14i\n   *\n   *    const c = [[1, 2], [4, 3]]\n   *    const d = [[1, 2, 3], [3, -4, 7]]\n   *    math.multiply(c, d)          // returns Array [[7, -6, 17], [13, -4, 33]]\n   *\n   *    const e = math.unit('2.1 km')\n   *    math.multiply(3, e)          // returns Unit 6.3 km\n   *\n   * See also:\n   *\n   *    divide, prod, cross, dot\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First value to multiply\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second value to multiply\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Multiplication of `x` and `y`\n   */\n\n\n  return typed(name, extend({\n    // we extend the signatures of multiplyScalar with signatures dealing with matrices\n    'Array, Array': function ArrayArray(x, y) {\n      // check dimensions\n      _validateMatrixDimensions(arraySize(x), arraySize(y)); // use dense matrix implementation\n\n\n      var m = this(matrix(x), matrix(y)); // return array or scalar\n\n      return isMatrix(m) ? m.valueOf() : m;\n    },\n    'Matrix, Matrix': function MatrixMatrix(x, y) {\n      // dimensions\n      var xsize = x.size();\n      var ysize = y.size(); // check dimensions\n\n      _validateMatrixDimensions(xsize, ysize); // process dimensions\n\n\n      if (xsize.length === 1) {\n        // process y dimensions\n        if (ysize.length === 1) {\n          // Vector * Vector\n          return _multiplyVectorVector(x, y, xsize[0]);\n        } // Vector * Matrix\n\n\n        return _multiplyVectorMatrix(x, y);\n      } // process y dimensions\n\n\n      if (ysize.length === 1) {\n        // Matrix * Vector\n        return _multiplyMatrixVector(x, y);\n      } // Matrix * Matrix\n\n\n      return _multiplyMatrixMatrix(x, y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use Matrix * Matrix implementation\n      return this(x, matrix(y));\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use Matrix * Matrix implementation\n      return this(matrix(x, y.storage()), y);\n    },\n    'SparseMatrix, any': function SparseMatrixAny(x, y) {\n      return algorithm11(x, y, multiplyScalar, false);\n    },\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\n      return algorithm14(x, y, multiplyScalar, false);\n    },\n    'any, SparseMatrix': function anySparseMatrix(x, y) {\n      return algorithm11(y, x, multiplyScalar, true);\n    },\n    'any, DenseMatrix': function anyDenseMatrix(x, y) {\n      return algorithm14(y, x, multiplyScalar, true);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, multiplyScalar, false).valueOf();\n    },\n    'any, Array': function anyArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, multiplyScalar, true).valueOf();\n    },\n    'any, any': multiplyScalar,\n    'any, any, ...any': function anyAnyAny(x, y, rest) {\n      var result = this(x, y);\n\n      for (var i = 0; i < rest.length; i++) {\n        result = this(result, rest[i]);\n      }\n\n      return result;\n    }\n  }, multiplyScalar.signatures));\n});"]},"metadata":{},"sourceType":"module"}