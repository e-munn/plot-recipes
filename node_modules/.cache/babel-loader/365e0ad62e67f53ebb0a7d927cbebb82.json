{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/elimunn/Desktop/plot-recipes/src/components/plot/actions/actions.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { select, max, sum, hierarchy, linkHorizontal, easeSin, easeCubicIn, easeCubicOut, transition } from 'd3';\nimport { useSwipeable } from 'react-swipeable';\nimport '../../../css/plot.css';\n\nconst Action = ({\n  root,\n  color,\n  dim,\n  a,\n  b,\n  j,\n  focus,\n  setFocus\n}) => {\n  _s();\n\n  const [done, setDone] = useState(0);\n  const statesIng = [{\n    \"textposX\": b.data.pX + 30,\n    \"dotposX\": b.data.pX - dim.a.width / 2 + 20,\n    \"dotColor\": color.orange2,\n    \"posXTransform\": 'translate(18px, 0px)'\n  }, {\n    \"textposX\": b.data.pX + 10,\n    \"dotposX\": b.data.pX - dim.a.width / 2,\n    \"dotColor\": color.orange1,\n    \"posXTransform\": 'translate(0px, 0px)'\n  }];\n  const focusRef = useRef();\n\n  const label = /*#__PURE__*/_jsxDEV(\"text\", {\n    className: 'plot-animation-fill plot-text weight-2',\n    x: b.data.pX + 10,\n    y: b.data.pY + 5,\n    fill: `${statesIng[done].dotColor}`,\n    textAnchor: 'start',\n    fontSize: dim.a.font.size,\n    fontWeight: dim.a.font.weight,\n    alignmentBaseline: 'middle',\n    ref: focusRef,\n    onClick: () => setFocus([focusRef.current, b]),\n    children: b.data.action\n  }, 'action' + b + j, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n\n  const aHeight = b.data.action_amt * dim.a.amtScale;\n\n  const shape = /*#__PURE__*/_jsxDEV(\"rect\", {\n    className: 'plot-animation-fill',\n    x: b.data.pX - dim.a.width / 2,\n    y: b.data.pY - dim.a.width / 2,\n    width: dim.a.width,\n    height: aHeight + dim.a.width,\n    fill: `${statesIng[done].dotColor}`,\n    rx: dim.a.width / 2\n  }, 'ashape' + b + j, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this); // const dot = (\n  //   <circle\n  //     className={'name'}\n  //     key={'ingredient' + b + j}\n  //     r={4}\n  //     cx={ b.data.pX + 20}\n  //     cy={ b.data.pY }\n  //     fill={`${color.orange3}`}\n  //     >\n  //   </circle>\n  //\n  // )\n\n\n  const swipe = /*#__PURE__*/_jsxDEV(\"rect\", {\n    x: b.data.pX - 20,\n    y: b.data.pY - dim.i.font.size / 2 - 2,\n    width: 90,\n    height: aHeight + dim.a.width + 4,\n    fill: 'transparent',\n    fill: 'orange',\n    opacity: .3\n  }, 'aswipe' + a + b + j, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n\n  const tap = /*#__PURE__*/_jsxDEV(\"rect\", {\n    x: b.data.pX - 20,\n    y: b.data.pY - dim.i.font.size / 2 - 2,\n    width: 90,\n    height: dim.i.font.size + 10 // fill={ 'transparent' }\n    ,\n    fill: 'orange',\n    opacity: .3\n  }, 'aswipe' + a + b + j, false, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n\n  const handlers = useSwipeable({\n    onSwipedLeft: () => setDone(1),\n    onSwipedRight: () => setDone(0)\n  });\n  return /*#__PURE__*/_jsxDEV(\"g\", {\n    className: 'plot-animation-move',\n    className: 'action',\n    style: {\n      transform: `${statesIng[done].posXTransform}`\n    },\n    ...handlers,\n    children: [shape, label, swipe, tap]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Action, \"AFGpRBGm3AKEnnsHSNYurafdPgI=\", false, function () {\n  return [useSwipeable];\n});\n\n_c = Action;\nexport default Action;\n\nvar _c;\n\n$RefreshReg$(_c, \"Action\");","map":{"version":3,"sources":["/Users/elimunn/Desktop/plot-recipes/src/components/plot/actions/actions.js"],"names":["React","useState","useEffect","useRef","select","max","sum","hierarchy","linkHorizontal","easeSin","easeCubicIn","easeCubicOut","transition","useSwipeable","Action","root","color","dim","a","b","j","focus","setFocus","done","setDone","statesIng","data","pX","width","orange2","orange1","focusRef","label","pY","dotColor","font","size","weight","current","action","aHeight","action_amt","amtScale","shape","swipe","i","tap","handlers","onSwipedLeft","onSwipedRight","transform","posXTransform"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { select, max, sum,  hierarchy, linkHorizontal, easeSin, easeCubicIn, easeCubicOut, transition } from 'd3';\nimport { useSwipeable } from 'react-swipeable';\n\nimport '../../../css/plot.css'\n\n\nconst Action = ({ root, color, dim, a, b, j, focus, setFocus}) => {\n\n  const [done, setDone] = useState(0);\n\n  const statesIng = [\n    {\n      \"textposX\": b.data.pX + 30,\n      \"dotposX\": b.data.pX - dim.a.width/2 + 20,\n      \"dotColor\": color.orange2,\n      \"posXTransform\": 'translate(18px, 0px)'\n    },\n    {\n      \"textposX\": b.data.pX + 10,\n      \"dotposX\":  b.data.pX - dim.a.width/2,\n      \"dotColor\": color.orange1,\n      \"posXTransform\": 'translate(0px, 0px)'\n    }\n  ]\n\n  const focusRef = useRef();\n\n  const label = (\n    <text\n      className={'plot-animation-fill plot-text weight-2'}\n      key={'action' + b + j}\n      x={ b.data.pX + 10 }\n      y={ b.data.pY + 5 }\n      fill={`${statesIng[done].dotColor}`}\n      textAnchor={'start'}\n      fontSize={dim.a.font.size}\n      fontWeight={dim.a.font.weight}\n      alignmentBaseline={'middle'}\n      ref={ focusRef }\n      onClick={ () => setFocus([focusRef.current, b]) }\n      >\n      {/* { b.data.stepOrder} */}\n      { b.data.action}\n\n    </text>\n  )\n\n  const aHeight = b.data.action_amt * dim.a.amtScale\n\n  const shape = (\n    <rect\n      className={'plot-animation-fill'}\n      key={'ashape' + b + j}\n      x={ b.data.pX - dim.a.width/2 }\n      y={ b.data.pY - dim.a.width/2 }\n      width={ dim.a.width }\n      height={ aHeight + dim.a.width }\n      fill={`${statesIng[done].dotColor}`}\n      rx={dim.a.width/2}\n      >\n    </rect>\n  )\n\n  // const dot = (\n  //   <circle\n  //     className={'name'}\n  //     key={'ingredient' + b + j}\n  //     r={4}\n  //     cx={ b.data.pX + 20}\n  //     cy={ b.data.pY }\n  //     fill={`${color.orange3}`}\n  //     >\n  //   </circle>\n  //\n  // )\n\n\n  const swipe = (\n    <rect\n      key={'aswipe' + a + b + j}\n      x={ b.data.pX - 20 }\n      y={ b.data.pY - dim.i.font.size/2 - 2}\n      width={ 90 }\n      height={ aHeight + dim.a.width + 4}\n      fill={ 'transparent' }\n      fill={ 'orange' }\n      opacity={ .3 }\n\n      >\n    </rect>\n  )\n\n  const tap = (\n    <rect\n      key={'aswipe' + a + b + j}\n      x={ b.data.pX - 20 }\n      y={ b.data.pY - dim.i.font.size/2 - 2}\n      width={ 90 }\n      height={ dim.i.font.size + 10}\n\n      // fill={ 'transparent' }\n      fill={ 'orange' }\n      opacity={ .3 }\n\n      >\n    </rect>\n  )\n\n\n\n\n    const handlers = useSwipeable({\n      onSwipedLeft: () => setDone(1),\n      onSwipedRight: () => setDone(0),\n    });\n\n  return (\n    <g\n      className={'plot-animation-move'}\n      className={'action'}\n      style={{transform: `${ statesIng[done].posXTransform }`}}\n      {...handlers}\n\n      >\n      {shape}\n      {label}\n      {swipe}\n      {tap}\n\n\n\n      {/* {dot} */}\n\n    </g>\n\n  );\n};\n\nexport default Action;\n"]},"metadata":{},"sourceType":"module"}