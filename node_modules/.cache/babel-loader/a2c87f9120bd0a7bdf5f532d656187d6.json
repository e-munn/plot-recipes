{"ast":null,"code":"import { flatten } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'setMultiplicity';\nvar dependencies = ['typed', 'size', 'subset', 'compareNatural', 'Index'];\nexport var createSetMultiplicity = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    size,\n    subset,\n    compareNatural,\n    Index\n  } = _ref;\n  /**\n   * Count the multiplicity of an element in a multiset.\n   * A multi-dimension array will be converted to a single-dimension array before the operation.\n   *\n   * Syntax:\n   *\n   *    math.setMultiplicity(element, set)\n   *\n   * Examples:\n   *\n   *    math.setMultiplicity(1, [1, 2, 2, 4])    // returns 1\n   *    math.setMultiplicity(2, [1, 2, 2, 4])    // returns 2\n   *\n   * See also:\n   *\n   *    setDistinct, setSize\n   *\n   * @param {number | BigNumber | Fraction | Complex} e  An element in the multiset\n   * @param {Array | Matrix}     a  A multiset\n   * @return {number}            The number of how many times the multiset contains the element\n   */\n\n  return typed(name, {\n    'number | BigNumber | Fraction | Complex, Array | Matrix': function numberBigNumberFractionComplexArrayMatrix(e, a) {\n      if (subset(size(a), new Index(0)) === 0) {\n        // if empty, return 0\n        return 0;\n      }\n\n      var b = flatten(Array.isArray(a) ? a : a.toArray());\n      var count = 0;\n\n      for (var i = 0; i < b.length; i++) {\n        if (compareNatural(b[i], e) === 0) {\n          count++;\n        }\n      }\n\n      return count;\n    }\n  });\n});","map":{"version":3,"sources":["/Users/elimunn/Desktop/plot-recipes/node_modules/mathjs/lib/esm/function/set/setMultiplicity.js"],"names":["flatten","factory","name","dependencies","createSetMultiplicity","_ref","typed","size","subset","compareNatural","Index","numberBigNumberFractionComplexArrayMatrix","e","a","b","Array","isArray","toArray","count","i","length"],"mappings":"AAAA,SAASA,OAAT,QAAwB,sBAAxB;AACA,SAASC,OAAT,QAAwB,wBAAxB;AACA,IAAIC,IAAI,GAAG,iBAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,MAAV,EAAkB,QAAlB,EAA4B,gBAA5B,EAA8C,OAA9C,CAAnB;AACA,OAAO,IAAIC,qBAAqB,GAAG,eAAeH,OAAO,CAACC,IAAD,EAAOC,YAAP,EAAsBE,IAAD,IAAU;AACtF,MAAI;AACFC,IAAAA,KADE;AAEFC,IAAAA,IAFE;AAGFC,IAAAA,MAHE;AAIFC,IAAAA,cAJE;AAKFC,IAAAA;AALE,MAMAL,IANJ;AAQA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAOC,KAAK,CAACJ,IAAD,EAAO;AACjB,+DAA2D,SAASS,yCAAT,CAAmDC,CAAnD,EAAsDC,CAAtD,EAAyD;AAClH,UAAIL,MAAM,CAACD,IAAI,CAACM,CAAD,CAAL,EAAU,IAAIH,KAAJ,CAAU,CAAV,CAAV,CAAN,KAAkC,CAAtC,EAAyC;AACvC;AACA,eAAO,CAAP;AACD;;AAED,UAAII,CAAC,GAAGd,OAAO,CAACe,KAAK,CAACC,OAAN,CAAcH,CAAd,IAAmBA,CAAnB,GAAuBA,CAAC,CAACI,OAAF,EAAxB,CAAf;AACA,UAAIC,KAAK,GAAG,CAAZ;;AAEA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,CAAC,CAACM,MAAtB,EAA8BD,CAAC,EAA/B,EAAmC;AACjC,YAAIV,cAAc,CAACK,CAAC,CAACK,CAAD,CAAF,EAAOP,CAAP,CAAd,KAA4B,CAAhC,EAAmC;AACjCM,UAAAA,KAAK;AACN;AACF;;AAED,aAAOA,KAAP;AACD;AAjBgB,GAAP,CAAZ;AAmBD,CAjDwD,CAAlD","sourcesContent":["import { flatten } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'setMultiplicity';\nvar dependencies = ['typed', 'size', 'subset', 'compareNatural', 'Index'];\nexport var createSetMultiplicity = /* #__PURE__ */factory(name, dependencies, (_ref) => {\n  var {\n    typed,\n    size,\n    subset,\n    compareNatural,\n    Index\n  } = _ref;\n\n  /**\n   * Count the multiplicity of an element in a multiset.\n   * A multi-dimension array will be converted to a single-dimension array before the operation.\n   *\n   * Syntax:\n   *\n   *    math.setMultiplicity(element, set)\n   *\n   * Examples:\n   *\n   *    math.setMultiplicity(1, [1, 2, 2, 4])    // returns 1\n   *    math.setMultiplicity(2, [1, 2, 2, 4])    // returns 2\n   *\n   * See also:\n   *\n   *    setDistinct, setSize\n   *\n   * @param {number | BigNumber | Fraction | Complex} e  An element in the multiset\n   * @param {Array | Matrix}     a  A multiset\n   * @return {number}            The number of how many times the multiset contains the element\n   */\n  return typed(name, {\n    'number | BigNumber | Fraction | Complex, Array | Matrix': function numberBigNumberFractionComplexArrayMatrix(e, a) {\n      if (subset(size(a), new Index(0)) === 0) {\n        // if empty, return 0\n        return 0;\n      }\n\n      var b = flatten(Array.isArray(a) ? a : a.toArray());\n      var count = 0;\n\n      for (var i = 0; i < b.length; i++) {\n        if (compareNatural(b[i], e) === 0) {\n          count++;\n        }\n      }\n\n      return count;\n    }\n  });\n});"]},"metadata":{},"sourceType":"module"}