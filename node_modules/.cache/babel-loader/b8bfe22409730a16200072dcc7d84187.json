{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/elimunn/Desktop/plot-recipes/site/src/components/plot/plot.js\";\nimport React, { useRef } from 'react';\nimport { select, max, sum, hierarchy, linkHorizontal, each, tree } from 'd3';\nimport { scaleLinear } from 'd3-scale';\nimport Vessel from './vessels/vessels.js';\nimport IngredientNode from './ingredients/ingredientNode.js';\nimport Action from './actions/actions.js';\n\nconst Plot = ({\n  recipe,\n  width,\n  height,\n  color,\n  dim\n}) => {\n  // const canvasWidth = width - 2*dim.m.padding;\n  // const canvasHeight = height - 2*dim.m.padding;\n  var root = hierarchy(recipe.recipe[0]);\n  const testTree = tree().size([300, 600])(root);\n\n  const desc = a => a.descendants();\n\n  root.each((d, i) => {\n    d.order = i;\n  });\n  var iorderCount = 0;\n  root.eachAfter(function (d) {\n    if ('vessel' in d.data) {\n      iorderCount = 0;\n    } else if ('ingredient' in d.data) {}\n  });\n  root.count();\n  root.each(d => {\n    d.vesselSibs = d.parent ? d.parent.children.filter(a => \"vessel\" in a.data) : 'none';\n  });\n  root.each(function (d, i) {\n    if (d.depth == 0) {\n      d.pHeight = 40;\n    } else if ('vessel' in d.data) {\n      d.actions = d.children.filter(a => \"action\" in a.data).map(b => b.data.action_amt);\n      d.numIng = d.children.filter(a => \"ingredient\" in a.data).length;\n      d.numShove = d.parent.children.filter(a => \"vessel\" in a.data).filter(a => d.data.vorder > a.data.vorder).length;\n    }\n  });\n  var allVessels = root.descendants().filter(d => 'vessel' in d.data);\n  root.each(function (d) {\n    if (d.depth == 0) {\n      d.posY = 1000;\n      d.posX = 10;\n    } else if ('vessel' in d.data) {\n      d.posX = d.parent.posX + d.numShove * dim.v.shove;\n      var posYAdd = [];\n      allVessels.forEach(a => d.data.vorder > a.data.vorder ? posYAdd.push(dim.v.marginBottom + (sum(a.actions) * dim.a.amtScale + a.numIng * dim.i.height)) : null);\n      d.posY = sum(posYAdd);\n    } else {\n      d.posX = d.parent.posX;\n\n      if ('ingredient' in d.data) {\n        d.posY = d.parent.posY + (d.data.iorder + 1) * dim.i.height;\n      } else if ('action' in d.data) {\n        d.posY = d.parent.posY + (d.data.iorder + 1);\n      }\n    }\n  }); //////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  // descends = descends.filter(d => (d.depth !== 0))\n\n  var flows = [];\n  allVessels.forEach((a, i) => {\n    const vessel = [];\n    vessel.push( /*#__PURE__*/_jsxDEV(Vessel, {\n      a: a,\n      i: i,\n      dim: dim,\n      color: color\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this));\n    const ingredientNodes = [];\n    a.children.forEach((b, j) => {\n      if ('ingredient' in b.data) {\n        ingredientNodes.push( /*#__PURE__*/_jsxDEV(IngredientNode, {\n          color: color,\n          dim: dim,\n          a: a,\n          b: b,\n          j: j\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this));\n      }\n    });\n    const actionNodes = [];\n    a.children.forEach((b, j) => {\n      if ('action' in b.data) {\n        actionNodes.push( /*#__PURE__*/_jsxDEV(Action, {\n          color: color,\n          dim: dim,\n          a: a,\n          b: b,\n          j: j\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this));\n      }\n    });\n    flows.push( /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [ingredientNodes, actionNodes, vessel]\n    }, void 0, true));\n  });\n  return /*#__PURE__*/_jsxDEV(\"g\", {\n    transform: `translate(${0}, ${50})`,\n    children: flows\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 7\n  }, this);\n};\n\n_c = Plot;\nexport default Plot;\n\nvar _c;\n\n$RefreshReg$(_c, \"Plot\");","map":{"version":3,"sources":["/Users/elimunn/Desktop/plot-recipes/site/src/components/plot/plot.js"],"names":["React","useRef","select","max","sum","hierarchy","linkHorizontal","each","tree","scaleLinear","Vessel","IngredientNode","Action","Plot","recipe","width","height","color","dim","root","testTree","size","desc","a","descendants","d","i","order","iorderCount","eachAfter","data","count","vesselSibs","parent","children","filter","depth","pHeight","actions","map","b","action_amt","numIng","length","numShove","vorder","allVessels","posY","posX","v","shove","posYAdd","forEach","push","marginBottom","amtScale","iorder","flows","vessel","ingredientNodes","j","actionNodes"],"mappings":"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","sourcesContent":["import React, { useRef } from 'react';\nimport { select, max, sum,  hierarchy, linkHorizontal, each, tree } from 'd3';\nimport { scaleLinear } from 'd3-scale';\nimport Vessel from './vessels/vessels.js';\nimport IngredientNode from './ingredients/ingredientNode.js';\nimport Action from './actions/actions.js';\n\n\nconst Plot = ({recipe, width, height, color, dim}) => {\n\n  // const canvasWidth = width - 2*dim.m.padding;\n  // const canvasHeight = height - 2*dim.m.padding;\n\n  var root = hierarchy(recipe.recipe[0]);\n\n  const testTree = tree().size([300, 600])(root)\n\n  const desc = (a) => a.descendants()\n  root.each((d, i) => { d.order = i })\n\n  var iorderCount = 0\n  root.eachAfter(\n    function(d){\n      if ('vessel' in d.data) {\n        iorderCount = 0\n      } else if ('ingredient' in d.data){\n      }\n    }\n  )\n\n  root.count()\n  root.each(d => { d.vesselSibs = (d.parent ? d.parent.children.filter(a => (\"vessel\" in a.data)) : 'none' )})\n\n  root.each(\n    function(d, i){\n      if (d.depth == 0){\n        d.pHeight = 40\n      }\n      else if ('vessel' in d.data){\n        d.actions = d.children.filter(a => (\"action\" in a.data)).map(b => b.data.action_amt)\n        d.numIng = d.children.filter(a => (\"ingredient\" in a.data)).length\n        d.numShove = d.parent.children.filter(a => (\"vessel\" in a.data)).filter(a => (d.data.vorder > a.data.vorder)).length\n      }\n    }\n  )\n\n  var allVessels = root.descendants().filter(d =>'vessel' in d.data)\n\n  root.each(function(d){\n    if (d.depth == 0){\n      d.posY = 1000\n      d.posX = 10\n    }\n    else if ('vessel' in d.data) {\n      d.posX = d.parent.posX + (d.numShove * dim.v.shove)\n      var posYAdd = []\n      allVessels.forEach(a => (d.data.vorder > a.data.vorder) ? posYAdd.push(dim.v.marginBottom + ((sum(a.actions) * dim.a.amtScale) + (a.numIng * dim.i.height)) ) : null)\n      d.posY = sum(posYAdd)\n    } else {\n      d.posX = d.parent.posX\n      if('ingredient' in d.data){\n        d.posY = d.parent.posY + ((d.data.iorder + 1) * dim.i.height)\n    } else if('action' in d.data){\n        d.posY = d.parent.posY + ((d.data.iorder + 1))\n      }\n    }\n  })\n\n\n\n\n\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n  // descends = descends.filter(d => (d.depth !== 0))\n\n  var flows = []\n\n  allVessels.forEach((a,i) => {\n\n    const vessel = []\n    vessel.push(\n      <Vessel\n        a={a}\n        i={i}\n        dim={dim}\n        color={color}\n      />\n    )\n\n    const ingredientNodes = []\n\n    a.children.forEach((b,j) => {\n      if ('ingredient' in b.data) {\n        ingredientNodes.push(\n          <IngredientNode\n            color={color}\n            dim={dim}\n            a={a}\n            b={b}\n            j={j}\n          />)\n        }\n      })\n\n    const actionNodes = []\n\n    a.children.forEach((b,j) => {\n      if ('action' in b.data) {\n        actionNodes.push(\n          <Action\n            color={color}\n            dim={dim}\n            a={a}\n            b={b}\n            j={j}\n          />)\n        }\n      })\n\n    flows.push(\n      <>\n        {ingredientNodes}\n        {actionNodes}\n        {vessel}\n      </>\n    )\n  })\n\n\n  return (\n      <g\n        transform={`translate(${0}, ${50})`}\n        >\n        {flows}\n      </g>\n  );\n};\n\nexport default Plot;\n"]},"metadata":{},"sourceType":"module"}