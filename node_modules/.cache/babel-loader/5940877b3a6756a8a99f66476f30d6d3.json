{"ast":null,"code":"import { bitOrBigNumber } from '../../utils/bignumber/bitwise.js';\nimport { factory } from '../../utils/factory.js';\nimport { createAlgorithm14 } from '../../type/matrix/utils/algorithm14.js';\nimport { createAlgorithm13 } from '../../type/matrix/utils/algorithm13.js';\nimport { createAlgorithm10 } from '../../type/matrix/utils/algorithm10.js';\nimport { createAlgorithm04 } from '../../type/matrix/utils/algorithm04.js';\nimport { createAlgorithm01 } from '../../type/matrix/utils/algorithm01.js';\nimport { bitOrNumber } from '../../plain/number/index.js';\nvar name = 'bitOr';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'DenseMatrix'];\nexport var createBitOr = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar,\n    DenseMatrix\n  } = _ref;\n  var algorithm01 = createAlgorithm01({\n    typed\n  });\n  var algorithm04 = createAlgorithm04({\n    typed,\n    equalScalar\n  });\n  var algorithm10 = createAlgorithm10({\n    typed,\n    DenseMatrix\n  });\n  var algorithm13 = createAlgorithm13({\n    typed\n  });\n  var algorithm14 = createAlgorithm14({\n    typed\n  });\n  /**\n   * Bitwise OR two values, `x | y`.\n   * For matrices, the function is evaluated element wise.\n   * For units, the function is evaluated on the lowest print base.\n   *\n   * Syntax:\n   *\n   *    math.bitOr(x, y)\n   *\n   * Examples:\n   *\n   *    math.bitOr(1, 2)               // returns number 3\n   *\n   *    math.bitOr([1, 2, 3], 4)       // returns Array [5, 6, 7]\n   *\n   * See also:\n   *\n   *    bitAnd, bitNot, bitXor, leftShift, rightArithShift, rightLogShift\n   *\n   * @param  {number | BigNumber | Array | Matrix} x First value to or\n   * @param  {number | BigNumber | Array | Matrix} y Second value to or\n   * @return {number | BigNumber | Array | Matrix} OR of `x` and `y`\n   */\n\n  return typed(name, {\n    'number, number': bitOrNumber,\n    'BigNumber, BigNumber': bitOrBigNumber,\n    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {\n      return algorithm04(x, y, this);\n    },\n    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {\n      return algorithm01(y, x, this, true);\n    },\n    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {\n      return algorithm01(x, y, this, false);\n    },\n    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\n      return algorithm13(x, y, this);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return this(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return this(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return this(x, matrix(y));\n    },\n    'SparseMatrix, any': function SparseMatrixAny(x, y) {\n      return algorithm10(x, y, this, false);\n    },\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\n      return algorithm14(x, y, this, false);\n    },\n    'any, SparseMatrix': function anySparseMatrix(x, y) {\n      return algorithm10(y, x, this, true);\n    },\n    'any, DenseMatrix': function anyDenseMatrix(x, y) {\n      return algorithm14(y, x, this, true);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, this, false).valueOf();\n    },\n    'any, Array': function anyArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, this, true).valueOf();\n    }\n  });\n});","map":{"version":3,"sources":["/Users/elimunn/Desktop/plot-recipes/node_modules/mathjs/lib/esm/function/bitwise/bitOr.js"],"names":["bitOrBigNumber","factory","createAlgorithm14","createAlgorithm13","createAlgorithm10","createAlgorithm04","createAlgorithm01","bitOrNumber","name","dependencies","createBitOr","_ref","typed","matrix","equalScalar","DenseMatrix","algorithm01","algorithm04","algorithm10","algorithm13","algorithm14","SparseMatrixSparseMatrix","x","y","SparseMatrixDenseMatrix","DenseMatrixSparseMatrix","DenseMatrixDenseMatrix","ArrayArray","valueOf","ArrayMatrix","MatrixArray","SparseMatrixAny","DenseMatrixAny","anySparseMatrix","anyDenseMatrix","ArrayAny","anyArray"],"mappings":"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","sourcesContent":["import { bitOrBigNumber } from '../../utils/bignumber/bitwise.js';\nimport { factory } from '../../utils/factory.js';\nimport { createAlgorithm14 } from '../../type/matrix/utils/algorithm14.js';\nimport { createAlgorithm13 } from '../../type/matrix/utils/algorithm13.js';\nimport { createAlgorithm10 } from '../../type/matrix/utils/algorithm10.js';\nimport { createAlgorithm04 } from '../../type/matrix/utils/algorithm04.js';\nimport { createAlgorithm01 } from '../../type/matrix/utils/algorithm01.js';\nimport { bitOrNumber } from '../../plain/number/index.js';\nvar name = 'bitOr';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'DenseMatrix'];\nexport var createBitOr = /* #__PURE__ */factory(name, dependencies, (_ref) => {\n  var {\n    typed,\n    matrix,\n    equalScalar,\n    DenseMatrix\n  } = _ref;\n  var algorithm01 = createAlgorithm01({\n    typed\n  });\n  var algorithm04 = createAlgorithm04({\n    typed,\n    equalScalar\n  });\n  var algorithm10 = createAlgorithm10({\n    typed,\n    DenseMatrix\n  });\n  var algorithm13 = createAlgorithm13({\n    typed\n  });\n  var algorithm14 = createAlgorithm14({\n    typed\n  });\n  /**\n   * Bitwise OR two values, `x | y`.\n   * For matrices, the function is evaluated element wise.\n   * For units, the function is evaluated on the lowest print base.\n   *\n   * Syntax:\n   *\n   *    math.bitOr(x, y)\n   *\n   * Examples:\n   *\n   *    math.bitOr(1, 2)               // returns number 3\n   *\n   *    math.bitOr([1, 2, 3], 4)       // returns Array [5, 6, 7]\n   *\n   * See also:\n   *\n   *    bitAnd, bitNot, bitXor, leftShift, rightArithShift, rightLogShift\n   *\n   * @param  {number | BigNumber | Array | Matrix} x First value to or\n   * @param  {number | BigNumber | Array | Matrix} y Second value to or\n   * @return {number | BigNumber | Array | Matrix} OR of `x` and `y`\n   */\n\n  return typed(name, {\n    'number, number': bitOrNumber,\n    'BigNumber, BigNumber': bitOrBigNumber,\n    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {\n      return algorithm04(x, y, this);\n    },\n    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {\n      return algorithm01(y, x, this, true);\n    },\n    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {\n      return algorithm01(x, y, this, false);\n    },\n    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\n      return algorithm13(x, y, this);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return this(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return this(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return this(x, matrix(y));\n    },\n    'SparseMatrix, any': function SparseMatrixAny(x, y) {\n      return algorithm10(x, y, this, false);\n    },\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\n      return algorithm14(x, y, this, false);\n    },\n    'any, SparseMatrix': function anySparseMatrix(x, y) {\n      return algorithm10(y, x, this, true);\n    },\n    'any, DenseMatrix': function anyDenseMatrix(x, y) {\n      return algorithm14(y, x, this, true);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, this, false).valueOf();\n    },\n    'any, Array': function anyArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, this, true).valueOf();\n    }\n  });\n});"]},"metadata":{},"sourceType":"module"}