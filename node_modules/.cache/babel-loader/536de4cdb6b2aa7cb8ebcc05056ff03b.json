{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { deepMap } from '../../utils/collection.js';\nvar name = 'sqrt';\nvar dependencies = ['config', 'typed', 'Complex'];\nexport var createSqrt = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    config,\n    typed,\n    Complex\n  } = _ref;\n  /**\n   * Calculate the square root of a value.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.sqrt(x)\n   *\n   * Examples:\n   *\n   *    math.sqrt(25)                // returns 5\n   *    math.square(5)               // returns 25\n   *    math.sqrt(-4)                // returns Complex 2i\n   *\n   * See also:\n   *\n   *    square, multiply, cube, cbrt, sqrtm\n   *\n   * @param {number | BigNumber | Complex | Array | Matrix | Unit} x\n   *            Value for which to calculate the square root.\n   * @return {number | BigNumber | Complex | Array | Matrix | Unit}\n   *            Returns the square root of `x`\n   */\n\n  return typed('sqrt', {\n    number: _sqrtNumber,\n    Complex: function Complex(x) {\n      return x.sqrt();\n    },\n    BigNumber: function BigNumber(x) {\n      if (!x.isNegative() || config.predictable) {\n        return x.sqrt();\n      } else {\n        // negative value -> downgrade to number to do complex value computation\n        return _sqrtNumber(x.toNumber());\n      }\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      // deep map collection, skip zeros since sqrt(0) = 0\n      return deepMap(x, this, true);\n    },\n    Unit: function Unit(x) {\n      // Someday will work for complex units when they are implemented\n      return x.pow(0.5);\n    }\n  });\n  /**\n   * Calculate sqrt for a number\n   * @param {number} x\n   * @returns {number | Complex} Returns the square root of x\n   * @private\n   */\n\n  function _sqrtNumber(x) {\n    if (isNaN(x)) {\n      return NaN;\n    } else if (x >= 0 || config.predictable) {\n      return Math.sqrt(x);\n    } else {\n      return new Complex(x, 0).sqrt();\n    }\n  }\n});","map":{"version":3,"sources":["/Users/elimunn/Desktop/plot-recipes/node_modules/mathjs/lib/esm/function/arithmetic/sqrt.js"],"names":["factory","deepMap","name","dependencies","createSqrt","_ref","config","typed","Complex","number","_sqrtNumber","x","sqrt","BigNumber","isNegative","predictable","toNumber","ArrayMatrix","Unit","pow","isNaN","NaN","Math"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,OAAT,QAAwB,2BAAxB;AACA,IAAIC,IAAI,GAAG,MAAX;AACA,IAAIC,YAAY,GAAG,CAAC,QAAD,EAAW,OAAX,EAAoB,SAApB,CAAnB;AACA,OAAO,IAAIC,UAAU,GAAG,eAAeJ,OAAO,CAACE,IAAD,EAAOC,YAAP,EAAsBE,IAAD,IAAU;AAC3E,MAAI;AACFC,IAAAA,MADE;AAEFC,IAAAA,KAFE;AAGFC,IAAAA;AAHE,MAIAH,IAJJ;AAMA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAOE,KAAK,CAAC,MAAD,EAAS;AACnBE,IAAAA,MAAM,EAAEC,WADW;AAEnBF,IAAAA,OAAO,EAAE,SAASA,OAAT,CAAiBG,CAAjB,EAAoB;AAC3B,aAAOA,CAAC,CAACC,IAAF,EAAP;AACD,KAJkB;AAKnBC,IAAAA,SAAS,EAAE,SAASA,SAAT,CAAmBF,CAAnB,EAAsB;AAC/B,UAAI,CAACA,CAAC,CAACG,UAAF,EAAD,IAAmBR,MAAM,CAACS,WAA9B,EAA2C;AACzC,eAAOJ,CAAC,CAACC,IAAF,EAAP;AACD,OAFD,MAEO;AACL;AACA,eAAOF,WAAW,CAACC,CAAC,CAACK,QAAF,EAAD,CAAlB;AACD;AACF,KAZkB;AAanB,sBAAkB,SAASC,WAAT,CAAqBN,CAArB,EAAwB;AACxC;AACA,aAAOV,OAAO,CAACU,CAAD,EAAI,IAAJ,EAAU,IAAV,CAAd;AACD,KAhBkB;AAiBnBO,IAAAA,IAAI,EAAE,SAASA,IAAT,CAAcP,CAAd,EAAiB;AACrB;AACA,aAAOA,CAAC,CAACQ,GAAF,CAAM,GAAN,CAAP;AACD;AApBkB,GAAT,CAAZ;AAsBA;AACF;AACA;AACA;AACA;AACA;;AAEE,WAAST,WAAT,CAAqBC,CAArB,EAAwB;AACtB,QAAIS,KAAK,CAACT,CAAD,CAAT,EAAc;AACZ,aAAOU,GAAP;AACD,KAFD,MAEO,IAAIV,CAAC,IAAI,CAAL,IAAUL,MAAM,CAACS,WAArB,EAAkC;AACvC,aAAOO,IAAI,CAACV,IAAL,CAAUD,CAAV,CAAP;AACD,KAFM,MAEA;AACL,aAAO,IAAIH,OAAJ,CAAYG,CAAZ,EAAe,CAAf,EAAkBC,IAAlB,EAAP;AACD;AACF;AACF,CArE6C,CAAvC","sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { deepMap } from '../../utils/collection.js';\nvar name = 'sqrt';\nvar dependencies = ['config', 'typed', 'Complex'];\nexport var createSqrt = /* #__PURE__ */factory(name, dependencies, (_ref) => {\n  var {\n    config,\n    typed,\n    Complex\n  } = _ref;\n\n  /**\n   * Calculate the square root of a value.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.sqrt(x)\n   *\n   * Examples:\n   *\n   *    math.sqrt(25)                // returns 5\n   *    math.square(5)               // returns 25\n   *    math.sqrt(-4)                // returns Complex 2i\n   *\n   * See also:\n   *\n   *    square, multiply, cube, cbrt, sqrtm\n   *\n   * @param {number | BigNumber | Complex | Array | Matrix | Unit} x\n   *            Value for which to calculate the square root.\n   * @return {number | BigNumber | Complex | Array | Matrix | Unit}\n   *            Returns the square root of `x`\n   */\n  return typed('sqrt', {\n    number: _sqrtNumber,\n    Complex: function Complex(x) {\n      return x.sqrt();\n    },\n    BigNumber: function BigNumber(x) {\n      if (!x.isNegative() || config.predictable) {\n        return x.sqrt();\n      } else {\n        // negative value -> downgrade to number to do complex value computation\n        return _sqrtNumber(x.toNumber());\n      }\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      // deep map collection, skip zeros since sqrt(0) = 0\n      return deepMap(x, this, true);\n    },\n    Unit: function Unit(x) {\n      // Someday will work for complex units when they are implemented\n      return x.pow(0.5);\n    }\n  });\n  /**\n   * Calculate sqrt for a number\n   * @param {number} x\n   * @returns {number | Complex} Returns the square root of x\n   * @private\n   */\n\n  function _sqrtNumber(x) {\n    if (isNaN(x)) {\n      return NaN;\n    } else if (x >= 0 || config.predictable) {\n      return Math.sqrt(x);\n    } else {\n      return new Complex(x, 0).sqrt();\n    }\n  }\n});"]},"metadata":{},"sourceType":"module"}