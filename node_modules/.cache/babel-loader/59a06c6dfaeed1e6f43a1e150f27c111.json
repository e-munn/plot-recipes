{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { deepMap } from '../../utils/collection.js';\nimport { absNumber } from '../../plain/number/index.js';\nvar name = 'abs';\nvar dependencies = ['typed'];\nexport var createAbs = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Calculate the absolute value of a number. For matrices, the function is\n   * evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.abs(x)\n   *\n   * Examples:\n   *\n   *    math.abs(3.5)                // returns number 3.5\n   *    math.abs(-4.2)               // returns number 4.2\n   *\n   *    math.abs([3, -5, -1, 0, 2])  // returns Array [3, 5, 1, 0, 2]\n   *\n   * See also:\n   *\n   *    sign\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x\n   *            A number or matrix for which to get the absolute value\n   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit}\n   *            Absolute value of `x`\n   */\n\n  return typed(name, {\n    number: absNumber,\n    Complex: function Complex(x) {\n      return x.abs();\n    },\n    BigNumber: function BigNumber(x) {\n      return x.abs();\n    },\n    Fraction: function Fraction(x) {\n      return x.abs();\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      // deep map collection, skip zeros since abs(0) = 0\n      return deepMap(x, this, true);\n    },\n    Unit: function Unit(x) {\n      return x.abs();\n    }\n  });\n});","map":{"version":3,"sources":["/Users/elimunn/Desktop/plot-recipes/node_modules/mathjs/lib/esm/function/arithmetic/abs.js"],"names":["factory","deepMap","absNumber","name","dependencies","createAbs","_ref","typed","number","Complex","x","abs","BigNumber","Fraction","ArrayMatrix","Unit"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,OAAT,QAAwB,2BAAxB;AACA,SAASC,SAAT,QAA0B,6BAA1B;AACA,IAAIC,IAAI,GAAG,KAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,CAAnB;AACA,OAAO,IAAIC,SAAS,GAAG,eAAeL,OAAO,CAACG,IAAD,EAAOC,YAAP,EAAsBE,IAAD,IAAU;AAC1E,MAAI;AACFC,IAAAA;AADE,MAEAD,IAFJ;AAIA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAOC,KAAK,CAACJ,IAAD,EAAO;AACjBK,IAAAA,MAAM,EAAEN,SADS;AAEjBO,IAAAA,OAAO,EAAE,SAASA,OAAT,CAAiBC,CAAjB,EAAoB;AAC3B,aAAOA,CAAC,CAACC,GAAF,EAAP;AACD,KAJgB;AAKjBC,IAAAA,SAAS,EAAE,SAASA,SAAT,CAAmBF,CAAnB,EAAsB;AAC/B,aAAOA,CAAC,CAACC,GAAF,EAAP;AACD,KAPgB;AAQjBE,IAAAA,QAAQ,EAAE,SAASA,QAAT,CAAkBH,CAAlB,EAAqB;AAC7B,aAAOA,CAAC,CAACC,GAAF,EAAP;AACD,KAVgB;AAWjB,sBAAkB,SAASG,WAAT,CAAqBJ,CAArB,EAAwB;AACxC;AACA,aAAOT,OAAO,CAACS,CAAD,EAAI,IAAJ,EAAU,IAAV,CAAd;AACD,KAdgB;AAejBK,IAAAA,IAAI,EAAE,SAASA,IAAT,CAAcL,CAAd,EAAiB;AACrB,aAAOA,CAAC,CAACC,GAAF,EAAP;AACD;AAjBgB,GAAP,CAAZ;AAmBD,CAhD4C,CAAtC","sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { deepMap } from '../../utils/collection.js';\nimport { absNumber } from '../../plain/number/index.js';\nvar name = 'abs';\nvar dependencies = ['typed'];\nexport var createAbs = /* #__PURE__ */factory(name, dependencies, (_ref) => {\n  var {\n    typed\n  } = _ref;\n\n  /**\n   * Calculate the absolute value of a number. For matrices, the function is\n   * evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.abs(x)\n   *\n   * Examples:\n   *\n   *    math.abs(3.5)                // returns number 3.5\n   *    math.abs(-4.2)               // returns number 4.2\n   *\n   *    math.abs([3, -5, -1, 0, 2])  // returns Array [3, 5, 1, 0, 2]\n   *\n   * See also:\n   *\n   *    sign\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x\n   *            A number or matrix for which to get the absolute value\n   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit}\n   *            Absolute value of `x`\n   */\n  return typed(name, {\n    number: absNumber,\n    Complex: function Complex(x) {\n      return x.abs();\n    },\n    BigNumber: function BigNumber(x) {\n      return x.abs();\n    },\n    Fraction: function Fraction(x) {\n      return x.abs();\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      // deep map collection, skip zeros since abs(0) = 0\n      return deepMap(x, this, true);\n    },\n    Unit: function Unit(x) {\n      return x.abs();\n    }\n  });\n});"]},"metadata":{},"sourceType":"module"}