{"ast":null,"code":"import { memoize } from '../function.js';\n/**\n * Calculate BigNumber e\n * @param {function} BigNumber   BigNumber constructor\n * @returns {BigNumber} Returns e\n */\n\nexport var createBigNumberE = memoize(function (BigNumber) {\n  return new BigNumber(1).exp();\n}, {\n  hasher\n});\n/**\n * Calculate BigNumber golden ratio, phi = (1+sqrt(5))/2\n * @param {function} BigNumber   BigNumber constructor\n * @returns {BigNumber} Returns phi\n */\n\nexport var createBigNumberPhi = memoize(function (BigNumber) {\n  return new BigNumber(1).plus(new BigNumber(5).sqrt()).div(2);\n}, {\n  hasher\n});\n/**\n * Calculate BigNumber pi.\n * @param {function} BigNumber   BigNumber constructor\n * @returns {BigNumber} Returns pi\n */\n\nexport var createBigNumberPi = memoize(function (BigNumber) {\n  return BigNumber.acos(-1);\n}, {\n  hasher\n});\n/**\n * Calculate BigNumber tau, tau = 2 * pi\n * @param {function} BigNumber   BigNumber constructor\n * @returns {BigNumber} Returns tau\n */\n\nexport var createBigNumberTau = memoize(function (BigNumber) {\n  return createBigNumberPi(BigNumber).times(2);\n}, {\n  hasher\n});\n/**\n * Create a hash for a BigNumber constructor function. The created has is\n * the configured precision\n * @param {Array} args         Supposed to contain a single entry with\n *                             a BigNumber constructor\n * @return {number} precision\n * @private\n */\n\nfunction hasher(args) {\n  return args[0].precision;\n}","map":{"version":3,"sources":["/Users/elimunn/Desktop/plot-recipes/node_modules/mathjs/lib/esm/utils/bignumber/constants.js"],"names":["memoize","createBigNumberE","BigNumber","exp","hasher","createBigNumberPhi","plus","sqrt","div","createBigNumberPi","acos","createBigNumberTau","times","args","precision"],"mappings":"AAAA,SAASA,OAAT,QAAwB,gBAAxB;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,IAAIC,gBAAgB,GAAGD,OAAO,CAAC,UAAUE,SAAV,EAAqB;AACzD,SAAO,IAAIA,SAAJ,CAAc,CAAd,EAAiBC,GAAjB,EAAP;AACD,CAFoC,EAElC;AACDC,EAAAA;AADC,CAFkC,CAA9B;AAKP;AACA;AACA;AACA;AACA;;AAEA,OAAO,IAAIC,kBAAkB,GAAGL,OAAO,CAAC,UAAUE,SAAV,EAAqB;AAC3D,SAAO,IAAIA,SAAJ,CAAc,CAAd,EAAiBI,IAAjB,CAAsB,IAAIJ,SAAJ,CAAc,CAAd,EAAiBK,IAAjB,EAAtB,EAA+CC,GAA/C,CAAmD,CAAnD,CAAP;AACD,CAFsC,EAEpC;AACDJ,EAAAA;AADC,CAFoC,CAAhC;AAKP;AACA;AACA;AACA;AACA;;AAEA,OAAO,IAAIK,iBAAiB,GAAGT,OAAO,CAAC,UAAUE,SAAV,EAAqB;AAC1D,SAAOA,SAAS,CAACQ,IAAV,CAAe,CAAC,CAAhB,CAAP;AACD,CAFqC,EAEnC;AACDN,EAAAA;AADC,CAFmC,CAA/B;AAKP;AACA;AACA;AACA;AACA;;AAEA,OAAO,IAAIO,kBAAkB,GAAGX,OAAO,CAAC,UAAUE,SAAV,EAAqB;AAC3D,SAAOO,iBAAiB,CAACP,SAAD,CAAjB,CAA6BU,KAA7B,CAAmC,CAAnC,CAAP;AACD,CAFsC,EAEpC;AACDR,EAAAA;AADC,CAFoC,CAAhC;AAKP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,MAAT,CAAgBS,IAAhB,EAAsB;AACpB,SAAOA,IAAI,CAAC,CAAD,CAAJ,CAAQC,SAAf;AACD","sourcesContent":["import { memoize } from '../function.js';\n/**\n * Calculate BigNumber e\n * @param {function} BigNumber   BigNumber constructor\n * @returns {BigNumber} Returns e\n */\n\nexport var createBigNumberE = memoize(function (BigNumber) {\n  return new BigNumber(1).exp();\n}, {\n  hasher\n});\n/**\n * Calculate BigNumber golden ratio, phi = (1+sqrt(5))/2\n * @param {function} BigNumber   BigNumber constructor\n * @returns {BigNumber} Returns phi\n */\n\nexport var createBigNumberPhi = memoize(function (BigNumber) {\n  return new BigNumber(1).plus(new BigNumber(5).sqrt()).div(2);\n}, {\n  hasher\n});\n/**\n * Calculate BigNumber pi.\n * @param {function} BigNumber   BigNumber constructor\n * @returns {BigNumber} Returns pi\n */\n\nexport var createBigNumberPi = memoize(function (BigNumber) {\n  return BigNumber.acos(-1);\n}, {\n  hasher\n});\n/**\n * Calculate BigNumber tau, tau = 2 * pi\n * @param {function} BigNumber   BigNumber constructor\n * @returns {BigNumber} Returns tau\n */\n\nexport var createBigNumberTau = memoize(function (BigNumber) {\n  return createBigNumberPi(BigNumber).times(2);\n}, {\n  hasher\n});\n/**\n * Create a hash for a BigNumber constructor function. The created has is\n * the configured precision\n * @param {Array} args         Supposed to contain a single entry with\n *                             a BigNumber constructor\n * @return {number} precision\n * @private\n */\n\nfunction hasher(args) {\n  return args[0].precision;\n}"]},"metadata":{},"sourceType":"module"}