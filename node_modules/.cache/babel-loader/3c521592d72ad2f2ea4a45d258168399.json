{"ast":null,"code":"// function utils\nimport { lruQueue } from './lruQueue.js';\n/**\n * Memoize a given function by caching the computed result.\n * The cache of a memoized function can be cleared by deleting the `cache`\n * property of the function.\n *\n * @param {function} fn                     The function to be memoized.\n *                                          Must be a pure function.\n * @param {Object} [options]\n * @param {function(args: Array): string} [options.hasher]\n *    A custom hash builder. Is JSON.stringify by default.\n * @param {number | undefined} [options.limit]\n *    Maximum number of values that may be cached. Undefined indicates\n *    unlimited (default)\n * @return {function}                       Returns the memoized function\n */\n\nexport function memoize(fn) {\n  var {\n    hasher,\n    limit\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  limit = limit == null ? Number.POSITIVE_INFINITY : limit;\n  hasher = hasher == null ? JSON.stringify : hasher;\n  return function memoize() {\n    if (typeof memoize.cache !== 'object') {\n      memoize.cache = {\n        values: new Map(),\n        lru: lruQueue(limit || Number.POSITIVE_INFINITY)\n      };\n    }\n\n    var args = [];\n\n    for (var i = 0; i < arguments.length; i++) {\n      args[i] = arguments[i];\n    }\n\n    var hash = hasher(args);\n\n    if (memoize.cache.values.has(hash)) {\n      memoize.cache.lru.hit(hash);\n      return memoize.cache.values.get(hash);\n    }\n\n    var newVal = fn.apply(fn, args);\n    memoize.cache.values.set(hash, newVal);\n    memoize.cache.values.delete(memoize.cache.lru.hit(hash));\n    return newVal;\n  };\n}\n/**\n * Memoize a given function by caching all results and the arguments,\n * and comparing against the arguments of previous results before\n * executing again.\n * This is less performant than `memoize` which calculates a hash,\n * which is very fast to compare. Use `memoizeCompare` only when it is\n * not possible to create a unique serializable hash from the function\n * arguments.\n * The isEqual function must compare two sets of arguments\n * and return true when equal (can be a deep equality check for example).\n * @param {function} fn\n * @param {function(a: *, b: *) : boolean} isEqual\n * @returns {function}\n */\n\nexport function memoizeCompare(fn, isEqual) {\n  var memoize = function memoize() {\n    var args = [];\n\n    for (var i = 0; i < arguments.length; i++) {\n      args[i] = arguments[i];\n    }\n\n    for (var c = 0; c < memoize.cache.length; c++) {\n      var cached = memoize.cache[c];\n\n      if (isEqual(args, cached.args)) {\n        // TODO: move this cache entry to the top so recently used entries move up?\n        return cached.res;\n      }\n    }\n\n    var res = fn.apply(fn, args);\n    memoize.cache.unshift({\n      args,\n      res\n    });\n    return res;\n  };\n\n  memoize.cache = [];\n  return memoize;\n}\n/**\n * Find the maximum number of arguments expected by a typed function.\n * @param {function} fn   A typed function\n * @return {number} Returns the maximum number of expected arguments.\n *                  Returns -1 when no signatures where found on the function.\n */\n\nexport function maxArgumentCount(fn) {\n  return Object.keys(fn.signatures || {}).reduce(function (args, signature) {\n    var count = (signature.match(/,/g) || []).length + 1;\n    return Math.max(args, count);\n  }, -1);\n}","map":{"version":3,"sources":["/Users/elimunn/Desktop/plot-recipes/node_modules/mathjs/lib/esm/utils/function.js"],"names":["lruQueue","memoize","fn","hasher","limit","arguments","length","undefined","Number","POSITIVE_INFINITY","JSON","stringify","cache","values","Map","lru","args","i","hash","has","hit","get","newVal","apply","set","delete","memoizeCompare","isEqual","c","cached","res","unshift","maxArgumentCount","Object","keys","signatures","reduce","signature","count","match","Math","max"],"mappings":"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","sourcesContent":["// function utils\nimport { lruQueue } from './lruQueue.js';\n/**\n * Memoize a given function by caching the computed result.\n * The cache of a memoized function can be cleared by deleting the `cache`\n * property of the function.\n *\n * @param {function} fn                     The function to be memoized.\n *                                          Must be a pure function.\n * @param {Object} [options]\n * @param {function(args: Array): string} [options.hasher]\n *    A custom hash builder. Is JSON.stringify by default.\n * @param {number | undefined} [options.limit]\n *    Maximum number of values that may be cached. Undefined indicates\n *    unlimited (default)\n * @return {function}                       Returns the memoized function\n */\n\nexport function memoize(fn) {\n  var {\n    hasher,\n    limit\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  limit = limit == null ? Number.POSITIVE_INFINITY : limit;\n  hasher = hasher == null ? JSON.stringify : hasher;\n  return function memoize() {\n    if (typeof memoize.cache !== 'object') {\n      memoize.cache = {\n        values: new Map(),\n        lru: lruQueue(limit || Number.POSITIVE_INFINITY)\n      };\n    }\n\n    var args = [];\n\n    for (var i = 0; i < arguments.length; i++) {\n      args[i] = arguments[i];\n    }\n\n    var hash = hasher(args);\n\n    if (memoize.cache.values.has(hash)) {\n      memoize.cache.lru.hit(hash);\n      return memoize.cache.values.get(hash);\n    }\n\n    var newVal = fn.apply(fn, args);\n    memoize.cache.values.set(hash, newVal);\n    memoize.cache.values.delete(memoize.cache.lru.hit(hash));\n    return newVal;\n  };\n}\n/**\n * Memoize a given function by caching all results and the arguments,\n * and comparing against the arguments of previous results before\n * executing again.\n * This is less performant than `memoize` which calculates a hash,\n * which is very fast to compare. Use `memoizeCompare` only when it is\n * not possible to create a unique serializable hash from the function\n * arguments.\n * The isEqual function must compare two sets of arguments\n * and return true when equal (can be a deep equality check for example).\n * @param {function} fn\n * @param {function(a: *, b: *) : boolean} isEqual\n * @returns {function}\n */\n\nexport function memoizeCompare(fn, isEqual) {\n  var memoize = function memoize() {\n    var args = [];\n\n    for (var i = 0; i < arguments.length; i++) {\n      args[i] = arguments[i];\n    }\n\n    for (var c = 0; c < memoize.cache.length; c++) {\n      var cached = memoize.cache[c];\n\n      if (isEqual(args, cached.args)) {\n        // TODO: move this cache entry to the top so recently used entries move up?\n        return cached.res;\n      }\n    }\n\n    var res = fn.apply(fn, args);\n    memoize.cache.unshift({\n      args,\n      res\n    });\n    return res;\n  };\n\n  memoize.cache = [];\n  return memoize;\n}\n/**\n * Find the maximum number of arguments expected by a typed function.\n * @param {function} fn   A typed function\n * @return {number} Returns the maximum number of expected arguments.\n *                  Returns -1 when no signatures where found on the function.\n */\n\nexport function maxArgumentCount(fn) {\n  return Object.keys(fn.signatures || {}).reduce(function (args, signature) {\n    var count = (signature.match(/,/g) || []).length + 1;\n    return Math.max(args, count);\n  }, -1);\n}"]},"metadata":{},"sourceType":"module"}