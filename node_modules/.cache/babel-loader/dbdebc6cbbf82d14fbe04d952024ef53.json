{"ast":null,"code":"import { containsCollections } from '../../utils/collection.js';\nimport { flatten } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nimport { improveErrorMessage } from './utils/improveErrorMessage.js';\nvar name = 'median';\nvar dependencies = ['typed', 'add', 'divide', 'compare', 'partitionSelect'];\nexport var createMedian = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    add,\n    divide,\n    compare,\n    partitionSelect\n  } = _ref;\n  /**\n   * Recursively calculate the median of an n-dimensional array\n   * @param {Array} array\n   * @return {Number} median\n   * @private\n   */\n\n  function _median(array) {\n    try {\n      array = flatten(array.valueOf());\n      var num = array.length;\n\n      if (num === 0) {\n        throw new Error('Cannot calculate median of an empty array');\n      }\n\n      if (num % 2 === 0) {\n        // even: return the average of the two middle values\n        var mid = num / 2 - 1;\n        var right = partitionSelect(array, mid + 1); // array now partitioned at mid + 1, take max of left part\n\n        var left = array[mid];\n\n        for (var i = 0; i < mid; ++i) {\n          if (compare(array[i], left) > 0) {\n            left = array[i];\n          }\n        }\n\n        return middle2(left, right);\n      } else {\n        // odd: return the middle value\n        var m = partitionSelect(array, (num - 1) / 2);\n        return middle(m);\n      }\n    } catch (err) {\n      throw improveErrorMessage(err, 'median');\n    }\n  } // helper function to type check the middle value of the array\n\n\n  var middle = typed({\n    'number | BigNumber | Complex | Unit': function numberBigNumberComplexUnit(value) {\n      return value;\n    }\n  }); // helper function to type check the two middle value of the array\n\n  var middle2 = typed({\n    'number | BigNumber | Complex | Unit, number | BigNumber | Complex | Unit': function numberBigNumberComplexUnitNumberBigNumberComplexUnit(left, right) {\n      return divide(add(left, right), 2);\n    }\n  });\n  /**\n   * Compute the median of a matrix or a list with values. The values are\n   * sorted and the middle value is returned. In case of an even number of\n   * values, the average of the two middle values is returned.\n   * Supported types of values are: Number, BigNumber, Unit\n   *\n   * In case of a (multi dimensional) array or matrix, the median of all\n   * elements will be calculated.\n   *\n   * Syntax:\n   *\n   *     math.median(a, b, c, ...)\n   *     math.median(A)\n   *\n   * Examples:\n   *\n   *     math.median(5, 2, 7)        // returns 5\n   *     math.median([3, -1, 5, 7])  // returns 4\n   *\n   * See also:\n   *\n   *     mean, min, max, sum, prod, std, variance, quantileSeq\n   *\n   * @param {... *} args  A single matrix or or multiple scalar values\n   * @return {*} The median\n   */\n\n  return typed(name, {\n    // median([a, b, c, d, ...])\n    'Array | Matrix': _median,\n    // median([a, b, c, d, ...], dim)\n    'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(array, dim) {\n      // TODO: implement median(A, dim)\n      throw new Error('median(A, dim) is not yet supported'); // return reduce(arguments[0], arguments[1], ...)\n    },\n    // median(a, b, c, d, ...)\n    '...': function _(args) {\n      if (containsCollections(args)) {\n        throw new TypeError('Scalar values expected in function median');\n      }\n\n      return _median(args);\n    }\n  });\n});","map":{"version":3,"sources":["/Users/elimunn/Desktop/plot-recipes/node_modules/mathjs/lib/esm/function/statistics/median.js"],"names":["containsCollections","flatten","factory","improveErrorMessage","name","dependencies","createMedian","_ref","typed","add","divide","compare","partitionSelect","_median","array","valueOf","num","length","Error","mid","right","left","i","middle2","m","middle","err","numberBigNumberComplexUnit","value","numberBigNumberComplexUnitNumberBigNumberComplexUnit","ArrayMatrixNumberBigNumber","dim","_","args","TypeError"],"mappings":"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","sourcesContent":["import { containsCollections } from '../../utils/collection.js';\nimport { flatten } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nimport { improveErrorMessage } from './utils/improveErrorMessage.js';\nvar name = 'median';\nvar dependencies = ['typed', 'add', 'divide', 'compare', 'partitionSelect'];\nexport var createMedian = /* #__PURE__ */factory(name, dependencies, (_ref) => {\n  var {\n    typed,\n    add,\n    divide,\n    compare,\n    partitionSelect\n  } = _ref;\n\n  /**\n   * Recursively calculate the median of an n-dimensional array\n   * @param {Array} array\n   * @return {Number} median\n   * @private\n   */\n  function _median(array) {\n    try {\n      array = flatten(array.valueOf());\n      var num = array.length;\n\n      if (num === 0) {\n        throw new Error('Cannot calculate median of an empty array');\n      }\n\n      if (num % 2 === 0) {\n        // even: return the average of the two middle values\n        var mid = num / 2 - 1;\n        var right = partitionSelect(array, mid + 1); // array now partitioned at mid + 1, take max of left part\n\n        var left = array[mid];\n\n        for (var i = 0; i < mid; ++i) {\n          if (compare(array[i], left) > 0) {\n            left = array[i];\n          }\n        }\n\n        return middle2(left, right);\n      } else {\n        // odd: return the middle value\n        var m = partitionSelect(array, (num - 1) / 2);\n        return middle(m);\n      }\n    } catch (err) {\n      throw improveErrorMessage(err, 'median');\n    }\n  } // helper function to type check the middle value of the array\n\n\n  var middle = typed({\n    'number | BigNumber | Complex | Unit': function numberBigNumberComplexUnit(value) {\n      return value;\n    }\n  }); // helper function to type check the two middle value of the array\n\n  var middle2 = typed({\n    'number | BigNumber | Complex | Unit, number | BigNumber | Complex | Unit': function numberBigNumberComplexUnitNumberBigNumberComplexUnit(left, right) {\n      return divide(add(left, right), 2);\n    }\n  });\n  /**\n   * Compute the median of a matrix or a list with values. The values are\n   * sorted and the middle value is returned. In case of an even number of\n   * values, the average of the two middle values is returned.\n   * Supported types of values are: Number, BigNumber, Unit\n   *\n   * In case of a (multi dimensional) array or matrix, the median of all\n   * elements will be calculated.\n   *\n   * Syntax:\n   *\n   *     math.median(a, b, c, ...)\n   *     math.median(A)\n   *\n   * Examples:\n   *\n   *     math.median(5, 2, 7)        // returns 5\n   *     math.median([3, -1, 5, 7])  // returns 4\n   *\n   * See also:\n   *\n   *     mean, min, max, sum, prod, std, variance, quantileSeq\n   *\n   * @param {... *} args  A single matrix or or multiple scalar values\n   * @return {*} The median\n   */\n\n  return typed(name, {\n    // median([a, b, c, d, ...])\n    'Array | Matrix': _median,\n    // median([a, b, c, d, ...], dim)\n    'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(array, dim) {\n      // TODO: implement median(A, dim)\n      throw new Error('median(A, dim) is not yet supported'); // return reduce(arguments[0], arguments[1], ...)\n    },\n    // median(a, b, c, d, ...)\n    '...': function _(args) {\n      if (containsCollections(args)) {\n        throw new TypeError('Scalar values expected in function median');\n      }\n\n      return _median(args);\n    }\n  });\n});"]},"metadata":{},"sourceType":"module"}