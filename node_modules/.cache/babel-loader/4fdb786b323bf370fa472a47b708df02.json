{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { createAlgorithm13 } from '../../type/matrix/utils/algorithm13.js';\nimport { createAlgorithm14 } from '../../type/matrix/utils/algorithm14.js';\nvar name = 'to';\nvar dependencies = ['typed', 'matrix'];\nexport var createTo = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix\n  } = _ref;\n  var algorithm13 = createAlgorithm13({\n    typed\n  });\n  var algorithm14 = createAlgorithm14({\n    typed\n  });\n  /**\n   * Change the unit of a value.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.to(x, unit)\n   *\n   * Examples:\n   *\n   *    math.to(math.unit('2 inch'), 'cm')                   // returns Unit 5.08 cm\n   *    math.to(math.unit('2 inch'), math.unit(null, 'cm'))  // returns Unit 5.08 cm\n   *    math.to(math.unit(16, 'bytes'), 'bits')              // returns Unit 128 bits\n   *\n   * See also:\n   *\n   *    unit\n   *\n   * @param {Unit | Array | Matrix} x     The unit to be converted.\n   * @param {Unit | Array | Matrix} unit  New unit. Can be a string like \"cm\"\n   *                                      or a unit without value.\n   * @return {Unit | Array | Matrix} value with changed, fixed unit.\n   */\n\n  return typed(name, {\n    'Unit, Unit | string': function UnitUnitString(x, unit) {\n      return x.to(unit);\n    },\n    'Matrix, Matrix': function MatrixMatrix(x, y) {\n      // SparseMatrix does not support Units\n      return algorithm13(x, y, this);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return this(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return this(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return this(x, matrix(y));\n    },\n    'Matrix, any': function MatrixAny(x, y) {\n      // SparseMatrix does not support Units\n      return algorithm14(x, y, this, false);\n    },\n    'any, Matrix': function anyMatrix(x, y) {\n      // SparseMatrix does not support Units\n      return algorithm14(y, x, this, true);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, this, false).valueOf();\n    },\n    'any, Array': function anyArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, this, true).valueOf();\n    }\n  });\n});","map":{"version":3,"sources":["/Users/elimunn/Desktop/plot-recipes/node_modules/mathjs/lib/esm/function/unit/to.js"],"names":["factory","createAlgorithm13","createAlgorithm14","name","dependencies","createTo","_ref","typed","matrix","algorithm13","algorithm14","UnitUnitString","x","unit","to","MatrixMatrix","y","ArrayArray","valueOf","ArrayMatrix","MatrixArray","MatrixAny","anyMatrix","ArrayAny","anyArray"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,iBAAT,QAAkC,wCAAlC;AACA,SAASC,iBAAT,QAAkC,wCAAlC;AACA,IAAIC,IAAI,GAAG,IAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,QAAV,CAAnB;AACA,OAAO,IAAIC,QAAQ,GAAG,eAAeL,OAAO,CAACG,IAAD,EAAOC,YAAP,EAAsBE,IAAD,IAAU;AACzE,MAAI;AACFC,IAAAA,KADE;AAEFC,IAAAA;AAFE,MAGAF,IAHJ;AAIA,MAAIG,WAAW,GAAGR,iBAAiB,CAAC;AAClCM,IAAAA;AADkC,GAAD,CAAnC;AAGA,MAAIG,WAAW,GAAGR,iBAAiB,CAAC;AAClCK,IAAAA;AADkC,GAAD,CAAnC;AAGA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEE,SAAOA,KAAK,CAACJ,IAAD,EAAO;AACjB,2BAAuB,SAASQ,cAAT,CAAwBC,CAAxB,EAA2BC,IAA3B,EAAiC;AACtD,aAAOD,CAAC,CAACE,EAAF,CAAKD,IAAL,CAAP;AACD,KAHgB;AAIjB,sBAAkB,SAASE,YAAT,CAAsBH,CAAtB,EAAyBI,CAAzB,EAA4B;AAC5C;AACA,aAAOP,WAAW,CAACG,CAAD,EAAII,CAAJ,EAAO,IAAP,CAAlB;AACD,KAPgB;AAQjB,oBAAgB,SAASC,UAAT,CAAoBL,CAApB,EAAuBI,CAAvB,EAA0B;AACxC;AACA,aAAO,KAAKR,MAAM,CAACI,CAAD,CAAX,EAAgBJ,MAAM,CAACQ,CAAD,CAAtB,EAA2BE,OAA3B,EAAP;AACD,KAXgB;AAYjB,qBAAiB,SAASC,WAAT,CAAqBP,CAArB,EAAwBI,CAAxB,EAA2B;AAC1C;AACA,aAAO,KAAKR,MAAM,CAACI,CAAD,CAAX,EAAgBI,CAAhB,CAAP;AACD,KAfgB;AAgBjB,qBAAiB,SAASI,WAAT,CAAqBR,CAArB,EAAwBI,CAAxB,EAA2B;AAC1C;AACA,aAAO,KAAKJ,CAAL,EAAQJ,MAAM,CAACQ,CAAD,CAAd,CAAP;AACD,KAnBgB;AAoBjB,mBAAe,SAASK,SAAT,CAAmBT,CAAnB,EAAsBI,CAAtB,EAAyB;AACtC;AACA,aAAON,WAAW,CAACE,CAAD,EAAII,CAAJ,EAAO,IAAP,EAAa,KAAb,CAAlB;AACD,KAvBgB;AAwBjB,mBAAe,SAASM,SAAT,CAAmBV,CAAnB,EAAsBI,CAAtB,EAAyB;AACtC;AACA,aAAON,WAAW,CAACM,CAAD,EAAIJ,CAAJ,EAAO,IAAP,EAAa,IAAb,CAAlB;AACD,KA3BgB;AA4BjB,kBAAc,SAASW,QAAT,CAAkBX,CAAlB,EAAqBI,CAArB,EAAwB;AACpC;AACA,aAAON,WAAW,CAACF,MAAM,CAACI,CAAD,CAAP,EAAYI,CAAZ,EAAe,IAAf,EAAqB,KAArB,CAAX,CAAuCE,OAAvC,EAAP;AACD,KA/BgB;AAgCjB,kBAAc,SAASM,QAAT,CAAkBZ,CAAlB,EAAqBI,CAArB,EAAwB;AACpC;AACA,aAAON,WAAW,CAACF,MAAM,CAACQ,CAAD,CAAP,EAAYJ,CAAZ,EAAe,IAAf,EAAqB,IAArB,CAAX,CAAsCM,OAAtC,EAAP;AACD;AAnCgB,GAAP,CAAZ;AAqCD,CAzE2C,CAArC","sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { createAlgorithm13 } from '../../type/matrix/utils/algorithm13.js';\nimport { createAlgorithm14 } from '../../type/matrix/utils/algorithm14.js';\nvar name = 'to';\nvar dependencies = ['typed', 'matrix'];\nexport var createTo = /* #__PURE__ */factory(name, dependencies, (_ref) => {\n  var {\n    typed,\n    matrix\n  } = _ref;\n  var algorithm13 = createAlgorithm13({\n    typed\n  });\n  var algorithm14 = createAlgorithm14({\n    typed\n  });\n  /**\n   * Change the unit of a value.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.to(x, unit)\n   *\n   * Examples:\n   *\n   *    math.to(math.unit('2 inch'), 'cm')                   // returns Unit 5.08 cm\n   *    math.to(math.unit('2 inch'), math.unit(null, 'cm'))  // returns Unit 5.08 cm\n   *    math.to(math.unit(16, 'bytes'), 'bits')              // returns Unit 128 bits\n   *\n   * See also:\n   *\n   *    unit\n   *\n   * @param {Unit | Array | Matrix} x     The unit to be converted.\n   * @param {Unit | Array | Matrix} unit  New unit. Can be a string like \"cm\"\n   *                                      or a unit without value.\n   * @return {Unit | Array | Matrix} value with changed, fixed unit.\n   */\n\n  return typed(name, {\n    'Unit, Unit | string': function UnitUnitString(x, unit) {\n      return x.to(unit);\n    },\n    'Matrix, Matrix': function MatrixMatrix(x, y) {\n      // SparseMatrix does not support Units\n      return algorithm13(x, y, this);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return this(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return this(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return this(x, matrix(y));\n    },\n    'Matrix, any': function MatrixAny(x, y) {\n      // SparseMatrix does not support Units\n      return algorithm14(x, y, this, false);\n    },\n    'any, Matrix': function anyMatrix(x, y) {\n      // SparseMatrix does not support Units\n      return algorithm14(y, x, this, true);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, this, false).valueOf();\n    },\n    'any, Array': function anyArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, this, true).valueOf();\n    }\n  });\n});"]},"metadata":{},"sourceType":"module"}