{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { arraySize } from '../../utils/array.js';\nvar name = 'rotate';\nvar dependencies = ['typed', 'multiply', 'rotationMatrix'];\nexport var createRotate = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    multiply,\n    rotationMatrix\n  } = _ref;\n  /**\n     * Rotate a vector of size 1x2 counter-clockwise by a given angle\n     * Rotate a vector of size 1x3 counter-clockwise by a given angle around the given axis\n     *\n     * Syntax:\n     *\n     *    math.rotate(w, theta)\n     *    math.rotate(w, theta, v)\n     *\n     * Examples:\n     *\n     *    math.rotate([11, 12], math.pi / 2)                           // returns matrix([-12, 11])\n     *    math.rotate(matrix([11, 12]), math.pi / 2)                   // returns matrix([-12, 11])\n     *\n     *    math.rotate([1, 0, 0], unit('90deg'), [0, 0, 1])             // returns matrix([0, 1, 0])\n     *    math.rotate(matrix([1, 0, 0]), unit('90deg'), [0, 0, 1])     // returns matrix([0, 1, 0])\n     *\n     *    math.rotate([1, 0], math.complex(1 + i))                     // returns matrix([cos(1 + i) - sin(1 + i), sin(1 + i) + cos(1 + i)])\n     *\n     * See also:\n     *\n     *    matrix, rotationMatrix\n     *\n     * @param {Array | Matrix} w                             Vector to rotate\n     * @param {number | BigNumber | Complex | Unit} theta    Rotation angle\n     * @param {Array | Matrix} [v]                           Rotation axis\n     * @return {Array | Matrix}                              Multiplication of the rotation matrix and w\n     */\n\n  return typed(name, {\n    'Array , number | BigNumber | Complex | Unit': function ArrayNumberBigNumberComplexUnit(w, theta) {\n      _validateSize(w, 2);\n\n      var matrixRes = multiply(rotationMatrix(theta), w);\n      return matrixRes.toArray();\n    },\n    'Matrix , number | BigNumber | Complex | Unit': function MatrixNumberBigNumberComplexUnit(w, theta) {\n      _validateSize(w, 2);\n\n      return multiply(rotationMatrix(theta), w);\n    },\n    'Array, number | BigNumber | Complex | Unit, Array | Matrix': function ArrayNumberBigNumberComplexUnitArrayMatrix(w, theta, v) {\n      _validateSize(w, 3);\n\n      var matrixRes = multiply(rotationMatrix(theta, v), w);\n      return matrixRes;\n    },\n    'Matrix, number | BigNumber | Complex | Unit, Array | Matrix': function MatrixNumberBigNumberComplexUnitArrayMatrix(w, theta, v) {\n      _validateSize(w, 3);\n\n      return multiply(rotationMatrix(theta, v), w);\n    }\n  });\n\n  function _validateSize(v, expectedSize) {\n    var actualSize = Array.isArray(v) ? arraySize(v) : v.size();\n\n    if (actualSize.length > 2) {\n      throw new RangeError(\"Vector must be of dimensions 1x\".concat(expectedSize));\n    }\n\n    if (actualSize.length === 2 && actualSize[1] !== 1) {\n      throw new RangeError(\"Vector must be of dimensions 1x\".concat(expectedSize));\n    }\n\n    if (actualSize[0] !== expectedSize) {\n      throw new RangeError(\"Vector must be of dimensions 1x\".concat(expectedSize));\n    }\n  }\n});","map":{"version":3,"sources":["/Users/elimunn/Desktop/plot-recipes/node_modules/mathjs/lib/esm/function/matrix/rotate.js"],"names":["factory","arraySize","name","dependencies","createRotate","_ref","typed","multiply","rotationMatrix","ArrayNumberBigNumberComplexUnit","w","theta","_validateSize","matrixRes","toArray","MatrixNumberBigNumberComplexUnit","ArrayNumberBigNumberComplexUnitArrayMatrix","v","MatrixNumberBigNumberComplexUnitArrayMatrix","expectedSize","actualSize","Array","isArray","size","length","RangeError","concat"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,SAAT,QAA0B,sBAA1B;AACA,IAAIC,IAAI,GAAG,QAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,UAAV,EAAsB,gBAAtB,CAAnB;AACA,OAAO,IAAIC,YAAY,GAAG,eAAeJ,OAAO,CAACE,IAAD,EAAOC,YAAP,EAAsBE,IAAD,IAAU;AAC7E,MAAI;AACFC,IAAAA,KADE;AAEFC,IAAAA,QAFE;AAGFC,IAAAA;AAHE,MAIAH,IAJJ;AAMA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAOC,KAAK,CAACJ,IAAD,EAAO;AACjB,mDAA+C,SAASO,+BAAT,CAAyCC,CAAzC,EAA4CC,KAA5C,EAAmD;AAChGC,MAAAA,aAAa,CAACF,CAAD,EAAI,CAAJ,CAAb;;AAEA,UAAIG,SAAS,GAAGN,QAAQ,CAACC,cAAc,CAACG,KAAD,CAAf,EAAwBD,CAAxB,CAAxB;AACA,aAAOG,SAAS,CAACC,OAAV,EAAP;AACD,KANgB;AAOjB,oDAAgD,SAASC,gCAAT,CAA0CL,CAA1C,EAA6CC,KAA7C,EAAoD;AAClGC,MAAAA,aAAa,CAACF,CAAD,EAAI,CAAJ,CAAb;;AAEA,aAAOH,QAAQ,CAACC,cAAc,CAACG,KAAD,CAAf,EAAwBD,CAAxB,CAAf;AACD,KAXgB;AAYjB,kEAA8D,SAASM,0CAAT,CAAoDN,CAApD,EAAuDC,KAAvD,EAA8DM,CAA9D,EAAiE;AAC7HL,MAAAA,aAAa,CAACF,CAAD,EAAI,CAAJ,CAAb;;AAEA,UAAIG,SAAS,GAAGN,QAAQ,CAACC,cAAc,CAACG,KAAD,EAAQM,CAAR,CAAf,EAA2BP,CAA3B,CAAxB;AACA,aAAOG,SAAP;AACD,KAjBgB;AAkBjB,mEAA+D,SAASK,2CAAT,CAAqDR,CAArD,EAAwDC,KAAxD,EAA+DM,CAA/D,EAAkE;AAC/HL,MAAAA,aAAa,CAACF,CAAD,EAAI,CAAJ,CAAb;;AAEA,aAAOH,QAAQ,CAACC,cAAc,CAACG,KAAD,EAAQM,CAAR,CAAf,EAA2BP,CAA3B,CAAf;AACD;AAtBgB,GAAP,CAAZ;;AAyBA,WAASE,aAAT,CAAuBK,CAAvB,EAA0BE,YAA1B,EAAwC;AACtC,QAAIC,UAAU,GAAGC,KAAK,CAACC,OAAN,CAAcL,CAAd,IAAmBhB,SAAS,CAACgB,CAAD,CAA5B,GAAkCA,CAAC,CAACM,IAAF,EAAnD;;AAEA,QAAIH,UAAU,CAACI,MAAX,GAAoB,CAAxB,EAA2B;AACzB,YAAM,IAAIC,UAAJ,CAAe,kCAAkCC,MAAlC,CAAyCP,YAAzC,CAAf,CAAN;AACD;;AAED,QAAIC,UAAU,CAACI,MAAX,KAAsB,CAAtB,IAA2BJ,UAAU,CAAC,CAAD,CAAV,KAAkB,CAAjD,EAAoD;AAClD,YAAM,IAAIK,UAAJ,CAAe,kCAAkCC,MAAlC,CAAyCP,YAAzC,CAAf,CAAN;AACD;;AAED,QAAIC,UAAU,CAAC,CAAD,CAAV,KAAkBD,YAAtB,EAAoC;AAClC,YAAM,IAAIM,UAAJ,CAAe,kCAAkCC,MAAlC,CAAyCP,YAAzC,CAAf,CAAN;AACD;AACF;AACF,CA3E+C,CAAzC","sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { arraySize } from '../../utils/array.js';\nvar name = 'rotate';\nvar dependencies = ['typed', 'multiply', 'rotationMatrix'];\nexport var createRotate = /* #__PURE__ */factory(name, dependencies, (_ref) => {\n  var {\n    typed,\n    multiply,\n    rotationMatrix\n  } = _ref;\n\n  /**\n     * Rotate a vector of size 1x2 counter-clockwise by a given angle\n     * Rotate a vector of size 1x3 counter-clockwise by a given angle around the given axis\n     *\n     * Syntax:\n     *\n     *    math.rotate(w, theta)\n     *    math.rotate(w, theta, v)\n     *\n     * Examples:\n     *\n     *    math.rotate([11, 12], math.pi / 2)                           // returns matrix([-12, 11])\n     *    math.rotate(matrix([11, 12]), math.pi / 2)                   // returns matrix([-12, 11])\n     *\n     *    math.rotate([1, 0, 0], unit('90deg'), [0, 0, 1])             // returns matrix([0, 1, 0])\n     *    math.rotate(matrix([1, 0, 0]), unit('90deg'), [0, 0, 1])     // returns matrix([0, 1, 0])\n     *\n     *    math.rotate([1, 0], math.complex(1 + i))                     // returns matrix([cos(1 + i) - sin(1 + i), sin(1 + i) + cos(1 + i)])\n     *\n     * See also:\n     *\n     *    matrix, rotationMatrix\n     *\n     * @param {Array | Matrix} w                             Vector to rotate\n     * @param {number | BigNumber | Complex | Unit} theta    Rotation angle\n     * @param {Array | Matrix} [v]                           Rotation axis\n     * @return {Array | Matrix}                              Multiplication of the rotation matrix and w\n     */\n  return typed(name, {\n    'Array , number | BigNumber | Complex | Unit': function ArrayNumberBigNumberComplexUnit(w, theta) {\n      _validateSize(w, 2);\n\n      var matrixRes = multiply(rotationMatrix(theta), w);\n      return matrixRes.toArray();\n    },\n    'Matrix , number | BigNumber | Complex | Unit': function MatrixNumberBigNumberComplexUnit(w, theta) {\n      _validateSize(w, 2);\n\n      return multiply(rotationMatrix(theta), w);\n    },\n    'Array, number | BigNumber | Complex | Unit, Array | Matrix': function ArrayNumberBigNumberComplexUnitArrayMatrix(w, theta, v) {\n      _validateSize(w, 3);\n\n      var matrixRes = multiply(rotationMatrix(theta, v), w);\n      return matrixRes;\n    },\n    'Matrix, number | BigNumber | Complex | Unit, Array | Matrix': function MatrixNumberBigNumberComplexUnitArrayMatrix(w, theta, v) {\n      _validateSize(w, 3);\n\n      return multiply(rotationMatrix(theta, v), w);\n    }\n  });\n\n  function _validateSize(v, expectedSize) {\n    var actualSize = Array.isArray(v) ? arraySize(v) : v.size();\n\n    if (actualSize.length > 2) {\n      throw new RangeError(\"Vector must be of dimensions 1x\".concat(expectedSize));\n    }\n\n    if (actualSize.length === 2 && actualSize[1] !== 1) {\n      throw new RangeError(\"Vector must be of dimensions 1x\".concat(expectedSize));\n    }\n\n    if (actualSize[0] !== expectedSize) {\n      throw new RangeError(\"Vector must be of dimensions 1x\".concat(expectedSize));\n    }\n  }\n});"]},"metadata":{},"sourceType":"module"}