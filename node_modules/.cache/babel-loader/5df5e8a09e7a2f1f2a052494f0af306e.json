{"ast":null,"code":"import { errorTransform } from './utils/errorTransform.js';\nimport { factory } from '../../utils/factory.js';\nimport { createColumn } from '../../function/matrix/column.js';\nimport { isNumber } from '../../utils/is.js';\nvar name = 'column';\nvar dependencies = ['typed', 'Index', 'matrix', 'range'];\n/**\n * Attach a transform function to matrix.column\n * Adds a property transform containing the transform function.\n *\n * This transform changed the last `index` parameter of function column\n * from zero-based to one-based\n */\n\nexport var createColumnTransform = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    Index,\n    matrix,\n    range\n  } = _ref;\n  var column = createColumn({\n    typed,\n    Index,\n    matrix,\n    range\n  }); // @see: comment of column itself\n\n  return typed('column', {\n    '...any': function any(args) {\n      // change last argument from zero-based to one-based\n      var lastIndex = args.length - 1;\n      var last = args[lastIndex];\n\n      if (isNumber(last)) {\n        args[lastIndex] = last - 1;\n      }\n\n      try {\n        return column.apply(null, args);\n      } catch (err) {\n        throw errorTransform(err);\n      }\n    }\n  });\n}, {\n  isTransformFunction: true\n});","map":{"version":3,"sources":["/Users/elimunn/Desktop/plot-recipes/node_modules/mathjs/lib/esm/expression/transform/column.transform.js"],"names":["errorTransform","factory","createColumn","isNumber","name","dependencies","createColumnTransform","_ref","typed","Index","matrix","range","column","any","args","lastIndex","length","last","apply","err","isTransformFunction"],"mappings":"AAAA,SAASA,cAAT,QAA+B,2BAA/B;AACA,SAASC,OAAT,QAAwB,wBAAxB;AACA,SAASC,YAAT,QAA6B,iCAA7B;AACA,SAASC,QAAT,QAAyB,mBAAzB;AACA,IAAIC,IAAI,GAAG,QAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,OAAV,EAAmB,QAAnB,EAA6B,OAA7B,CAAnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,IAAIC,qBAAqB,GAAG,eAAeL,OAAO,CAACG,IAAD,EAAOC,YAAP,EAAsBE,IAAD,IAAU;AACtF,MAAI;AACFC,IAAAA,KADE;AAEFC,IAAAA,KAFE;AAGFC,IAAAA,MAHE;AAIFC,IAAAA;AAJE,MAKAJ,IALJ;AAMA,MAAIK,MAAM,GAAGV,YAAY,CAAC;AACxBM,IAAAA,KADwB;AAExBC,IAAAA,KAFwB;AAGxBC,IAAAA,MAHwB;AAIxBC,IAAAA;AAJwB,GAAD,CAAzB,CAPsF,CAYlF;;AAEJ,SAAOH,KAAK,CAAC,QAAD,EAAW;AACrB,cAAU,SAASK,GAAT,CAAaC,IAAb,EAAmB;AAC3B;AACA,UAAIC,SAAS,GAAGD,IAAI,CAACE,MAAL,GAAc,CAA9B;AACA,UAAIC,IAAI,GAAGH,IAAI,CAACC,SAAD,CAAf;;AAEA,UAAIZ,QAAQ,CAACc,IAAD,CAAZ,EAAoB;AAClBH,QAAAA,IAAI,CAACC,SAAD,CAAJ,GAAkBE,IAAI,GAAG,CAAzB;AACD;;AAED,UAAI;AACF,eAAOL,MAAM,CAACM,KAAP,CAAa,IAAb,EAAmBJ,IAAnB,CAAP;AACD,OAFD,CAEE,OAAOK,GAAP,EAAY;AACZ,cAAMnB,cAAc,CAACmB,GAAD,CAApB;AACD;AACF;AAfoB,GAAX,CAAZ;AAiBD,CA/BwD,EA+BtD;AACDC,EAAAA,mBAAmB,EAAE;AADpB,CA/BsD,CAAlD","sourcesContent":["import { errorTransform } from './utils/errorTransform.js';\nimport { factory } from '../../utils/factory.js';\nimport { createColumn } from '../../function/matrix/column.js';\nimport { isNumber } from '../../utils/is.js';\nvar name = 'column';\nvar dependencies = ['typed', 'Index', 'matrix', 'range'];\n/**\n * Attach a transform function to matrix.column\n * Adds a property transform containing the transform function.\n *\n * This transform changed the last `index` parameter of function column\n * from zero-based to one-based\n */\n\nexport var createColumnTransform = /* #__PURE__ */factory(name, dependencies, (_ref) => {\n  var {\n    typed,\n    Index,\n    matrix,\n    range\n  } = _ref;\n  var column = createColumn({\n    typed,\n    Index,\n    matrix,\n    range\n  }); // @see: comment of column itself\n\n  return typed('column', {\n    '...any': function any(args) {\n      // change last argument from zero-based to one-based\n      var lastIndex = args.length - 1;\n      var last = args[lastIndex];\n\n      if (isNumber(last)) {\n        args[lastIndex] = last - 1;\n      }\n\n      try {\n        return column.apply(null, args);\n      } catch (err) {\n        throw errorTransform(err);\n      }\n    }\n  });\n}, {\n  isTransformFunction: true\n});"]},"metadata":{},"sourceType":"module"}