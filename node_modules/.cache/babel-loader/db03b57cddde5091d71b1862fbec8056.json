{"ast":null,"code":"import { isMatrix } from '../../utils/is.js';\nimport { format } from '../../utils/string.js';\nimport { arraySize } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'sqrtm';\nvar dependencies = ['typed', 'abs', 'add', 'multiply', 'sqrt', 'subtract', 'inv', 'size', 'max', 'identity'];\nexport var createSqrtm = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    abs,\n    add,\n    multiply,\n    sqrt,\n    subtract,\n    inv,\n    size,\n    max,\n    identity\n  } = _ref;\n  var _maxIterations = 1e3;\n  var _tolerance = 1e-6;\n  /**\n   * Calculate the principal square root matrix using the Denman–Beavers iterative method\n   *\n   * https://en.wikipedia.org/wiki/Square_root_of_a_matrix#By_Denman–Beavers_iteration\n   *\n   * @param  {Array | Matrix} A   The square matrix `A`\n   * @return {Array | Matrix}     The principal square root of matrix `A`\n   * @private\n   */\n\n  function _denmanBeavers(A) {\n    var error;\n    var iterations = 0;\n    var Y = A;\n    var Z = identity(size(A));\n\n    do {\n      var Yk = Y;\n      Y = multiply(0.5, add(Yk, inv(Z)));\n      Z = multiply(0.5, add(Z, inv(Yk)));\n      error = max(abs(subtract(Y, Yk)));\n\n      if (error > _tolerance && ++iterations > _maxIterations) {\n        throw new Error('computing square root of matrix: iterative method could not converge');\n      }\n    } while (error > _tolerance);\n\n    return Y;\n  }\n  /**\n   * Calculate the principal square root of a square matrix.\n   * The principal square root matrix `X` of another matrix `A` is such that `X * X = A`.\n   *\n   * https://en.wikipedia.org/wiki/Square_root_of_a_matrix\n   *\n   * Syntax:\n   *\n   *     X = math.sqrtm(A)\n   *\n   * Examples:\n   *\n   *     math.sqrtm([[1, 2], [3, 4]]) // returns [[-2, 1], [1.5, -0.5]]\n   *\n   * See also:\n   *\n   *     sqrt, pow\n   *\n   * @param  {Array | Matrix} A   The square matrix `A`\n   * @return {Array | Matrix}     The principal square root of matrix `A`\n   */\n\n\n  return typed(name, {\n    'Array | Matrix': function ArrayMatrix(A) {\n      var size = isMatrix(A) ? A.size() : arraySize(A);\n\n      switch (size.length) {\n        case 1:\n          // Single element Array | Matrix\n          if (size[0] === 1) {\n            return sqrt(A);\n          } else {\n            throw new RangeError('Matrix must be square ' + '(size: ' + format(size) + ')');\n          }\n\n        case 2:\n          {\n            // Two-dimensional Array | Matrix\n            var rows = size[0];\n            var cols = size[1];\n\n            if (rows === cols) {\n              return _denmanBeavers(A);\n            } else {\n              throw new RangeError('Matrix must be square ' + '(size: ' + format(size) + ')');\n            }\n          }\n\n        default:\n          // Multi dimensional array\n          throw new RangeError('Matrix must be at most two dimensional ' + '(size: ' + format(size) + ')');\n      }\n    }\n  });\n});","map":{"version":3,"sources":["/Users/elimunn/Desktop/plot-recipes/node_modules/mathjs/lib/esm/function/matrix/sqrtm.js"],"names":["isMatrix","format","arraySize","factory","name","dependencies","createSqrtm","_ref","typed","abs","add","multiply","sqrt","subtract","inv","size","max","identity","_maxIterations","_tolerance","_denmanBeavers","A","error","iterations","Y","Z","Yk","Error","ArrayMatrix","length","RangeError","rows","cols"],"mappings":"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","sourcesContent":["import { isMatrix } from '../../utils/is.js';\nimport { format } from '../../utils/string.js';\nimport { arraySize } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'sqrtm';\nvar dependencies = ['typed', 'abs', 'add', 'multiply', 'sqrt', 'subtract', 'inv', 'size', 'max', 'identity'];\nexport var createSqrtm = /* #__PURE__ */factory(name, dependencies, (_ref) => {\n  var {\n    typed,\n    abs,\n    add,\n    multiply,\n    sqrt,\n    subtract,\n    inv,\n    size,\n    max,\n    identity\n  } = _ref;\n  var _maxIterations = 1e3;\n  var _tolerance = 1e-6;\n  /**\n   * Calculate the principal square root matrix using the Denman–Beavers iterative method\n   *\n   * https://en.wikipedia.org/wiki/Square_root_of_a_matrix#By_Denman–Beavers_iteration\n   *\n   * @param  {Array | Matrix} A   The square matrix `A`\n   * @return {Array | Matrix}     The principal square root of matrix `A`\n   * @private\n   */\n\n  function _denmanBeavers(A) {\n    var error;\n    var iterations = 0;\n    var Y = A;\n    var Z = identity(size(A));\n\n    do {\n      var Yk = Y;\n      Y = multiply(0.5, add(Yk, inv(Z)));\n      Z = multiply(0.5, add(Z, inv(Yk)));\n      error = max(abs(subtract(Y, Yk)));\n\n      if (error > _tolerance && ++iterations > _maxIterations) {\n        throw new Error('computing square root of matrix: iterative method could not converge');\n      }\n    } while (error > _tolerance);\n\n    return Y;\n  }\n  /**\n   * Calculate the principal square root of a square matrix.\n   * The principal square root matrix `X` of another matrix `A` is such that `X * X = A`.\n   *\n   * https://en.wikipedia.org/wiki/Square_root_of_a_matrix\n   *\n   * Syntax:\n   *\n   *     X = math.sqrtm(A)\n   *\n   * Examples:\n   *\n   *     math.sqrtm([[1, 2], [3, 4]]) // returns [[-2, 1], [1.5, -0.5]]\n   *\n   * See also:\n   *\n   *     sqrt, pow\n   *\n   * @param  {Array | Matrix} A   The square matrix `A`\n   * @return {Array | Matrix}     The principal square root of matrix `A`\n   */\n\n\n  return typed(name, {\n    'Array | Matrix': function ArrayMatrix(A) {\n      var size = isMatrix(A) ? A.size() : arraySize(A);\n\n      switch (size.length) {\n        case 1:\n          // Single element Array | Matrix\n          if (size[0] === 1) {\n            return sqrt(A);\n          } else {\n            throw new RangeError('Matrix must be square ' + '(size: ' + format(size) + ')');\n          }\n\n        case 2:\n          {\n            // Two-dimensional Array | Matrix\n            var rows = size[0];\n            var cols = size[1];\n\n            if (rows === cols) {\n              return _denmanBeavers(A);\n            } else {\n              throw new RangeError('Matrix must be square ' + '(size: ' + format(size) + ')');\n            }\n          }\n\n        default:\n          // Multi dimensional array\n          throw new RangeError('Matrix must be at most two dimensional ' + '(size: ' + format(size) + ')');\n      }\n    }\n  });\n});"]},"metadata":{},"sourceType":"module"}