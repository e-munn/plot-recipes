{"ast":null,"code":"import { factory } from '../utils/factory.js';\nvar name = 'replacer';\nvar dependencies = [];\nexport var createReplacer = /* #__PURE__ */factory(name, dependencies, () => {\n  /**\n   * Stringify data types into their JSON representation.\n   * Most data types can be serialized using their `.toJSON` method,\n   * but not all, for example the number `Infinity`. For these cases you have\n   * to use the replacer. Example usage:\n   *\n   *     JSON.stringify([2, Infinity], math.replacer)\n   *\n   * @param {string} key\n   * @param {*} value\n   * @returns {*} Returns the replaced object\n   */\n  return function replacer(key, value) {\n    // the numeric values Infinitiy, -Infinity, and NaN cannot be serialized to JSON\n    if (typeof value === 'number' && (!isFinite(value) || isNaN(value))) {\n      return {\n        mathjs: 'number',\n        value: String(value)\n      };\n    }\n\n    return value;\n  };\n});","map":{"version":3,"sources":["/Users/elimunn/Desktop/plot-recipes/node_modules/mathjs/lib/esm/json/replacer.js"],"names":["factory","name","dependencies","createReplacer","replacer","key","value","isFinite","isNaN","mathjs","String"],"mappings":"AAAA,SAASA,OAAT,QAAwB,qBAAxB;AACA,IAAIC,IAAI,GAAG,UAAX;AACA,IAAIC,YAAY,GAAG,EAAnB;AACA,OAAO,IAAIC,cAAc,GAAG,eAAeH,OAAO,CAACC,IAAD,EAAOC,YAAP,EAAqB,MAAM;AAC3E;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE,SAAO,SAASE,QAAT,CAAkBC,GAAlB,EAAuBC,KAAvB,EAA8B;AACnC;AACA,QAAI,OAAOA,KAAP,KAAiB,QAAjB,KAA8B,CAACC,QAAQ,CAACD,KAAD,CAAT,IAAoBE,KAAK,CAACF,KAAD,CAAvD,CAAJ,EAAqE;AACnE,aAAO;AACLG,QAAAA,MAAM,EAAE,QADH;AAELH,QAAAA,KAAK,EAAEI,MAAM,CAACJ,KAAD;AAFR,OAAP;AAID;;AAED,WAAOA,KAAP;AACD,GAVD;AAWD,CAxBiD,CAA3C","sourcesContent":["import { factory } from '../utils/factory.js';\nvar name = 'replacer';\nvar dependencies = [];\nexport var createReplacer = /* #__PURE__ */factory(name, dependencies, () => {\n  /**\n   * Stringify data types into their JSON representation.\n   * Most data types can be serialized using their `.toJSON` method,\n   * but not all, for example the number `Infinity`. For these cases you have\n   * to use the replacer. Example usage:\n   *\n   *     JSON.stringify([2, Infinity], math.replacer)\n   *\n   * @param {string} key\n   * @param {*} value\n   * @returns {*} Returns the replaced object\n   */\n  return function replacer(key, value) {\n    // the numeric values Infinitiy, -Infinity, and NaN cannot be serialized to JSON\n    if (typeof value === 'number' && (!isFinite(value) || isNaN(value))) {\n      return {\n        mathjs: 'number',\n        value: String(value)\n      };\n    }\n\n    return value;\n  };\n});"]},"metadata":{},"sourceType":"module"}