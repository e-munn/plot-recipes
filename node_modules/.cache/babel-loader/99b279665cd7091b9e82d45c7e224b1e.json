{"ast":null,"code":"import { isNode } from '../../utils/is.js';\nimport { keywords } from '../keywords.js';\nimport { deepStrictEqual, hasOwnProperty } from '../../utils/object.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'Node';\nvar dependencies = ['mathWithTransform'];\nexport var createNode = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    mathWithTransform\n  } = _ref;\n  /**\n   * Node\n   */\n\n  function Node() {\n    if (!(this instanceof Node)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n  }\n  /**\n   * Evaluate the node\n   * @param {Object} [scope]  Scope to read/write variables\n   * @return {*}              Returns the result\n   */\n\n\n  Node.prototype.evaluate = function (scope) {\n    return this.compile().evaluate(scope);\n  };\n\n  Node.prototype.type = 'Node';\n  Node.prototype.isNode = true;\n  Node.prototype.comment = '';\n  /**\n   * Compile the node into an optimized, evauatable JavaScript function\n   * @return {{evaluate: function([Object])}} object\n   *                Returns an object with a function 'evaluate',\n   *                which can be invoked as expr.evaluate([scope: Object]),\n   *                where scope is an optional object with\n   *                variables.\n   */\n\n  Node.prototype.compile = function () {\n    var expr = this._compile(mathWithTransform, {});\n\n    var args = {};\n    var context = null;\n\n    function evaluate(scope) {\n      var s = scope || {};\n\n      _validateScope(s);\n\n      return expr(s, args, context);\n    }\n\n    return {\n      evaluate\n    };\n  };\n  /**\n   * Compile a node into a JavaScript function.\n   * This basically pre-calculates as much as possible and only leaves open\n   * calculations which depend on a dynamic scope with variables.\n   * @param {Object} math     Math.js namespace with functions and constants.\n   * @param {Object} argNames An object with argument names as key and `true`\n   *                          as value. Used in the SymbolNode to optimize\n   *                          for arguments from user assigned functions\n   *                          (see FunctionAssignmentNode) or special symbols\n   *                          like `end` (see IndexNode).\n   * @return {function} Returns a function which can be called like:\n   *                        evalNode(scope: Object, args: Object, context: *)\n   */\n\n\n  Node.prototype._compile = function (math, argNames) {\n    throw new Error('Method _compile should be implemented by type ' + this.type);\n  };\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n\n\n  Node.prototype.forEach = function (callback) {\n    // must be implemented by each of the Node implementations\n    throw new Error('Cannot run forEach on a Node interface');\n  };\n  /**\n   * Create a new Node having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\n   * @returns {OperatorNode} Returns a transformed copy of the node\n   */\n\n\n  Node.prototype.map = function (callback) {\n    // must be implemented by each of the Node implementations\n    throw new Error('Cannot run map on a Node interface');\n  };\n  /**\n   * Validate whether an object is a Node, for use with map\n   * @param {Node} node\n   * @returns {Node} Returns the input if it's a node, else throws an Error\n   * @protected\n   */\n\n\n  Node.prototype._ifNode = function (node) {\n    if (!isNode(node)) {\n      throw new TypeError('Callback function must return a Node');\n    }\n\n    return node;\n  };\n  /**\n   * Recursively traverse all nodes in a node tree. Executes given callback for\n   * this node and each of its child nodes.\n   * @param {function(node: Node, path: string, parent: Node)} callback\n   *          A callback called for every node in the node tree.\n   */\n\n\n  Node.prototype.traverse = function (callback) {\n    // execute callback for itself\n    // eslint-disable-next-line\n    callback(this, null, null); // recursively traverse over all childs of a node\n\n    function _traverse(node, callback) {\n      node.forEach(function (child, path, parent) {\n        callback(child, path, parent);\n\n        _traverse(child, callback);\n      });\n    }\n\n    _traverse(this, callback);\n  };\n  /**\n   * Recursively transform a node tree via a transform function.\n   *\n   * For example, to replace all nodes of type SymbolNode having name 'x' with a\n   * ConstantNode with value 2:\n   *\n   *     const res = Node.transform(function (node, path, parent) {\n   *       if (node && node.isSymbolNode) && (node.name === 'x')) {\n   *         return new ConstantNode(2)\n   *       }\n   *       else {\n   *         return node\n   *       }\n   *     })\n   *\n   * @param {function(node: Node, path: string, parent: Node) : Node} callback\n   *          A mapping function accepting a node, and returning\n   *          a replacement for the node or the original node.\n   *          Signature: callback(node: Node, index: string, parent: Node) : Node\n   * @return {Node} Returns the original node or its replacement\n   */\n\n\n  Node.prototype.transform = function (callback) {\n    function _transform(child, path, parent) {\n      var replacement = callback(child, path, parent);\n\n      if (replacement !== child) {\n        // stop iterating when the node is replaced\n        return replacement;\n      }\n\n      return child.map(_transform);\n    }\n\n    return _transform(this, null, null);\n  };\n  /**\n   * Find any node in the node tree matching given filter function. For example, to\n   * find all nodes of type SymbolNode having name 'x':\n   *\n   *     const results = Node.filter(function (node) {\n   *       return (node && node.isSymbolNode) && (node.name === 'x')\n   *     })\n   *\n   * @param {function(node: Node, path: string, parent: Node) : Node} callback\n   *            A test function returning true when a node matches, and false\n   *            otherwise. Function signature:\n   *            callback(node: Node, index: string, parent: Node) : boolean\n   * @return {Node[]} nodes       An array with nodes matching given filter criteria\n   */\n\n\n  Node.prototype.filter = function (callback) {\n    var nodes = [];\n    this.traverse(function (node, path, parent) {\n      if (callback(node, path, parent)) {\n        nodes.push(node);\n      }\n    });\n    return nodes;\n  };\n  /**\n   * Create a shallow clone of this node\n   * @return {Node}\n   */\n\n\n  Node.prototype.clone = function () {\n    // must be implemented by each of the Node implementations\n    throw new Error('Cannot clone a Node interface');\n  };\n  /**\n   * Create a deep clone of this node\n   * @return {Node}\n   */\n\n\n  Node.prototype.cloneDeep = function () {\n    return this.map(function (node) {\n      return node.cloneDeep();\n    });\n  };\n  /**\n   * Deep compare this node with another node.\n   * @param {Node} other\n   * @return {boolean} Returns true when both nodes are of the same type and\n   *                   contain the same values (as do their childs)\n   */\n\n\n  Node.prototype.equals = function (other) {\n    return other ? deepStrictEqual(this, other) : false;\n  };\n  /**\n   * Get string representation. (wrapper function)\n   *\n   * This function can get an object of the following form:\n   * {\n   *    handler: //This can be a callback function of the form\n   *             // \"function callback(node, options)\"or\n   *             // a map that maps function names (used in FunctionNodes)\n   *             // to callbacks\n   *    parenthesis: \"keep\" //the parenthesis option (This is optional)\n   * }\n   *\n   * @param {Object} [options]\n   * @return {string}\n   */\n\n\n  Node.prototype.toString = function (options) {\n    var customString = this._getCustomString(options);\n\n    if (typeof customString !== 'undefined') {\n      return customString;\n    }\n\n    return this._toString(options);\n  };\n  /**\n   * Get a JSON representation of the node\n   * Both .toJSON() and the static .fromJSON(json) should be implemented by all\n   * implementations of Node\n   * @returns {Object}\n   */\n\n\n  Node.prototype.toJSON = function () {\n    throw new Error('Cannot serialize object: toJSON not implemented by ' + this.type);\n  };\n  /**\n   * Get HTML representation. (wrapper function)\n   *\n   * This function can get an object of the following form:\n   * {\n   *    handler: //This can be a callback function of the form\n   *             // \"function callback(node, options)\" or\n   *             // a map that maps function names (used in FunctionNodes)\n   *             // to callbacks\n   *    parenthesis: \"keep\" //the parenthesis option (This is optional)\n   * }\n   *\n   * @param {Object} [options]\n   * @return {string}\n   */\n\n\n  Node.prototype.toHTML = function (options) {\n    var customString = this._getCustomString(options);\n\n    if (typeof customString !== 'undefined') {\n      return customString;\n    }\n\n    return this.toHTML(options);\n  };\n  /**\n   * Internal function to generate the string output.\n   * This has to be implemented by every Node\n   *\n   * @throws {Error}\n   */\n\n\n  Node.prototype._toString = function () {\n    // must be implemented by each of the Node implementations\n    throw new Error('_toString not implemented for ' + this.type);\n  };\n  /**\n   * Get LaTeX representation. (wrapper function)\n   *\n   * This function can get an object of the following form:\n   * {\n   *    handler: //This can be a callback function of the form\n   *             // \"function callback(node, options)\"or\n   *             // a map that maps function names (used in FunctionNodes)\n   *             // to callbacks\n   *    parenthesis: \"keep\" //the parenthesis option (This is optional)\n   * }\n   *\n   * @param {Object} [options]\n   * @return {string}\n   */\n\n\n  Node.prototype.toTex = function (options) {\n    var customString = this._getCustomString(options);\n\n    if (typeof customString !== 'undefined') {\n      return customString;\n    }\n\n    return this._toTex(options);\n  };\n  /**\n   * Internal function to generate the LaTeX output.\n   * This has to be implemented by every Node\n   *\n   * @param {Object} [options]\n   * @throws {Error}\n   */\n\n\n  Node.prototype._toTex = function (options) {\n    // must be implemented by each of the Node implementations\n    throw new Error('_toTex not implemented for ' + this.type);\n  };\n  /**\n   * Helper used by `to...` functions.\n   */\n\n\n  Node.prototype._getCustomString = function (options) {\n    if (options && typeof options === 'object') {\n      switch (typeof options.handler) {\n        case 'object':\n        case 'undefined':\n          return;\n\n        case 'function':\n          return options.handler(this, options);\n\n        default:\n          throw new TypeError('Object or function expected as callback');\n      }\n    }\n  };\n  /**\n   * Get identifier.\n   * @return {string}\n   */\n\n\n  Node.prototype.getIdentifier = function () {\n    return this.type;\n  };\n  /**\n   * Get the content of the current Node.\n   * @return {Node} node\n   **/\n\n\n  Node.prototype.getContent = function () {\n    return this;\n  };\n  /**\n   * Validate the symbol names of a scope.\n   * Throws an error when the scope contains an illegal symbol.\n   * @param {Object} scope\n   */\n\n\n  function _validateScope(scope) {\n    for (var symbol in scope) {\n      if (hasOwnProperty(scope, symbol)) {\n        if (symbol in keywords) {\n          throw new Error('Scope contains an illegal symbol, \"' + symbol + '\" is a reserved keyword');\n        }\n      }\n    }\n  }\n\n  return Node;\n}, {\n  isClass: true,\n  isNode: true\n});","map":{"version":3,"sources":["/Users/elimunn/Desktop/plot-recipes/node_modules/mathjs/lib/esm/expression/node/Node.js"],"names":["isNode","keywords","deepStrictEqual","hasOwnProperty","factory","name","dependencies","createNode","_ref","mathWithTransform","Node","SyntaxError","prototype","evaluate","scope","compile","type","comment","expr","_compile","args","context","s","_validateScope","math","argNames","Error","forEach","callback","map","_ifNode","node","TypeError","traverse","_traverse","child","path","parent","transform","_transform","replacement","filter","nodes","push","clone","cloneDeep","equals","other","toString","options","customString","_getCustomString","_toString","toJSON","toHTML","toTex","_toTex","handler","getIdentifier","getContent","symbol","isClass"],"mappings":"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","sourcesContent":["import { isNode } from '../../utils/is.js';\nimport { keywords } from '../keywords.js';\nimport { deepStrictEqual, hasOwnProperty } from '../../utils/object.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'Node';\nvar dependencies = ['mathWithTransform'];\nexport var createNode = /* #__PURE__ */factory(name, dependencies, (_ref) => {\n  var {\n    mathWithTransform\n  } = _ref;\n\n  /**\n   * Node\n   */\n  function Node() {\n    if (!(this instanceof Node)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n  }\n  /**\n   * Evaluate the node\n   * @param {Object} [scope]  Scope to read/write variables\n   * @return {*}              Returns the result\n   */\n\n\n  Node.prototype.evaluate = function (scope) {\n    return this.compile().evaluate(scope);\n  };\n\n  Node.prototype.type = 'Node';\n  Node.prototype.isNode = true;\n  Node.prototype.comment = '';\n  /**\n   * Compile the node into an optimized, evauatable JavaScript function\n   * @return {{evaluate: function([Object])}} object\n   *                Returns an object with a function 'evaluate',\n   *                which can be invoked as expr.evaluate([scope: Object]),\n   *                where scope is an optional object with\n   *                variables.\n   */\n\n  Node.prototype.compile = function () {\n    var expr = this._compile(mathWithTransform, {});\n\n    var args = {};\n    var context = null;\n\n    function evaluate(scope) {\n      var s = scope || {};\n\n      _validateScope(s);\n\n      return expr(s, args, context);\n    }\n\n    return {\n      evaluate\n    };\n  };\n  /**\n   * Compile a node into a JavaScript function.\n   * This basically pre-calculates as much as possible and only leaves open\n   * calculations which depend on a dynamic scope with variables.\n   * @param {Object} math     Math.js namespace with functions and constants.\n   * @param {Object} argNames An object with argument names as key and `true`\n   *                          as value. Used in the SymbolNode to optimize\n   *                          for arguments from user assigned functions\n   *                          (see FunctionAssignmentNode) or special symbols\n   *                          like `end` (see IndexNode).\n   * @return {function} Returns a function which can be called like:\n   *                        evalNode(scope: Object, args: Object, context: *)\n   */\n\n\n  Node.prototype._compile = function (math, argNames) {\n    throw new Error('Method _compile should be implemented by type ' + this.type);\n  };\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n\n\n  Node.prototype.forEach = function (callback) {\n    // must be implemented by each of the Node implementations\n    throw new Error('Cannot run forEach on a Node interface');\n  };\n  /**\n   * Create a new Node having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\n   * @returns {OperatorNode} Returns a transformed copy of the node\n   */\n\n\n  Node.prototype.map = function (callback) {\n    // must be implemented by each of the Node implementations\n    throw new Error('Cannot run map on a Node interface');\n  };\n  /**\n   * Validate whether an object is a Node, for use with map\n   * @param {Node} node\n   * @returns {Node} Returns the input if it's a node, else throws an Error\n   * @protected\n   */\n\n\n  Node.prototype._ifNode = function (node) {\n    if (!isNode(node)) {\n      throw new TypeError('Callback function must return a Node');\n    }\n\n    return node;\n  };\n  /**\n   * Recursively traverse all nodes in a node tree. Executes given callback for\n   * this node and each of its child nodes.\n   * @param {function(node: Node, path: string, parent: Node)} callback\n   *          A callback called for every node in the node tree.\n   */\n\n\n  Node.prototype.traverse = function (callback) {\n    // execute callback for itself\n    // eslint-disable-next-line\n    callback(this, null, null); // recursively traverse over all childs of a node\n\n    function _traverse(node, callback) {\n      node.forEach(function (child, path, parent) {\n        callback(child, path, parent);\n\n        _traverse(child, callback);\n      });\n    }\n\n    _traverse(this, callback);\n  };\n  /**\n   * Recursively transform a node tree via a transform function.\n   *\n   * For example, to replace all nodes of type SymbolNode having name 'x' with a\n   * ConstantNode with value 2:\n   *\n   *     const res = Node.transform(function (node, path, parent) {\n   *       if (node && node.isSymbolNode) && (node.name === 'x')) {\n   *         return new ConstantNode(2)\n   *       }\n   *       else {\n   *         return node\n   *       }\n   *     })\n   *\n   * @param {function(node: Node, path: string, parent: Node) : Node} callback\n   *          A mapping function accepting a node, and returning\n   *          a replacement for the node or the original node.\n   *          Signature: callback(node: Node, index: string, parent: Node) : Node\n   * @return {Node} Returns the original node or its replacement\n   */\n\n\n  Node.prototype.transform = function (callback) {\n    function _transform(child, path, parent) {\n      var replacement = callback(child, path, parent);\n\n      if (replacement !== child) {\n        // stop iterating when the node is replaced\n        return replacement;\n      }\n\n      return child.map(_transform);\n    }\n\n    return _transform(this, null, null);\n  };\n  /**\n   * Find any node in the node tree matching given filter function. For example, to\n   * find all nodes of type SymbolNode having name 'x':\n   *\n   *     const results = Node.filter(function (node) {\n   *       return (node && node.isSymbolNode) && (node.name === 'x')\n   *     })\n   *\n   * @param {function(node: Node, path: string, parent: Node) : Node} callback\n   *            A test function returning true when a node matches, and false\n   *            otherwise. Function signature:\n   *            callback(node: Node, index: string, parent: Node) : boolean\n   * @return {Node[]} nodes       An array with nodes matching given filter criteria\n   */\n\n\n  Node.prototype.filter = function (callback) {\n    var nodes = [];\n    this.traverse(function (node, path, parent) {\n      if (callback(node, path, parent)) {\n        nodes.push(node);\n      }\n    });\n    return nodes;\n  };\n  /**\n   * Create a shallow clone of this node\n   * @return {Node}\n   */\n\n\n  Node.prototype.clone = function () {\n    // must be implemented by each of the Node implementations\n    throw new Error('Cannot clone a Node interface');\n  };\n  /**\n   * Create a deep clone of this node\n   * @return {Node}\n   */\n\n\n  Node.prototype.cloneDeep = function () {\n    return this.map(function (node) {\n      return node.cloneDeep();\n    });\n  };\n  /**\n   * Deep compare this node with another node.\n   * @param {Node} other\n   * @return {boolean} Returns true when both nodes are of the same type and\n   *                   contain the same values (as do their childs)\n   */\n\n\n  Node.prototype.equals = function (other) {\n    return other ? deepStrictEqual(this, other) : false;\n  };\n  /**\n   * Get string representation. (wrapper function)\n   *\n   * This function can get an object of the following form:\n   * {\n   *    handler: //This can be a callback function of the form\n   *             // \"function callback(node, options)\"or\n   *             // a map that maps function names (used in FunctionNodes)\n   *             // to callbacks\n   *    parenthesis: \"keep\" //the parenthesis option (This is optional)\n   * }\n   *\n   * @param {Object} [options]\n   * @return {string}\n   */\n\n\n  Node.prototype.toString = function (options) {\n    var customString = this._getCustomString(options);\n\n    if (typeof customString !== 'undefined') {\n      return customString;\n    }\n\n    return this._toString(options);\n  };\n  /**\n   * Get a JSON representation of the node\n   * Both .toJSON() and the static .fromJSON(json) should be implemented by all\n   * implementations of Node\n   * @returns {Object}\n   */\n\n\n  Node.prototype.toJSON = function () {\n    throw new Error('Cannot serialize object: toJSON not implemented by ' + this.type);\n  };\n  /**\n   * Get HTML representation. (wrapper function)\n   *\n   * This function can get an object of the following form:\n   * {\n   *    handler: //This can be a callback function of the form\n   *             // \"function callback(node, options)\" or\n   *             // a map that maps function names (used in FunctionNodes)\n   *             // to callbacks\n   *    parenthesis: \"keep\" //the parenthesis option (This is optional)\n   * }\n   *\n   * @param {Object} [options]\n   * @return {string}\n   */\n\n\n  Node.prototype.toHTML = function (options) {\n    var customString = this._getCustomString(options);\n\n    if (typeof customString !== 'undefined') {\n      return customString;\n    }\n\n    return this.toHTML(options);\n  };\n  /**\n   * Internal function to generate the string output.\n   * This has to be implemented by every Node\n   *\n   * @throws {Error}\n   */\n\n\n  Node.prototype._toString = function () {\n    // must be implemented by each of the Node implementations\n    throw new Error('_toString not implemented for ' + this.type);\n  };\n  /**\n   * Get LaTeX representation. (wrapper function)\n   *\n   * This function can get an object of the following form:\n   * {\n   *    handler: //This can be a callback function of the form\n   *             // \"function callback(node, options)\"or\n   *             // a map that maps function names (used in FunctionNodes)\n   *             // to callbacks\n   *    parenthesis: \"keep\" //the parenthesis option (This is optional)\n   * }\n   *\n   * @param {Object} [options]\n   * @return {string}\n   */\n\n\n  Node.prototype.toTex = function (options) {\n    var customString = this._getCustomString(options);\n\n    if (typeof customString !== 'undefined') {\n      return customString;\n    }\n\n    return this._toTex(options);\n  };\n  /**\n   * Internal function to generate the LaTeX output.\n   * This has to be implemented by every Node\n   *\n   * @param {Object} [options]\n   * @throws {Error}\n   */\n\n\n  Node.prototype._toTex = function (options) {\n    // must be implemented by each of the Node implementations\n    throw new Error('_toTex not implemented for ' + this.type);\n  };\n  /**\n   * Helper used by `to...` functions.\n   */\n\n\n  Node.prototype._getCustomString = function (options) {\n    if (options && typeof options === 'object') {\n      switch (typeof options.handler) {\n        case 'object':\n        case 'undefined':\n          return;\n\n        case 'function':\n          return options.handler(this, options);\n\n        default:\n          throw new TypeError('Object or function expected as callback');\n      }\n    }\n  };\n  /**\n   * Get identifier.\n   * @return {string}\n   */\n\n\n  Node.prototype.getIdentifier = function () {\n    return this.type;\n  };\n  /**\n   * Get the content of the current Node.\n   * @return {Node} node\n   **/\n\n\n  Node.prototype.getContent = function () {\n    return this;\n  };\n  /**\n   * Validate the symbol names of a scope.\n   * Throws an error when the scope contains an illegal symbol.\n   * @param {Object} scope\n   */\n\n\n  function _validateScope(scope) {\n    for (var symbol in scope) {\n      if (hasOwnProperty(scope, symbol)) {\n        if (symbol in keywords) {\n          throw new Error('Scope contains an illegal symbol, \"' + symbol + '\" is a reserved keyword');\n        }\n      }\n    }\n  }\n\n  return Node;\n}, {\n  isClass: true,\n  isNode: true\n});"]},"metadata":{},"sourceType":"module"}